{"posts":[{"title":"AcWing240_食物链","text":"AcWing240_食物链 到根结点的距离有3种情况： 余1：可以吃根结点 余2：可以被根结点吃 余0：与根结点是同类 每个结点存储的是到他父节点的距离，因此需要遍历更新成到根结点的距离（路径压缩）：d[i]的意义是第i个结点到其父结点的距离；在find[]函数的过程中，则会更新为到父节点的距离 合并操作(dx!=dy)时，将x的父节点指向y的父节点： xxx和yyy同一类，则有(d[x]+?)%3=d[y]%3(d[x]+?)\\% 3=d[y]\\%3(d[x]+?)%3=d[y]%3，有?=d[y]−d[x]?=d[y]-d[x]?=d[y]−d[x] xxx是吃yyy，则有(d[x]+?)%3=d[y]%3+1(d[x]+?)\\% 3=d[y]\\%3+1(d[x]+?)%3=d[y]%3+1，有?=d[y]−d[x]+1?=d[y]-d[x]+1?=d[y]−d[x]+1 判断操作(dx==dy)时，则 xxx和yyy同一类，则有d[x]%3=d[y]%3d[x]\\% 3=d[y]\\%3d[x]%3=d[y]%3 xxx是吃yyy，则有d[x]%3=d[y]%3+1d[x]\\% 3=d[y]\\%3+1d[x]%3=d[y]%3+1","link":"/2023/10/16/AcWing240-%E9%A3%9F%E7%89%A9%E9%93%BE/"},{"title":"AcWing842_排列数字","text":"AcWing842_排列数字 123456789101112131415161718192021// u代表当前层数void dfs(int u){ if (u == n) { for (int i = 0; i &lt; n; i++) cout &lt;&lt; path[i]; } // 对于每个数进行遍历 for (int i = 0; i &lt; n; i++) // 该数没有被用过 if (!st[i]) { path[u] = i; st[i] = true; // 一般会做剪枝操作，进入dfs需要条件 dfs(u + 1); // 恢复现场 st[i] = false; }}","link":"/2023/10/17/AcWing842-%E6%8E%92%E5%88%97%E6%95%B0%E5%AD%97/"},{"title":"AI工具总结","text":"Cursor https://www.cursor.com/ 【编程工具】独立IDE 可以导入vscode的插件设置等 有划词修改功能-&gt;微调 开箱即用-&gt;没有网络问题 Copilot https://github.com/features/copilot 【编程工具】IDE插件-&gt;vscode，JetBrains等 集成Github代码 #TODO 需要Github学生认证 Claude https://claude.ai/onboarding 要手机号注册 GPT https://chatgpt.com/ 现最新：GPT4o 文心一言 https://yiyan.baidu.com/ 整体效果和GPT3.5比较接近 通义千问 https://tongyi.aliyun.com/ 开源模型 豆包 https://www.doubao.com/chat/ 可以语音 Kimi https://kimi.moonshot.cn/ 长文本，联网搜索","link":"/2024/10/30/AI%E5%B7%A5%E5%85%B7%E6%80%BB%E7%BB%93/"},{"title":"AcWing843_n皇后问题","text":"AcWing843_n-皇后问题 该问题可以用排列数来做，但是需要进行剪枝操作 或者用子集树来做，对于每一个格子进行枚举，可以选择放/不放 1234567891011121314151617181920212223// s代表当前层数void dfs(int x, int y, int s){ if (y == n) y = 0, x++; if (x = n) { if (s == n) { for (int i = 0; i &lt; n; i++) puts(g[i]); } return; } //不放皇后 dfs(x, y + 1, s); //放皇后 if (!row[x] &amp;&amp; !col[y] &amp;&amp; !dg[x + y] &amp;&amp; !udg[x - y + n]) { row[x] = col[y] = dg[x + y] = udg[x - y + n] = true; dfs(x, y + 1, s + 1); // 恢复现场 row[x] = col[y] = dg[x + y] = udg[x - y + n] = false; }}","link":"/2023/10/17/AcWing843-n-%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/"},{"title":"DeepML19_Principal Component Analysis (PCA)","text":"PCA利用特征值和特征向量来识别数据集的主成分 对于给定的矩阵AAA，表示PCA中的协方差矩阵，特征值λ\\lambdaλ及其对应的特征向量vvv满足：Av=λvAv=\\lambda vAv=λv 矩阵的特征值AAA通过求解特征方程可以得出det(A−λI)=0det(A-\\lambda I)=0det(A−λI)=0，III是与AAA维度相同的单位矩阵 特征值的大小与其对应的特征向量在表示数据集变异性方面的重要性相关，通过选择与最大特征值相对应的特征向量子集，PCA可以实现降维，同时尽可能多地保留数据集的变异性 实际应用 标准化数据集：保证每个特征的平均值是000，标准差是111 计算协方差矩阵：反映特征如何一起变化 寻找特征值和特征向量：求解协方差矩阵的特征方程 选择主成分：选择具有最高特征值的特征向量（成分）进行降维","link":"/2024/11/10/DeepML19_Principal%20Component%20Analysis%20(PCA)/"},{"title":"AcWing845_八数码","text":"AcWing845_八数码 理解题意，假如处于下面这个状态，则3种可能转移方案，就是向上下左右转移 1231 2 3 1 2 3 X 2 3 1 2 3 X 4 6 4 X 6 1 4 6 7 4 67 5 8 7 5 8 7 5 8 X 5 8 BFS求的时候需要定义两个数据结构 队列 queue 记录每个状态的距离 dist 难点 状态怎么表示-用字符串来表示： 1231 2 34 5 6 可表示为 &quot;1234567X8&quot;7 X 8 如果记录每个状态的距离 恢复成 3 * 3的矩阵 转移，可以上下左右移动 将矩阵恢复成字符串 当当前状态 == &quot;12345678X&quot;时，则代表转移完成","link":"/2023/10/17/AcWing845-%E5%85%AB%E6%95%B0%E7%A0%81/"},{"title":"DeepML21_Pegasos Kernel SVM Implementation","text":"","link":"/2024/11/10/DeepML21_Pegasos%20Kernel%20SVM%20Implementation/"},{"title":"DeepML40_Implementing a Custom Dense Layer in Python","text":"","link":"/2024/11/11/DeepML40_Implementing%20a%20Custom%20Dense%20Layer%20in%20Python/"},{"title":"DeepML38_Implement AdaBoost Fit Method","text":"后一个模型的训练永远是在前一个模型的基础上完成；顺序，级联的结构 对于训练每个weak learner，计算样本困难度 初始化所有样本难度为wi=1Nw_i=\\frac{1}{N}wi​=N1​ 利用当前weak learner的训练结果，更新所有样本的困难度 winew ={12(1−ε)wiold 12εwiold w_i^{\\text {new }}=\\left\\{\\begin{array}{c}\\frac{1}{2(1-\\varepsilon)} w_i^{\\text {old }} \\\\ \\frac{1}{2 \\varepsilon} w_i^{\\text {old }}\\end{array}\\right.winew ​={2(1−ε)1​wiold ​2ε1​wiold ​​，如果当前样本被正确分类和错误分类，ε\\varepsilonε表示通过当前learner所产生的错误率 给予当前样本困难度，训练下一个learner 学习每个weak learner的权重，αk=12log(1−εkεk)\\alpha_k = \\frac{1}{2}log(\\frac{1-\\varepsilon_k}{\\varepsilon_k})αk​=21​log(εk​1−εk​​) α1f1+α2f2+α3f3=Fˉ\\alpha_1 f_1+\\alpha_2 f_2+\\alpha_3 f_3=\\bar{F}α1​f1​+α2​f2​+α3​f3​=Fˉ Pros：模型性能天花板高 顺序，级联结构+利用权重组合结果，擅长解决困难问题 Cons：模型的性能起点低 容易Overfit 对于异常点Outlier过于敏感 速度慢","link":"/2024/11/11/DeepML38_Implement%20AdaBoost%20Fit%20Method/"},{"title":"Flowable学习","text":"下面主要是记录一下Flowable的学习过程 官方手册 https://tkjohn.github.io/flowable-userguide/ 表说明 大致功能 表名称 功能 ACT_RE_* 'RE’表示 repository。RepositoryService接口操作的表。带此前缀的表包含的是静态信息，如，流程定义，流程的资源（图片，规则等） ACT_RU_* 'RU’表示 runtime。 运行时的表存储着流程变量，用户任务，变量，职责（job）等运行时的数据 ACT_ID_* ’ID’表示identity(组织机构)。包含标识的信息，如用户，用户组 ACT_HI_* 'HI’表示 history。这些表包含着历史的相关数据，如结束的流程实例，变量，任务 ACT_GE_* GE 表示 general。普通数据，各种情况都使用的数据 具体的表结构的含义: 表分类 表名 解释 一般数据 [ACT_GE_BYTEARRAY] 二进制数据表，如流程定义、流程模板、流程图的字节流文件 [ACT_GE_PROPERTY] 属性数据表 流程历史记录 [ACT_HI_ACTINST] 历史节点表，存放流程实例运转的各个节点信息（包含开始、结束等非任务节点） [ACT_HI_ATTACHMENT] 历史附件表，存放历史节点上传的附件信息 [ACT_HI_COMMENT] 历史意见表 [ACT_HI_DETAIL] 历史详情表，存储节点运转的一些信息 [ACT_HI_IDENTITYLINK] 历史流程人员表，存储流程各节点候选、办理人员信息，常用于查询某人或部门的已办任务 [ACT_HI_PROCINST] 历史流程实例表，存储流程实例历史数据 [ACT_HI_TASKINST] 历史流程任务表，存储历史任务节点 [ACT_HI_VARINST] 流程历史变量表，存储流程历史节点的变量信息 流程定义表 [ACT_RE_DEPLOYMENT] 部属信息表，存储流程定义、模板部署信息 [ACT_RE_MODEL] 流程模板信息表，存储流程模板相关描述信息，但其真正内容存储在act_ge_bytearray表中，以字节形式存储 [ACT_RE_PROCDEF] 流程定义信息表，存储流程定义相关描述信息，但其真正内容存储在act_ge_bytearray表中，以字节形式存储 运行实例表 [ACT_RU_EVENT_SUBSCR] 监听信息表 [ACT_RU_EXECUTION] 运行时流程执行实例表，记录运行中流程运行的各个分支信息（当没有子流程时，其数据与act_ru_task表数据是一一对应的） [ACT_RU_IDENTITYLINK] 运行时流程人员表，重要，常用于查询人员或部门的待办任务时使用 [ACT_RU_JOB] 运行时定时任务数据表，存储流程的定时任务信息 [ACT_RU_TASK] 运行时流程任务节点表，存储运行中流程的任务节点信息，常用于查询人员或部门的待办任务时使用 [ACT_RU_VARIABLE] 运行时流程变量数据表，存储运行中的流程各节点的变量信息 用户用户组表 [ACT_ID_BYTEARRAY] 二进制数据表 [ACT_ID_GROUP] 用户组信息表，对应节点选定候选组信息 [ACT_ID_INFO] 用户扩展信息表，存储用户扩展信息 [ACT_ID_MEMBERSHIP] 用户与用户组关系表 [ACT_ID_PRIV] 权限表 [ACT_ID_PRIV_MAPPING] 用户或组权限关系表 [ACT_ID_PROPERTY] 属性表 [ACT_ID_TOKEN] 记录用户的token信息 [ACT_ID_USER] 用户信息表，对应节点选定办理人或候选人信息 服务说明 Service Service是工作流引擎提供用于进行工作流部署、执行、管理的服务接口，我们使用这些接口可以就是操作服务对应的数据表 service名称 service作用 ProcessEngine 引擎 RepositoryService 资源管理 RuntimeService 流程运行管理 TaskService 任务管理 HistoryService 历史服务 ManagementService 定时器等，读取数据库和原始表的信息 IdentityService 管理用户 FormService 表单服务 DynamicBpmnService 修改流程定义 重要名词 事件：捕获与抛出事件 顺序流：顺序流是流程中两个元素间的连接器 网关：用于控制执行的流向 任务：用户任务，邮件任务等 子流程与调用活动：之间有区别 基本流程 1. 设计流程 涉及到表结构： 名称 功能 act_de_model 保存的是流程设计的json格式文件 act_de_model_history 保存的是流程设计的历史文件 2. 部署流程定义 流程引擎会用XML文件存储在数据库中；repositoryService 转换为内部的、可执行的对象模型-启动实例 部署流程之后，可以通过RepositoryService创建的ProcessDefinitionQuery对象实现查询 123456// 部署流程 获取RepositoryService对象RepositoryService repositoryService = processEngine.getRepositoryService();Deployment deployment = repositoryService.createDeployment()// 创建Deployment对象 .addClasspathResource(&quot;holiday-request.bpmn20.xml&quot;) // 添加流程部署文件 .name(&quot;请求流程&quot;) // 设置部署流程的名称 .deploy(); // 执行部署操作 如果对流程只是部署没有启动，则是可以直接删除；如果流程启动了，则可以选择级联删除（相关任务也会删除） 相关图标：事件图标；活动图标；结构图标；网关图标 涉及到表结构： 名称 功能 act_re_deployment 流程定义部署表，每部署一次就增加一条记录 act_re_procdef 流程定义表，部署每个新的流程定义都会在这张表中增加一条记录 act_ge_bytearray 流程资源表，流程部署的 bpmn文件和png图片会保存在该表中 3. 启动流程实例 启动流程实例通过 runtimeService服务；参数（流程定义id；参数variables） 涉及到表结构： 名称 功能 act_hi_actinst 流程实例执行历史 act_hi_identitylink 流程的参与用户的历史信息 act_hi_procinst 流程实例历史信息 act_hi_taskinst 流程任务历史信息 act_hi_varinst 流程变量历史信息 act_ru_execution 流程执行信息 act_ru_identitylink 流程的参与用户信息 act_ru_task 任务信息 act_ru_variable 流程的变量信息 4.查看任务 12345TaskService taskService = processEngine.getTaskService();List&lt;Task&gt; list = taskService.createTaskQuery() .processDefinitionKey(&quot;holidayRequestNew&quot;) .taskAssignee(&quot;lisi&quot;) .list(); 5.完成任务 12345// 添加流程变量Map&lt;String,Object&gt; variables = new HashMap&lt;&gt;();variables.put(&quot;approved&quot;,false); // 拒绝请假// 完成任务taskService.complete(task.getId(),variables); 6.流程的删除 12345// 删除流程定义，如果该流程定义已经有了流程实例启动则删除时报错// repositoryService.deleteDeployment(&quot;1&quot;);// 设置为TRUE 级联删除流程定义，及时流程有实例启动，也可以删除，设置为false 非级联删除操作。repositoryService.deleteDeployment(&quot;2501&quot;,true); 7.查看历史信息 12345List&lt;HistoricActivityInstance&gt; list = historyService.createHistoricActivityInstanceQuery() .processDefinitionId(&quot;holidayRequestNew:1:10003&quot;) .finished() .orderByHistoricActivityInstanceEndTime().asc() .list(); 一个例子","link":"/2023/09/01/Flowable%E5%AD%A6%E4%B9%A0/"},{"title":"Huggingface学习","text":"1. 浏览器网页下载 2. huggingface-cli+uh_transfer huggingface-cli 和 hf_transfer 是 hugging face 官方提供的专门为下载而设计的工具链。前者是一个命令行工具，后者是下载加速模块 huggingface-cli 安装：pip install -U huggingface_hub 用法 huggingface-cli download --resume-download bigscience/bloom-560m --local-dir bloom-560m huggingface-cli download --resume-download --repo-type dataset lavita/medical-qa-shared-task-v1-toy 可以直接用模型名引用模型；from_pretrain的时候可以接受模型id，也可以接受存储路径；如果用huggingface-cli下载，尽管指定了路径，也可以用模型名字来引用 -&gt; 因为会在.cache/huggingface下维护模型的符号链接；可以用--local-dir-use-symlinks=False来不链接 hf_transfer 安装：pip install -U hf-transfer 设置： linux: export HF_HUB_ENABLE_HF_TRANSFER=1 windows: $env:HF_HUB_ENABLE_HF_TRANSFER = 1 和上面一样使用huggingface-cli：huggingface-cli download --resume-download bigscience/bloom-560m --local-dir bloom-560m 没有进度条 3. snapshot_download 参数众多、比较完善 12345678from huggingface_hub import snapshot_downloadsnapshot_download( repo_id=&quot;bigscience/bloom-560m&quot;, local_dir=&quot;/data/user/test&quot;, local_dir_use_symlinks=False, proxies={&quot;https&quot;: &quot;http://localhost:7890&quot;}) 123# 需要登录的模型import huggingface_hubhuggingface_hub.login(&quot;HF_TOKEN&quot;) # token 从 https://huggingface.co/settings/tokens 获取 4. from_pretrained 常规方法 5. hf_hub_download 常规方法 6. 登录下载 Git 1git clone https://hf_username:hf_token@huggingface.co/meta-llama/Llama-2-7b-chat-hf huggingface-cli 1huggingface-cli download --token hf_*** --resume-download bigscience/bloom-560m --local-dir bloom-560m cur, wegt 123curl -L --header &quot;Authorization: Bearer hf_***&quot; -o model-00001-of-00002.safetensors https://huggingface.co/meta-llama/Llama-2-7b-chat-hf/resolve/main/model-00001-of-00002.safetensorswget --header &quot;Authorization: Bearer hf_***&quot; https://huggingface.co/meta-llama/Llama-2-7b-chat-hf/resolve/main/model-00001-of-00002.safetensors snapshot_download 12import huggingface_hubhuggingface_hub.login(&quot;hf_***&quot;) 7. 镜像下载 123# 注意在import huggingface_hub前import osos.environ['HF_ENDPOINT'] = 'https://hf-mirror.com' 12$env:HF_ENDPOINT = &quot;https://hf-mirror.com&quot;export HF_ENDPOINT=&quot;https://hf-mirror.com&quot;","link":"/2024/10/23/Huggingface%E5%AD%A6%E4%B9%A0/"},{"title":"Jetbrains全家桶","text":"JetBrains全家桶 Clion 监视数组全部元素：*(int(\\*)[10])(q) Clion的windows不支持文件夹有中文，需全部改成英文；mac可以 Clion找不到&lt;bits/stdc++.h&gt;，应该是更新版本了，/Library/Developer/CommandLineTools/SDKs，直接不断点入，然后在include文件夹下添加即可 快捷键 12345678910111213141516command+D 复制option+command+L 代码规格option+回车 代码错误shift +符号， 查找字符control+R 运行shift+F6 批量修改shift+回车 在下一行插入option+command+回车 在上一行插入command+option+T 环绕，try catch等command+7 视图结构command+option+shift+U 生成类图command+B 直接到方法跳转按Ctrl+Shift+/ 以 /* */ 形式注释代码按ctrl+/ 以 //形式注释代码control + option + o 整理不用的包 镜像源 清华: https://pypi.tuna.tsinghua.edu.cn/simple 豆瓣: http://pypi.douban.com/simple/ 阿里: http://mirrors.aliyun.com/pypi/simple/ 原始：https://pypi.Python.org/simple/","link":"/2023/10/12/Jetbrains%E5%85%A8%E5%AE%B6%E6%A1%B6/"},{"title":"LeetCode1004_最大连续1的个数III","text":"LeetCode1004_最大连续1的个数III 可以转换为以下问题： 枚举右端点rightrightright，希望找到最小的左端点leftleftleft，使得[left,right][left, right][left,right]包含不超过kkk个000 只要枚举右端点，找到区间长度的最大值即可 判断区间000的个数 可以将000和111互换，对数组AAA求出前缀和，记为数组PPP； 那么当且仅当两者的前缀和之差P[right]−P[left−1]&lt;=kP[right]-P[left-1]&lt;=kP[right]−P[left−1]&lt;=k即可 二分查找 P[right]−P[left−1]&lt;=kP[right]-P[left-1]&lt;=kP[right]−P[left−1]&lt;=k等价于P[left−1]&gt;=P[right]−kP[left-1]&gt;=P[right]-kP[left−1]&gt;=P[right]−k 因为数组中只包含000和111，因此PPP前缀和是单调递增的，可以用二分查找找到leftleftleft，目标也就是满足上述条件的最小leftleftleft 因为是left−1left-1left−1，所以为了避免越界，因此可以得到下面这个式子 P[0]=0P[i]=P[i−1]+(1−A[i−1])P[0]=0 \\\\ P[i]=P[i-1]+(1-A[i-1])P[0]=0P[i]=P[i−1]+(1−A[i−1]) 代码中的二分查找实际上用了一个内置函数 1234567891011121314151617class Solution {public: int longestOnes(vector&lt;int&gt;&amp; nums, int k) { int n = nums.size(); vector&lt;int&gt; P(n + 1); for (int i = 1; i &lt;= n; ++i) { P[i] = P[i - 1] + (1 - nums[i - 1]); } int ans = 0; for (int right = 0; right &lt; n; ++right) { int left = lower_bound(P.begin(), P.end(), P[right + 1] - k) - P.begin(); ans = max(ans, right - left + 1); } return ans; }}; 滑动窗口 因为PPP数组是单调递增的，那么P[right]−kP[right]-kP[right]−k也是单调递增的，因此在rightrightright向右移动的时候，leftleftleft也可以同步移动，就不需要存储前缀数组，只需要保存leftleftleft和rightrightright当前的前缀变量即可 1234567891011121314151617class Solution {public: int longestOnes(vector&lt;int&gt;&amp; nums, int k) { int n = nums.size(); int left = 0, lsum = 0, rsum = 0; int ans = 0; for (int right = 0; right &lt; n; ++right) { rsum += 1 - nums[right]; while (lsum &lt; rsum - k) { lsum += 1 - nums[left]; ++left; } ans = max(ans, right - left + 1); } return ans; }};","link":"/2024/03/08/LeetCode1004-%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD1%E7%9A%84%E4%B8%AA%E6%95%B0III/"},{"title":"Latex学习","text":"下面主要是记录一下Latex常用写法 空格 代码 效果 长度 a \\quad b aba \\quad bab 1 em a \\qquad b aba \\qquad bab 2 em a \\enspace b aba \\enspace bab 0.5 em a ; b a ba \\; bab 5/18 em a : b a ba \\: bab 4/18 em a , b 或 a \\thinspace b $a , b $ 3/18 em a ! b 或 a \\negthinspace b $a ! b $ - 3/18 em 字母 特征 语法 效果 大写字母 \\Alpha \\Beta \\Gamma \\Delta \\Epsilon \\Zeta \\Eta\\Theta ABΓΔEZHΘ\\Alpha \\Beta \\Gamma \\Delta \\Epsilon \\Zeta \\Eta \\ThetaABΓΔEZHΘ \\Iota \\Kappa \\Lambda \\Mu \\Nu \\Xi \\Omicron \\Pi IKΛMNΞOΠ\\Iota \\Kappa \\Lambda \\Mu \\Nu \\Xi \\Omicron \\PiIKΛMNΞOΠ \\Rho \\Sigma \\Tau \\Upsilon \\Phi \\Chi \\Psi\\Omega PΣTΥΦXΨΩ\\Rho \\Sigma \\Tau \\Upsilon \\Phi \\Chi \\Psi\\OmegaPΣTΥΦXΨΩ 小写字母 \\alpha \\beta \\gamma \\delta \\epsilon \\zeta \\eta\\theta αβγδϵζηθ\\alpha \\beta \\gamma \\delta \\epsilon \\zeta \\eta\\thetaαβγδϵζηθ \\iota \\kappa\\varkappa \\lambda \\mu \\nu \\xi \\omicron\\pi ικϰλμνξοπ\\iota \\kappa\\varkappa \\lambda \\mu \\nu \\xi \\omicron\\piικϰλμνξοπ \\rho \\sigma \\tau \\upsilon \\phi \\chi \\psi\\omega ρστυϕχψω\\rho \\sigma \\tau \\upsilon \\phi \\chi \\psi\\omegaρστυϕχψω 异体字母 \\Epsilon\\epsilon\\varepsilon Eϵε\\Epsilon\\epsilon\\varepsilonEϵε \\Theta\\theta\\vartheta Θθϑ\\Theta\\theta\\varthetaΘθϑ \\Kappa\\kappa\\varkappa Kκϰ\\Kappa\\kappa\\varkappaKκϰ \\Pi\\pi\\varpi Ππϖ\\Pi\\pi\\varpiΠπϖ \\Rho\\rho\\varrho Pρϱ\\Rho\\rho\\varrhoPρϱ \\Sigma\\sigma\\varsigma Σσς\\Sigma\\sigma\\varsigmaΣσς \\Phi\\phi\\varphi Φϕφ\\Phi\\phi\\varphiΦϕφ 已停用字母 \\digamma ϝ\\digammaϝ 名称 语法 效果 粗体 \\boldsymbol{\\Alpha \\Beta} AB\\boldsymbol{\\Alpha \\Beta}AB 黑板粗体 \\mathbb{ABC} ABC\\mathbb{ABC}ABC 正粗体 \\mathbf{ABC} ABC\\mathbf{ABC}ABC 斜体数字 \\mathit{ABC} ABC\\mathit{ABC}ABC 罗马体 \\mathrm{ABC} ABC\\mathrm{ABC}ABC 哥特体 \\mathfrak{ABC} ABC\\mathfrak{ABC}ABC 手写体 \\mathcal{ABC} ABC\\mathcal{ABC}ABC 希伯来字母 \\aleph\\beth\\gimel\\daleth ℵℶℷℸ\\aleph\\beth\\gimel\\dalethℵℶℷℸ 颜色 字体颜色︰{\\color{色调}表达式} 背景颜色︰{\\pagecolor{色调}表达式} 名称 语法 效果 字体颜色 \\color{Red}x^2 x2\\color{Red}x^2x2 数学 名称 语法 效果 取整 \\lfloor x \\rfloor ⌊x⌋\\lfloor x \\rfloor⌊x⌋ \\lceil x \\rceil ⌈x⌉\\lceil x \\rceil⌈x⌉ 指数 \\exp_a b = a^b, \\exp b = e^b, 10^m exp⁡ab=ab,exp⁡b=eb,10m\\exp_a b = a^b, \\exp b = e^b, 10^mexpa​b=ab,expb=eb,10m 对数 \\ln c, \\lg d = \\log e, \\log_{10} f ln⁡c,lg⁡d=log⁡e,log⁡10f\\ln c, \\lg d = \\log e, \\log_{10} flnc,lgd=loge,log10​f 三角函数 \\sin a, \\cos b, \\tan c, \\cot d, \\sec e, \\csc f sin⁡a,cos⁡b,tan⁡c,cot⁡d,sec⁡e,csc⁡f\\sin a, \\cos b, \\tan c, \\cot d, \\sec e, \\csc fsina,cosb,tanc,cotd,sece,cscf 界限 \\lim_{x \\to \\infty} \\frac{1}{n(n+1)} lim⁡x→∞1n(n+1)\\lim_{x \\to \\infty} \\frac{1}{n(n+1)}limx→∞​n(n+1)1​ 微分及导数 dt, \\mathrm{d}t, \\partial t, \\nabla\\psi dt,dt,∂t,∇ψdt, \\mathrm{d}t, \\partial t, \\nabla\\psidt,dt,∂t,∇ψ \\prime, \\backprime, f^\\prime, f’, f’', f^{(3)}, \\dot y, \\ddot y ′,‵,f′,f′,f′′,f(3),y˙,y¨\\prime, \\backprime, f^\\prime, f', f'', f^{(3)}, \\dot y, \\ddot y′,‵,f′,f′,f′′,f(3),y˙​,y¨​ 模运算 s_k \\equiv 0 \\pmod{m} sk≡0(modm)s_k \\equiv 0 \\pmod{m}sk​≡0(modm) 根号 \\surd, \\sqrt{2}, \\sqrt[n]{} √,2,n\\surd, \\sqrt{2}, \\sqrt[n]{}√,2​,n​ 运算符 \\pm, \\mp, \\dotplus ±,∓,∔\\pm, \\mp, \\dotplus±,∓,∔ \\times, \\div, \\divideontimes, /, \\backslash ×,÷,⋇,/,\\\\times, \\div, \\divideontimes, /, \\backslash×,÷,⋇,/,\\ \\cdot, * \\ast, \\star, \\circ, \\bullet ⋅,∗∗,⋆,∘,∙\\cdot, * \\ast, \\star, \\circ, \\bullet⋅,∗∗,⋆,∘,∙ 集合 \\O, \\empty, \\emptyset, \\varnothing \\O, \\empty, \\emptyset, \\varnothing \\in, \\notin \\not\\in, \\ni, \\not\\ni ∈,∉∉,∋,∌\\in, \\notin \\not\\in, \\ni, \\not\\ni∈,∈/∈,∋,∋ \\cap, \\Cap, \\sqcap, \\bigcap ∩,⋒,⊓,⋂\\cap, \\Cap, \\sqcap, \\bigcap∩,⋒,⊓,⋂ \\cup, \\Cup, \\sqcup, \\bigcup, \\bigsqcup, \\uplus, \\biguplus ∪,⋓,⊔,⋃,⨆,⊎,⨄\\cup, \\Cup, \\sqcup, \\bigcup, \\bigsqcup, \\uplus, \\biguplus∪,⋓,⊔,⋃,⨆,⊎,⨄ \\subset, \\Subset, \\sqsubset ⊂,⋐,⊏\\subset, \\Subset, \\sqsubset⊂,⋐,⊏ \\supset, \\Supset, \\sqsupset ⊃,⋑,⊐\\supset, \\Supset, \\sqsupset⊃,⋑,⊐ 关系符号 =, \\ne, \\neq, \\equiv, \\not\\equiv,\\geq,\\leq =,≠,≠,≡,≢,≥,≤=, \\ne, \\neq, \\equiv, \\not\\equiv,\\geq,\\leq=,=,=,≡,≡,≥,≤ 逻辑运算 \\urcorner,\\lor,\\land,\\rightarrow,\\leftrightarrow ⌝,∨,∧,→,↔\\urcorner,\\lor,\\land,\\rightarrow,\\leftrightarrow┐,∨,∧,→,↔ 向量 \\vec {n} n⃗\\vec {n}n 括号 f(x)=\\begin{cases}0&amp; \\text{x=0}\\1&amp; \\text{x!=0}\\end{cases} \\ f(x)={0x=01x!=0f(x)=\\begin{cases}0&amp; \\text{x=0}\\\\1&amp; \\text{x!=0}\\end{cases} \\\\f(x)={01​x=0x!=0​","link":"/2023/10/11/Latex%E5%AD%A6%E4%B9%A0/"},{"title":"LeetCode105_从前序与中序遍历序列构造二叉树","text":"LeetCode105_从前序与中序遍历序列构造二叉树 前序遍历：【根节点 | 左子树 | 右子树】 中序遍历：【左子树 | 根节点 | 右子树】 可按照以下步骤： 前序遍历的首元素 为 树的根节点 node 的值 在中序遍历中搜索根节点 node 的索引 ，可将 中序遍历 划分为 [ 左子树 | 根节点 | 右子树 ] 根据中序遍历中的左（右）子树的节点数量，可将 前序遍历 划分为 [ 根节点 | 左子树 | 右子树 ] 可确定 三个节点 ：1.树的根节点、2.左子树根节点、3.右子树根节点 然后继续分治；对左右子树继续确定根节点 &amp; 左子树根节点 &amp; 右子树根节点 这个只适用于树中每个值都互相不相等，因为是依靠值-值下标来确定的；由于中间是按照中序遍历根节点的位置，确定左右子树的数量，进而根据前序遍历确定左右子树根节点，进而递归","link":"/2023/12/11/LeetCode105-%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"title":"LeetCode1071_字符串的最大公因子","text":"LeetCode1071_字符串的最大公因子 枚举 答案是某个字符串的前缀，因此可以枚举所有的前缀来判断 设前缀长度为lenzlenzlenz，str1str1str1的长度为len1len1len1，str2str2str2的长度为len2len2len2，则前缀串的长度需要是两个字符串长度的约数才能满足条件。 即len1mod lenz==0len1 \\mod lenz ==0len1modlenz==0，len2mod lenz==0len2 \\mod lenz ==0len2modlenz==0 所以可以从大到小枚举字符串前缀，代码如下。先判断满足是约数，再判断是否是重复前缀 123456789101112131415161718192021class Solution { bool check(string t,string s){ int lenx = (int)s.length() / (int)t.length(); string ans = &quot;&quot;; for (int i = 1; i &lt;= lenx; ++i){ ans = ans + t; } return ans == s; }public: string gcdOfStrings(string str1, string str2) { int len1 = (int)str1.length(), len2 = (int)str2.length(); for (int i = min(len1, len2); i &gt;= 1; --i){ // 从长度大的开始枚举 if (len1 % i == 0 &amp;&amp; len2 % i == 0){ string X = str1.substr(0, i); if (check(X, str1) &amp;&amp; check(X, str2)) return X; } } return &quot;&quot;; }}; 优化 下面则是需要进行数学公式推导了，如果存在一个符合要求的字符串X，那么一定存在一个符合要求的字符串X'，长度是str1和str2的最大公约数 因为XXX经过len1lenz\\frac{len1}{lenz}lenzlen1​次拼接后得到了str1，XXX又能经过gcd(len1,len2)lenz\\frac{gcd(len1,len2)}{lenz}lenzgcd(len1,len2)​次拼接后得到长度为gcd(len1,len2)gcd(len1,len2)gcd(len1,len2)的前缀串X′X'X′，所以可以替换，最终str1会被替换成len1gcd(len1,len2)\\frac{len1}{gcd(len1,len2)}gcd(len1,len2)len1​个X′X'X′，str2同理 所以只需要判断长度为gcd(len1,len2)gcd(len1,len2)gcd(len1,len2)的前缀串是否满足要求即可 代码如下，先求出最大公约数的长度，然后检测最小前缀子串能不能构成最大公约数子串 1234567891011121314151617class Solution { bool check(string t,string s){ int lenx = (int)s.length() / (int)t.length(); string ans = &quot;&quot;; for (int i = 1; i &lt;= lenx; ++i){ ans = ans + t; } return ans == s; }public: string gcdOfStrings(string str1, string str2) { int len1 = (int)str1.length(), len2 = (int)str2.length(); string T = str1.substr(0, __gcd(len1,len2)); // __gcd() 为c++自带的求最大公约数的函数 if (check(T, str1) &amp;&amp; check(T, str2)) return T; return &quot;&quot;; }}; 数学 结论：如果str1和str2拼接后等于str2和str1拼接起来的字符串，那么一定存在符合条件的字符串X 下面省略证明","link":"/2024/03/08/LeetCode1071-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%9C%80%E5%A4%A7%E5%85%AC%E5%9B%A0%E5%AD%90/"},{"title":"LeetCode124_二叉树中的最大路径和","text":"LeetCode124_二叉树中的最大路径和 对于一个节点，最大路径 = left + right + 自己本身val left 和 right代表最大贡献值；则一个节点的最大贡献值 = max(left, right) + 自己本身val 所以从下到上求出每个节点的最大贡献值；从而求出每个节点最大路径；从而更新全局最大路径 下面是求最大贡献值的图解：","link":"/2024/01/16/LeetCode124-%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E8%B7%AF%E5%BE%84%E5%92%8C/"},{"title":"LeetCode127_单词接龙","text":"LeetCode127_单词接龙 思路理解 因为是求最短序列的长度 -&gt; 广度优先搜索 -&gt; 图 把每个单词都抽象成一个点；如果两个单词只需要改变一个字母即可转换，则有双向边 代码实现 queue记录广度优先搜索到的点 queue&lt;string&gt; map记录起点到该点的路径长度 map&lt;string, int&gt; 对于每个出来的点，例如Hot字符串 双重遍历（遍历每个字符+每个字符遍历a-z） 查找字典列表中是否存在且未被访问过 未被访问过则加入队列中 正好等于终点则返回结果","link":"/2024/01/17/LeetCode127-%E5%8D%95%E8%AF%8D%E6%8E%A5%E9%BE%99/"},{"title":"LeetCode1372_二叉树中的最长交错路径","text":"LeetCode1372_二叉树中的最长交错路径 动态规划 记f(u)f(u)f(u)为从根到节点uuu的路径上以uuu结尾并且uuu是它父亲的左儿子的最长交错路径；g(u)g(u)g(u)为从根到节点uuu的路径上以uuu结尾并且uuu是它父亲的右儿子的最长交错路径；记uuu的父节点为father(u)father(u)father(u)，可以这样推得转移方程： f[u]=g[father(u)]+1u是左儿子g[u]=f[father(u)]+1u是右儿子f[u]=g[father(u)]+1 \\quad u是左儿子 \\\\ g[u]=f[father(u)]+1 \\quad u是右儿子f[u]=g[father(u)]+1u是左儿子g[u]=f[father(u)]+1u是右儿子 实现的时候需要维护两个数组fff和ggg。可以用BFS或者DFS，用(node, parent)作为状态，node表示当前待计算f和g的值的节点，parent表示它的父亲；根据当前的点是左子树还是右子树更新f和g，然后再拓展新状态入队 然后可以遍历f和g取最大值 深度优先搜索 在DP中对于每个节点uuu只使用到了父亲节点信息，所以可以在DFS的时候作为参数传递下来；关于f和g只需要传递【当前】这个点应该走的方向dir，以及这个点结尾的最长交错路径的长度len 如果dir是左且可以向左，则让它向左走一步，且len+1；如果向左但没有左子树，则向右，len值重置为1；向右同理 123456789101112131415161718192021222324class Solution {public: int maxAns; /* 0 =&gt; left, 1 =&gt; right */ void dfs(TreeNode* o, bool dir, int len) { maxAns = max(maxAns, len); if (!dir) { if (o-&gt;left) dfs(o-&gt;left, 1, len + 1); if (o-&gt;right) dfs(o-&gt;right, 0, 1); } else { if (o-&gt;right) dfs(o-&gt;right, 0, len + 1); if (o-&gt;left) dfs(o-&gt;left, 1, 1); } } int longestZigZag(TreeNode* root) { if (!root) return 0; maxAns = 0; dfs(root, 0, 0); dfs(root, 1, 0); return maxAns; }};","link":"/2024/03/08/LeetCode1372-%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E7%9A%84%E6%9C%80%E9%95%BF%E4%BA%A4%E9%94%99%E8%B7%AF%E5%BE%84/"},{"title":"LeetCode142_环形链表II","text":"LeetCode142_环形链表II 怎么看是否有环：采用快慢指针，总会相遇 怎么看环形入口：采用数学公式计算 在相遇点时，slow指针走过x+yx+yx+y；fast指针走过x+y+n(y+z)x+y+n(y+z)x+y+n(y+z) fast指针是slow指针走的两倍：(x+y)∗2=x+y+n(y+z)(x + y) * 2 = x + y + n (y + z)(x+y)∗2=x+y+n(y+z)，得到x=(n−1)(y+z)+zx = (n - 1) (y + z) + zx=(n−1)(y+z)+z 当n=1n=1n=1时，即fast指针在环内走了一圈后遇到了slow指针；即fast指针在相遇点出发和slow指针在起点出发，都走一步，能在入口点相遇；nnn为其他也是一样，只不过fast多走了几圈","link":"/2023/10/31/LeetCode142-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II/"},{"title":"LeetCode1466_重新规划路线","text":"LeetCode1466_重新规划路线 如果忽略边的方向，将每条有向边以及其反向边加入到图中，那么从任意一点出发都能到达000号点，路径上可能会经过反向边，则需要变更与之对应的原边的方向，需要变更的次数即为答案 考虑从000出发去遍历其他点，原来需要统计反向边的数量，现在需要统计原方向边的数量 用111标记原方向的边，用000标记反向边，然后从000号点开始遍历，访问到某个新的点时，所经过的边被111标记，则令答案加111，统计得到的答案就是需要变更方向的最小路线数 这道题的难点还有怎么用代码构建树 12345678910111213141516171819202122class Solution {public: int dfs(int x, int parent, vector&lt;vector&lt;pair&lt;int, int&gt;&gt;&gt;&amp; e) { int res = 0; for (auto &amp;edge : e[x]) { if (edge.first == parent) { continue; } res += edge.second + dfs(edge.first, x, e); } return res; } int minReorder(int n, vector&lt;vector&lt;int&gt;&gt;&amp; connections) { vector&lt;vector&lt;pair&lt;int, int&gt;&gt;&gt; e(n); for (auto edge : connections) { e[edge[0]].push_back(make_pair(edge[1], 1)); e[edge[1]].push_back(make_pair(edge[0], 0)); } return dfs(0, -1, e); }};","link":"/2024/03/08/LeetCode1466-%E9%87%8D%E6%96%B0%E8%A7%84%E5%88%92%E8%B7%AF%E7%BA%BF/"},{"title":"LeetCode148_排序链表","text":"LeetCode148_排序链表 思路部分 可以自顶向下，也可以自底向上，都是采用归并排序，下面介绍自顶向下的 分割环节： 找到链表的中点，以中点为分界，将链表拆分成两个子链表（可以用快慢指针） 递归两个分链表；递归终止条件-只有一个节点了（next=None） 合并环节： 将两个排序链表进行合并（可用双指针） 返回排序好的链表头结点 代码部分 分割：ListNode* sortList(ListNode* head, ListNode* tail) 合并：ListNode* merge(ListNode* head1, ListNode* head2)","link":"/2024/03/08/LeetCode148-%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/"},{"title":"LeetCode1493_删掉一个元素以后全为1的最长子数组","text":"LeetCode1493_删掉一个元素以后全为1的最长子数组 可以枚举被删除的位置，假设下标为iii，希望知道【以第i−1i-1i−1位结尾的最长连续全111子数组】和【以第i+1i+1i+1位开头的最长连续全111子数组】的长度分别是多少，相加即可 可以分别记为pre(i)pre(i)pre(i)为【以第iii位结尾的最长连续全111子数组】和suf(i)suf(i)suf(i)为【以第iii位结尾的最长连续全111子数组】；正向遍历+反向遍历即可 然后从头遍历0−n0-n0−n，得到pre(i)+suf(i)pre(i)+suf(i)pre(i)+suf(i)的最大值","link":"/2024/03/08/LeetCode1493-%E5%88%A0%E6%8E%89%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0%E4%BB%A5%E5%90%8E%E5%85%A8%E4%B8%BA1%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E6%95%B0%E7%BB%84/"},{"title":"Hexo学习","text":"下面主要是记录一下用Github+Hexo搭建踩的坑 &amp;&amp; 开始搭建常用的命令 常用命令 Hexo指令 1234567hexo clean #删除public文件的内容hexo g #生成静态文件到publichexo d #发布静态文件hexo s #本地运行hexo new post {{文章标题}} #创建新的文章hexo new page #sourcehexo new draft #source/_drafts 写作指令 tags用法： [标签1, 标签2] categories用法：[分类1,分类2] 其他解决 Operation timed out Mac 这个是因为代理的问题，采用终端需要配置代理 12curl cip.cc #查看当前IP地址vi ~/.zshrc #编辑配置,Mac电脑 在配置中添加如下内容，这里的端口号需要自行查看自己的网络设置中的端口号 12alias proxy='export http_proxy=127.0.0.1:7897;export https_proxy=$http_proxy'alias proxyOff='unset http_proxy;unset https_proxy' 让配置生效 1source ~/.zshrc 代理模式的开启和关闭 12proxy #开启代理模式unproxy #关闭代理模式 Windows 设置代理，这里的端口号需要自行查看自己的网络设置中的端口号 12set http_proxy=http://127.0.0.1:7890set https_proxy=http://127.0.0.1:7890 还原代理 12set http_proxy=set https_proxy= Permission denied 这里是需要把repo的格式改一下 1https://自己的token@github.com/用户名/用户名.github.io.git 插入图片问题 我采用的本地编辑器是typora，首先设置图片路径为如下： 在_config.yml配置文件把false改成true。 1post_asset_folder: true 安装插件 1npm install https://github.com/CodeFalling/hexo-asset-image --save 踩的坑：不要在文档上方加typora-root-url:../，解析出来反而不太对 正确的解析路径应该如下：/2023/09/01/Flowable/image-20230902125239150.png 之前解析路径如下：/2023/09/01/Flowable/Flowable/image-20230902125239150.png Update插入图片问题 由于最近入坑了Obsidian，感觉很多文件夹比较繁杂，所以采用统一assets管理图片附件，放在source/Assets下。但是如果在Obsidian采用相对路径/Assets，在主页显示不了，因为它的图片读取路径和本地不一样；但如果将路径改为/Assets则可以读取，这是因为它把source看作根路径了 同时在Obsidian中，也需要将图片的粘贴路径做如下更改： 所以写了一个js文件，在hexo s生成public文件前，把所有/Assets改为/Assets即可，生成后再复原，这样在本地和网页都能显示。js文件如下： 1234567891011121314151617181920212223242526272829303132333435363738const fs = require('fs'); const path = require('path'); const glob = require('glob'); const directoryPaths = [ 'source/_posts']; const extension = '**/*.md'; directoryPaths.forEach(directoryPath =&gt; { glob(path.join(directoryPath, extension), (err, files) =&gt; { if (err) { console.error(`Error reading ${directoryPath}:`, err); return; } files.forEach(file =&gt; { fs.readFile(file, 'utf8', (err, data) =&gt; { if (err) { console.error(`Error reading file ${file}:`, err); return; } // const newData = data.replace(/\\/Assets/g, '/Assets'); const newData = data.replace(/\\.\\.\\/Assets/g, '\\/Assets'); fs.writeFile(file, newData, 'utf8', err =&gt; { if (err) { console.error(`Error writing to file ${file}:`, err); return; } console.log(`File ${file} updated successfully.`); }); }); }); }); }); Latex数学公式显示问题 在官网找到对应的设置修改即可 在主题配置中修改： 12345post: math: enable: true specific: false engine: katex 123npm uninstall hexo-renderer-marked --savenpm install hexo-renderer-markdown-it --savenpm install @traptitech/markdown-it-katex --save 在站点配置中修改： 123markdown: plugins: - &quot;@traptitech/markdown-it-katex&quot; 文章引用 12{% post_path filename %}{% post_link filename [title] [escape] %} 默认链接文字是文章的标题，也可以自定义要显示的文本 可以使用 escape 选项，禁止对特殊字符进行转义 添加更新时间 在模版中添加updated: 添加下面js文件，然后运行，即可更新 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273#!/usr/bin/env nodeconsole.log('脚本开始运行..');var fs = require(&quot;fs&quot;); var file = &quot;./txt&quot;; var RegExp=/(updated:\\s*)((\\d{2}(([02468][048])|([13579][26]))[\\-\\/\\s]?((((0?[13578])|(1[02]))[\\-\\/\\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\\-\\/\\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\\-\\/\\s]?((0?[1-9])|([1-2][0-9])))))|(\\d{2}(([02468][1235679])|([13579][01345789]))[\\-\\/\\s]?((((0?[13578])|(1[02]))[\\-\\/\\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\\-\\/\\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\\-\\/\\s]?((0?[1-9])|(1[0-9])|(2[0-8]))))))(\\s((([0-1][0-9])|(2?[0-3]))\\:([0-5]?[0-9])((\\s)|(\\:([0-5]?[0-9])))))/g;let toppath=&quot;source/_posts/&quot;;function fn(path){ fs.readdir(path,(err,files)=&gt;{ files.forEach(function(item){ fs.stat(path+item+'/',(err,data)=&gt;{ if(data.isFile()){ if(item.indexOf(&quot;.md&quot;)&gt;-1){ writeFileTime(path+item,fs); } }else{ fn(path+item+'/') } }) }) })}fn(toppath)function writeFileTime(file,fs){ fs.readFile(file, 'utf8',function(err, data) { if (err) return console.log(&quot;读取文件内容错误：&quot;,err); if(RegExp.test(data)){ fs.stat(file,function(err, stats) { if (err) return console.log(&quot;读取文件信息错误：&quot;,err); var updateds=data.match(RegExp); //console.log(&quot;updated数组:&quot;,updateds); if(updateds.length&gt;1) console.log(&quot;文件&quot;+file+&quot;匹配到多处update字段&quot;); var updated=updateds[0].replace(&quot;updated: &quot;,&quot;&quot;).replace(/-/g,&quot;/&quot;); //时间格式化为2018/01/29 21:33:30 //console.log(&quot;updated:&quot;,updated); if(new Date(stats.mtime).getTime()-new Date(Date.parse(updated))&gt;1000*60*5){ // 只要修改时间和文章内updated时间差大于1000毫秒*60*5=5分钟就触发更新 var result= data.replace(RegExp,&quot;updated: &quot;+getFormatDate(stats.mtime)); //替换更新时间 fs.writeFile(file, result, 'utf8',function(err) { //写入新的文件内容 if (err) return console.log(&quot;写文件错误：&quot;,err); fs.utimes(file,new Date(stats.atime),new Date(stats.mtime),function(err){ //还原访问时间和修改时间 if (err) return console.log(&quot;修改时间失败：&quot;,err); console.log(file,&quot;成功更新时间&quot;); }); }); } }); } });}/* timeStr:时间，格式可为：&quot;September 16,2016 14:15:05、 &quot;September 16,2016&quot;、&quot;2016/09/16 14:15:05&quot;、&quot;2016/09/16&quot;、 '2014-04-23T18:55:49'和毫秒 dateSeparator：年、月、日之间的分隔符，默认为&quot;-&quot;， timeSeparator：时、分、秒之间的分隔符，默认为&quot;:&quot; */function getFormatDate(timeStr, dateSeparator, timeSeparator) { dateSeparator = dateSeparator ? dateSeparator : &quot;-&quot;; timeSeparator = timeSeparator ? timeSeparator : &quot;:&quot;; var date = new Date(timeStr), year = date.getFullYear(),// 获取完整的年份(4位,1970) month = date.getMonth(),// 获取月份(0-11,0代表1月,用的时候记得加上1) day = date.getDate(),// 获取日(1-31) hour = date.getHours(),// 获取小时数(0-23) minute = date.getMinutes(),// 获取分钟数(0-59) seconds = date.getSeconds(),// 获取秒数(0-59) Y = year + dateSeparator, M = ((month + 1) &gt; 9 ? (month + 1) : ('0' + (month + 1))) + dateSeparator, D = (day &gt; 9 ? day : ('0' + day)) + ' ', h = (hour &gt; 9 ? hour : ('0' + hour)) + timeSeparator, m = (minute &gt; 9 ? minute : ('0' + minute)) + timeSeparator, s = (seconds &gt; 9 ? seconds : ('0' + seconds)), formatDate = Y + M + D + h + m + s; return formatDate;} 添加更新时间 &amp; 更改路径命令 为了方便，直接添加了一个命令来运行，在package中添加 即可通过npm run my-deploy来执行多个命令 hexo d报错 github的问题：fatal: detected dubious ownership in repository 可以用git config --global --add safe.directory &quot; * &quot;语句","link":"/2023/08/21/Hexo%E5%AD%A6%E4%B9%A0/"},{"title":"LeetCode15_三数之和","text":"LeetCode15_三数之和 这题是用排序+双指针 双指针思路大概如下： 固定一个指针 i 左指针 j 为 i+1 右指针 k 为 数组结尾 nums[i] + nums[j] + nums[k]，逐步移动 j 和 k 即可 但是题目要求不能去重，所以应该有 nums[i] != nums[i - 1]；以及 j 和 k 指针所指向的也不能重复，所以有 nums[i] != nums[i - 1] nums[right] != nums[right - 1] nums[left] != nums[left + 1]","link":"/2023/11/26/LeetCode15-%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"},{"title":"LeetCode188_买卖股票的最佳时机IV","text":"LeetCode188_买卖股票的最佳时机IV 这道题看了一个状态机DP的题解 不限交易次数 122. 买卖股票的最佳时机 II 关键是：第i天，持有/ 未持有股票的最大利润 子问题：第i-1天，持有/ 未持有股票的最大利润 定义dfs(i,0)表示第i天结束时，未持有股票的最大利润 定义dfs(i,1)表示第i天结束时，持有股票的最大利润 ![[/Assets/adf3b8dd1ad85968a2fd7110ec7ff099_MD5.png]] 递归式子 dfs(i,0)=max(dfs(i−1,0),dfs(i−1,1)+prices[i])dfs(i,1)=max(dfs(i−1,1),dfs(i−1,0)−prices[i])dfs(i,0)=max(dfs(i-1,0),dfs(i-1,1)+prices[i]) \\\\ dfs(i,1)=max(dfs(i-1,1),dfs(i-1,0)-prices[i])dfs(i,0)=max(dfs(i−1,0),dfs(i−1,1)+prices[i])dfs(i,1)=max(dfs(i−1,1),dfs(i−1,0)−prices[i]) 递归边界 第000天开始未持有股票，利润为000 dfs(−1,0)=0dfs(-1,0)=0dfs(−1,0)=0 第000天开始不可能持有股票 dfs(−1,1)=−∞dfs(-1,1)=-\\inftydfs(−1,1)=−∞ 递归入口 dfs(n−1,0)dfs(n-1, 0)dfs(n−1,0)：因为持有股票&lt;&lt;&lt;不持有股票 递推可以由递归得到 f[i][0]和f[i][1] 309. 买卖股票的最佳时机含冷冻期 因为买入的时候不能从前一天获得，所以直接改成i-2即可 ![[/Assets/31149733ba10e074964e1cf950142ca6_MD5.png]] 限制交易次数 【至多/ 正好/ 至少】交易k次 多了一个j来记录交易次数 至多 123. 买卖股票的最佳时机 III ![[/Assets/71e2035fd712ac2ed031c7e3626b3213_MD5.png]] 递归式子 dfs(i,j,0)=max(dfs(i−1,j,0),dfs(i−1,j,1)+prices[i])dfs(i,j,1)=max(dfs(i−1,j,1),dfs(i−1,j−1,0)−prices[i])dfs(i,j,0)=max(dfs(i-1,j,0),dfs(i-1,j,1)+prices[i]) \\\\ dfs(i,j,1)=max(dfs(i-1,j,1),dfs(i-1,j-1,0)-prices[i])dfs(i,j,0)=max(dfs(i−1,j,0),dfs(i−1,j,1)+prices[i])dfs(i,j,1)=max(dfs(i−1,j,1),dfs(i−1,j−1,0)−prices[i]) 递归边界 任何情况下，jjj都不能为负 dfs(.,−1,.)=−∞dfs(.,-1,.)=- \\inftydfs(.,−1,.)=−∞ 第000天开始未持有股票，利润为000 dfs(−1,j,0)=0dfs(-1,j,0)=0dfs(−1,j,0)=0 第000天开始不可能持有股票 dfs(−1,j,1)=−∞dfs(-1,j,1)=-\\inftydfs(−1,j,1)=−∞ 递归入口 dfs(n−1,k,0)dfs(n-1,k,0)dfs(n−1,k,0)：因为持有股票&lt;&lt;&lt;不持有股票 :::info 递推可以由递归得到 f[i][j][0]和f[i][j][1] ::: 恰好 f[0][1][0]=0f[0][1][0]=0f[0][1][0]=0，其余=−∞= - \\infty=−∞；只有f[0][1]f[0][1]f[0][1]才是恰好完成000次的状态 至少 f[i][−1][.]f[i][-1][.]f[i][−1][.]等价于f[i][0][.]f[i][0][.]f[i][0][.]，所以每个f[i]f[i]f[i]最前面不需要插入状态 至少000次 = 可以无限次交易，所以f[i][0][.]f[i][0][.]f[i][0][.]就是无限次交易下的最大利润，如下 f[0][0][0]=0f[0][0][0]=0f[0][0][0]=0，其余=−∞=-\\infty=−∞ f[i+1][0][0]=max(f[i][0][0],f[i][0][1]+prices[i])f[i+1][0][0]=max(f[i][0][0],f[i][0][1]+prices[i])f[i+1][0][0]=max(f[i][0][0],f[i][0][1]+prices[i]) f[i+1][0][1]=max(f[i][0][1],f[i][0][0]−prices[i])f[i+1][0][1]=max(f[i][0][1],f[i][0][0]-prices[i])f[i+1][0][1]=max(f[i][0][1],f[i][0][0]−prices[i])","link":"/2024/01/19/LeetCode188-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAIV/"},{"title":"LeetCode201_数字范围按位与","text":"LeetCode201_数字范围按位与 发现规律：对所有数字执行按位与运算的结果是所有对应二进制字符串的公共前缀再用零补上后面的剩余位；其实所有数字的公共前缀 = 起始末尾两个数的公共前缀 下面求 9 和 12 的公共前缀即可 因此，题目可以转换为：给定两个整数，找到它们对应的二进制字符串的公共前缀 位移 右移，将两个数字压缩为它们的公共前缀；在迭代过程中，我们计算执行的右移操作数 将得到的公共前缀左移相同的操作数得到结果 Brian Kernighan 算法 技巧：n&amp;(n−1)n\\&amp;(n-1)n&amp;(n−1)会消去nnn最后一位的111 对于[m,n][m,n][m,n]，可以对nnn逐步使用该技巧，直到其&lt;=m&lt;=m&lt;=m；这时非公共前缀的111被消去，直接返回nnn即可","link":"/2024/03/08/LeetCode201-%E6%95%B0%E5%AD%97%E8%8C%83%E5%9B%B4%E6%8C%89%E4%BD%8D%E4%B8%8E/"},{"title":"LeetCode149_直线上最多的点数","text":"LeetCode149_直线上最多的点数 思路 怎么记录斜率：slope=ΔyΔxslope = \\frac{\\Delta y}{\\Delta x}slope=ΔxΔy​，如果i,ji, ji,j之间的slopeslopeslope = j,kj, kj,k之间的slopeslopeslope，则这3个点在一条线 最简化斜率，如24=12\\frac{2}{4} = \\frac{1}{2}42​=21​，除去最大公约数即可，即mx=Δxgcd(∣Δx∣,∣Δy∣)mx=\\frac{\\Delta x}{gcd(|\\Delta x|, |\\Delta y|)}mx=gcd(∣Δx∣,∣Δy∣)Δx​, my=Δygcd(∣Δx∣,∣Δy∣)my=\\frac{\\Delta y}{gcd(|\\Delta x|, |\\Delta y|)}my=gcd(∣Δx∣,∣Δy∣)Δy​ 可能出现负数，如−12=1−2\\frac{-1}{2} = \\frac{1}{-2}2−1​=−21​，则规定分子mymymy为非负整数 mx,mymx, mymx,my可能出现0，则mx=0,my=1mx=0, my=1mx=0,my=1,my=0,mx=1my=0, mx=1my=0,mx=1 最终得到二元组(mx,my)(mx, my)(mx,my)，x,yx,yx,y取值[−104,104][-10^4, 10^4][−104,104]，所以mxmxmx取值[−2∗104,2∗104][-2*10^4, 2*10^4][−2∗104,2∗104]，mymymy取值[0,2∗104][0, 2*10^4][0,2∗104] 即用val=my+(2∗104+1)∗mxval = my + (2*10^4+1)*mxval=my+(2∗104+1)∗mx可以表示一个斜率；因为浮点数类型可能精度不够 优化 点总数量&lt;=2&lt;=2&lt;=2时，可用一条线串起全部，直接返回点数量 当枚举到iii时，只需考虑编号&gt;i&gt;i&gt;i的点，因为&lt;i&lt;i&lt;i的已经枚举过了 找到一条直线连起了超过半数的点时，即可认为该直线是经过点最多的直线 枚举到iii，最多只能找到n−in-in−i个点共线的，则如果最大k&gt;=n−ik&gt;=n-ik&gt;=n−i，可以直接返回kkk了 代码 iii枚举循环所有点，jjj枚举循环iii之后的点，然后对于每一个(i,j)(i, j)(i,j)计算valvalval存到mapmapmap中 得到每个iii的mapmapmap中值最大的斜率（也就是经过最多点的线）","link":"/2024/01/19/LeetCode149-%E7%9B%B4%E7%BA%BF%E4%B8%8A%E6%9C%80%E5%A4%9A%E7%9A%84%E7%82%B9%E6%95%B0/"},{"title":"LeetCode153_寻找旋转排序数组中的最小值","text":"LeetCode153_寻找旋转排序数组中的最小值 思路 假设数组最后一个值是x，那么最小值左边的都是&gt;x的，右边的都是&lt;x的 那么左中右三个指针相比较有下面几种情况： 左值 &lt; 中值, 中值 &gt; 右值 ：有旋转，最小值在右半边，可以收缩左边界 左值 &lt; 中值, 中值 &lt; 右值 ：没有旋转，最小值在最左边，可以收缩右边界 左值 &gt; 中值, 中值 &lt; 右值 ：有旋转，最小值在左半边，可以收缩右边界 情况2、3是一类，情况1是另一类 如果中值 &lt; 右值，则最小值在左半边，可以收缩右边界。 如果中值 &gt; 右值，则最小值在右半边，可以收缩左边界。 代码 12345678910111213141516class Solution {public: int findMin(vector&lt;int&gt;&amp; nums) { int left = 0; int right = nums.size() - 1; while (left &lt; right) { int mid = left + (right - left) / 2; if (nums[mid] &gt; nums[right]) { // 因为 中值&gt;右值，所以中值肯定不是最小值 left = mid + 1; } else { // 因为 中值&lt;右值，所以中值有可能是最小值 right = mid; } } return nums[left]; }}; 是用二分查找，只不过是 中间值 和 右边界 在比较；下面是代码分析 是左闭右闭 中间位置mid更靠近left 如果左右数组重合，即left=right，即只有一个数 如果仅剩两个数 理解 为什么左右不对称？ 这是循环前升序排列的数，左边的数小，右边的数大，而且我们要找的是最小值，肯定是偏向左找，所以左右不对称了。 为什么比较mid与right而不比较mid与left？ 单讲就是因为我们找最小值，要偏向左找，目标值右边的情况会比较简单，容易区分，所以比较mid与right而不比较mid与left。 那么能不能通过比较mid与left来解决问题? 转换思路，不直接找最小值，而是先找最大值，最大值偏右，可以通过比较mid与left来找到最大值，最大值向右移动一位就是最小值了（需要考虑最大值在最右边的情况，右移一位后对数组长度取余）。 这题和154题：找到上下界可以用相同思路来理解判断","link":"/2024/03/08/LeetCode153-%E5%AF%BB%E6%89%BE%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC/"},{"title":"LeetCode2071_你可以安排的最多任务数目","text":"如果完成了xxx个任务，最佳方案是力量最大的xxx个worker完成了要求力量最小的xxx个任务 按力量从小到大依次考虑每个worker WJW_JWJ​，可以选择的任务是要求力量值不超过WJ+strengthW_J+strengthWJ​+strength且尚未完成的任务之一 如果当前可选任务中要求力量值最小的一个小于等于WjW_jWj​，则这个worker不用吃药就可以完成任务 如果没有可以直接完成的，则有药情况下选要求力量值最大的任务比较划算，没药则直接失败 如果吃药也没能完成，则直接失败 任务按照从小到大的顺序添加到可选任务范围中；移除时要么最小要么最大 --&gt; 双端单调队列","link":"/2024/08/05/LeetCode2071_%E4%BD%A0%E5%8F%AF%E4%BB%A5%E5%AE%89%E6%8E%92%E7%9A%84%E6%9C%80%E5%A4%9A%E4%BB%BB%E5%8A%A1%E6%95%B0%E7%9B%AE/"},{"title":"LeetCode236_二叉树的最近公共祖先","text":"LeetCode236_二叉树的最近公共祖先 思路 若rootrootroot是p,qp,qp,q的 最近公共祖先 ，则只可能为以下情况之一： ppp和 qqq在 rootrootroot的子树中，且分列 rootrootroot的 异侧（即分别在左、右子树中）； p=rootp=rootp=root ，且 qqq在 rootrootroot的左或右子树中； q=rootq=rootq=root，且 ppp在 rootrootroot的左或右子树中； 可以这样定义递归函数功能： p,qp,qp,q都能找到 返回最近公共祖先 p,qp,qp,q找到一个，返回p,qp,qp,q 都没找到，返回nullnullnull 参数：rootrootroot代表当前遍历到的结点； 终止条件： 当越过叶节点，则直接返回nullnullnull 当root=q∣∣proot = q || proot=q∣∣p，则直接返回rootrootroot 递推工作： 递归左结点：返回值记做leftleftleft 递归右结点：返回值记做rightrightright 返回值：当前rootrootroot的子树中有没有q∣∣pq || pq∣∣p leftleftleft和rightrightright同时为空：说明左右子树都不包含p,qp,qp,q，返回nullnullnull leftleftleft和rightrightright同时不为空：说明p,qp,qp,q在rootrootroot异侧，rootrootroot则是最近公共祖先，返回rootrootroot leftleftleft为空，rightrightright不为空：说明p,qp,qp,q都不在左子树中，直接返回rightrightright p,qp,qp,q其中一个在rootrootroot的右子树中，则rightrightright就是p∣∣qp||qp∣∣q p,qp,qp,q两个节点都在右子树中，则rightrightright是公共祖先 PS：上面这有点难理解，但是如果看图解是可以总结出来的 rightrightright为空，leftleftleft不为空：和3同理 图解 代码 123456789101112class Solution {public: TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) { if(root == nullptr || root == p || root == q) return root; TreeNode *left = lowestCommonAncestor(root-&gt;left, p, q); TreeNode *right = lowestCommonAncestor(root-&gt;right, p, q); if(left == nullptr &amp;&amp; right == nullptr) return nullptr; // 1. if(left == nullptr) return right; // 3. if(right == nullptr) return left; // 4. return root; // 2. if(left != null and right != null) }};","link":"/2024/03/08/LeetCode236-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/"},{"title":"LeetCode212_单词搜索II","text":"LeetCode212_单词搜索II 这道题是回溯 + 字典树的结合 思路 将words中所有单词都放到前缀树中 遍历二维网格中所有单元格 深度优先搜索从当前单元格出发的路径；每经过一个单元格，就将其临时修改为# 如果是words中的单词，就添加到结果集中；如果是words中任意一个单词的前缀，则继续搜索；反之，则剪枝 代码 因为一个单词可能在多个路径中出现，所以需要使用哈希集对结果集进行去重 回溯过程中，不需要对每一个路径都判断是不是前缀，可以保留上一个前缀结点","link":"/2024/03/08/LeetCode212-%E5%8D%95%E8%AF%8D%E6%90%9C%E7%B4%A2II/"},{"title":"LeetCode240_搜索二维矩阵II","text":"LeetCode240_搜索二维矩阵II 这道题是从上到下，从左到右数值增加，如果把数组旋转的话，可以看成是二叉搜索树，如下图所示，以7（右上角）或者3（左下角）作为根节点来进行搜索都是可以的： 如果以3作为根节点来进行搜索的话，有以下步骤： target值比当前大，则向左，行数减小 target值比当前小，则向右，列数增加 target值等于当前，则找到，返回true 如果行数 or 列数超过限制，则返回false","link":"/2023/11/29/LeetCode240-%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5II/"},{"title":"LeetCode30_串联所有单词的子串","text":"LeetCode30_串联所有单词的子串 这道题有两重循环； 第一重循环是起始划分单词位置 i循环 第二重循环是确定i后，滑动窗口遍历的start循环 下图是一个例子： 对于i的循环，注意根据words中每个单词的长度n判断 和 是否超过边界的判断 对于start的循环，可以采用hash的方式","link":"/2024/01/08/LeetCode30-%E4%B8%B2%E8%81%94%E6%89%80%E6%9C%89%E5%8D%95%E8%AF%8D%E7%9A%84%E5%AD%90%E4%B8%B2/"},{"title":"LeetCode31_下一个排列","text":"如何得到 希望下一个数比当前数大，将后面的【大数】和前面的【小数】交换得到更大的数，比如 123456 ，将 5 和 6 交换能得到一个更大的数 123465 希望下一个数增加的幅度尽可能小，这样才满足与当前排列紧邻 在尽可能靠右的低位进行交换 -&gt; 需要从后往前查找 将一个尽可能小的【大数】与前面的【小数】交换 将【大数】换到前面后，要将【大数】后面的所有数重置为升序 例子，比如 123465 ，交换 5 和 4 ，得到 123564 ；然后将 5 之后的数重置为升序，得到 123546 算法过程 从后向前查找第一个相邻升序元素对 (i,j) ，满足 A[i] &lt; A[j]，这时 [j,end]必然是降序 在 [j,end] 从后向前查找第一个满足 A[i] &lt; A[k]的 k，A[i]、A[k]分别是【小数】、【大数】 将 A[i] 与 A[k] 交换 这时 [j,end] 必然是降序，逆置 [j,end]，使其升序 如果在步骤1找不到符合的相邻元素对，说明当前 [begin,end] 为一个将序顺序，则直接跳到步骤4","link":"/2024/08/09/LeetCode31_%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%8E%92%E5%88%97/"},{"title":"LeetCode33_搜索旋转排序数组","text":"LeetCode33_搜索旋转排序数组 思路一 先找到 「153. 寻找旋转排序数组中的最小值」的索引，由此可以将数组分为升序的两段。 根据 nums[0] 与 target 的关系判断 target 在左段还是右段，再对升序数组进行二分查找即可。 思路二 直接在有序数组中查找 将数组从中间分成左右两边的时候，总有一边是有序的，因此判断哪边是有序的 有序的判断：最左边值&lt;最右边值 根据有序的一边可以确定上下界，因此可以确定targettargettarget在哪一边，再用二分法循环","link":"/2024/03/08/LeetCode33-%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/"},{"title":"LeetCode2542_最大子序列的分数","text":"LeetCode2542_最大子序列的分数 思路 先按照nums进行降序排列，优先用最大的数字 优先队列去维持nums1的总和，尽可能取最大的 则可以保证每次取到的是当前的最大值，然后基于滑动窗口去维持k大小 代码 可以用一个vector&lt;pair&lt;int, int&gt;&gt; nums来存储num1, num2下标组 根据num2来对nums进行排序 然后遍历nums，以及有一个优先队列存储相乘的num1值；因为num2是在逐渐减少的，所以优先队列必须要放入当前值，推出最小的值","link":"/2024/03/08/LeetCode2542-%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%88%97%E7%9A%84%E5%88%86%E6%95%B0/"},{"title":"LeetCode376_摆动序列","text":"LeetCode376_摆动序列 本题可以用贪心或者动态规划，甚至动态规划看上去好做一点（线段树），但是这里用贪心做法 局部最优：删除单调坡度上的节点（不包括单调坡度两端的节点），那么这个坡度就可以有两个局部峰值。 整体最优：整个序列有最多的局部峰值，从而达到最长摆动序列。 实际上：需要求出峰值的数量即可，让峰值尽量保持峰值，删除单一坡上的结点；用代码表示即计算prediff（nums[i] - nums[i-1]） 和 curdiff（nums[i+1] - nums[i]）；如果prediff&gt;0&amp;&amp;curdiff&lt;0或者prediff&lt;0&amp;&amp;curdiff&gt;0，则需要统计 但是还需要考虑3种情况： 上下坡中有平坡，则条件应该改为(preDiff &lt;= 0 &amp;&amp; curDiff &gt; 0) || (preDiff &gt;= 0 &amp;&amp; curDiff &lt; 0) 数组首尾两端，如果序列中只有两个数，则就需要考虑数组最左边和最右边的情况了，比如下面这种，因此prediff = 0 ，curdiff &lt; 0 或者 &gt;0 也记为波谷 单调坡中有平坡，如图是prediff更新时间的问题","link":"/2023/11/14/LeetCode376-%E6%91%86%E5%8A%A8%E5%BA%8F%E5%88%97/"},{"title":"LeetCode402_移掉K位数字","text":"比如 num=1432219,k=3num=1432219, k=3num=1432219,k=3，需要返回一个长度为4的字符串，怎么才能求出这四个位置 前置知识：对于两个数 123a456123a456123a456 和 123b456123b456123b456，如果 a&gt;ba&gt;ba&gt;b ，那么数字 123a456&gt;123b456123a456&gt;123b456123a456&gt;123b456；也就是说两个相同位数的数字大小关系取决于第一个不同数的大小；所以需要前面的数尽量小 思路：保留n−kn-kn−k个元素，对于DiD_iDi​，需要从左往右找到第一个位置iii，使得Di&lt;Di−1D_{i}&lt;D_{i-1}Di​&lt;Di−1​，并删去Di−1D_{i-1}Di−1​，需要删除不超过kkk次 ![[/Assets/LeetCode402_移掉K位数字 2024-08-04 10.07.49.excalidraw|800]] 不把栈顶元素弹出的条件： 栈为空 新的栈顶不大于当前数字 已经删除了kkk位数字 额外的处理： 已经删除了mmm个数字并且m&lt;km&lt;km&lt;k，则需要从序列尾部额外删除 最终数字序列存在前导零，要删去前导零 最终数字序列为空，应该返回000","link":"/2024/08/04/LeetCode402_%E7%A7%BB%E6%8E%89K%E4%BD%8D%E6%95%B0%E5%AD%97/"},{"title":"LeetCode399_除法求值","text":"LeetCode399_除法求值 思路 题目解析 分析示例 a / b = 2.0 说明 a=2ba = 2ba=2b ， a 和 **b在同一个集合中 b / c = 3.0说明 b=3cb = 3cb=3c ，b 和 c 在同一个集合中 求ac\\frac{a}{c}ca​，可以把a=2ba=2ba=2b，b=3cb=3cb=3c依次代入，得到ac=2bc=2⋅3cc=6.0\\frac{a}{c}=\\frac{2b}{c}=\\frac{2 \\cdot 3c}{c}=6.0ca​=c2b​=c2⋅3c​=6.0 求ba\\frac{b}{a}ab​，可以根据a=2ba=2ba=2b，知道ba=0.5\\frac{b}{a}=0.5ab​=0.5，也可以把bbb和aaa都转换成ccc的倍数，得到ba=b2b=3c6c=12=0.5\\frac{b}{a}=\\frac{b}{2b}=\\frac{3c}{6c}=\\frac{1}{2}=0.5ab​=2bb​=6c3c​=21​=0.5 分析发现 根据 equation 中两个变量进行合并，在同一个集合的变量就有比值 题目中如果两个变量不在同一个集合中， 返回−1.0-1.0−1.0 如果两个变量中 至少有一个 变量没有出现在所有 equations 出现的字符集合中，也返回 −1.0-1.0−1.0 并查集 「路径压缩」 在查询一个结点 a 的根结点同时，把结点 a 到根结点的沿途所有结点的父亲结点都指向根结点 也是两个结点都指向根节点，他们的权值之比才有效；在查询的时候做路径压缩操作 「合并」 例如已知ab=3.0\\frac{a}{b}=3.0ba​=3.0，dc=4.0\\frac{d}{c}=4.0cd​=4.0，又知ad=6.0\\frac{a}{d}=6.0da​=6.0，aaa，ddd所属集合不一样，则需要进行合并操作 代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445class UnionFind {private: vector&lt;int&gt; parent; // 存放父节点 vector&lt;double&gt; weight; // 指向父节点的权值 public: UnionFind(int n) { for (int i = 0; i &lt; n; ++i) { parent.push_back(i); weight.push_back(1.0); // 权重初始化为1 } } // 路径压缩。返回根节点id int find(int x) { // 递归寻找根节点，更新该点到根的权重为该点父节点到根的权重 if (x != parent[x]) { int origin = parent[x]; parent[x] = find(parent[x]); weight[x] *= weight[origin]; } return parent[x]; } // 返回除法结果。如果两个值不存在则-1 double isConected(int x, int y) { int rootX = find(x); int rootY = find(y); // 如果两个值有共同的根也就是可以计算，则算结果。否则不在同一个并查集，-1 if (rootX == rootY) { return weight[x] / weight[y]; } else { return -1.00000; } } // 合并操作，在find步会进行路径压缩 void myunion(int x, int y, double value) { // 分别找到二者的根节点 int rootX = find(x), rootY = find(y); if (rootX == rootY) { return; // 二者已经指向同一个根节点 } // 令分子指向分母的根节点，权重为分母到根的权重*分母除分子的值/分子到根的权重。一开始都是1 parent[rootX] = rootY; weight[rootX] = weight[y] * value / weight[x]; }}; 123456789101112131415161718192021222324252627282930313233343536373839404142class Solution {public: vector&lt;double&gt; calcEquation(vector&lt;vector&lt;string&gt;&gt;&amp; equations, vector&lt;double&gt;&amp; values, vector&lt;vector&lt;string&gt;&gt;&amp; queries) { // 初始化并查集 int equationsSize = equations.size(); UnionFind unionFind(2 * equationsSize); // 第 1 步：预处理，将变量的值与 id 进行映射 map&lt;string, int&gt; hashMap; int id = 0; for (int i = 0; i &lt; equationsSize; ++i) { // 存分子，分母，值为id vector&lt;string&gt; equation = equations[i]; string var1 = equation[0]; string var2 = equation[1]; if (!hashMap.count(var1)) { hashMap[var1] = id; ++id; } if (!hashMap.count(var2)) { hashMap[var2] = id; ++id; } // 把分子分母用有向边连起来 unionFind.myunion(hashMap[var1], hashMap[var2], values[i]); } // 第 2 步：做查询 int queriesSize = queries.size(); vector&lt;double&gt; res(queriesSize, -1.00000); for (int i = 0; i &lt; queriesSize; ++i) { string var1 = queries[i][0]; string var2 = queries[i][1]; int id1, id2; // 如果两个值有至少一个不在equations中，结果为-1，否则做除法 if (hashMap.count(var1) &amp;&amp; hashMap.count(var2)) { id1 = hashMap[var1]; id2 = hashMap[var2]; res[i] = unionFind.isConected(id1, id2); } } return res; }};","link":"/2024/03/08/LeetCode399-%E9%99%A4%E6%B3%95%E6%B1%82%E5%80%BC/"},{"title":"LeetCode399_除法求值","text":"LeetCode399_除法求值 思路 题目解析 分析示例 a / b = 2.0 说明 a=2ba = 2ba=2b ， a 和 **b在同一个集合中 b / c = 3.0说明 b=3cb = 3cb=3c ，b 和 c 在同一个集合中 求ac\\frac{a}{c}ca​，可以把a=2ba=2ba=2b，b=3cb=3cb=3c依次代入，得到ac=2bc=2⋅3cc=6.0\\frac{a}{c}=\\frac{2b}{c}=\\frac{2 \\cdot 3c}{c}=6.0ca​=c2b​=c2⋅3c​=6.0 求ba\\frac{b}{a}ab​，可以根据a=2ba=2ba=2b，知道ba=0.5\\frac{b}{a}=0.5ab​=0.5，也可以把bbb和aaa都转换成ccc的倍数，得到ba=b2b=3c6c=12=0.5\\frac{b}{a}=\\frac{b}{2b}=\\frac{3c}{6c}=\\frac{1}{2}=0.5ab​=2bb​=6c3c​=21​=0.5 分析发现 根据 equation 中两个变量进行合并，在同一个集合的变量就有比值 题目中如果两个变量不在同一个集合中， 返回−1.0-1.0−1.0 如果两个变量中 至少有一个 变量没有出现在所有 equations 出现的字符集合中，也返回 −1.0-1.0−1.0 并查集 「路径压缩」 在查询一个结点 a 的根结点同时，把结点 a 到根结点的沿途所有结点的父亲结点都指向根结点 也是两个结点都指向根节点，他们的权值之比才有效；在查询的时候做路径压缩操作 「合并」 例如已知ab=3.0\\frac{a}{b}=3.0ba​=3.0，dc=4.0\\frac{d}{c}=4.0cd​=4.0，又知ad=6.0\\frac{a}{d}=6.0da​=6.0，aaa，ddd所属集合不一样，则需要进行合并操作 代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445class UnionFind {private: vector&lt;int&gt; parent; // 存放父节点 vector&lt;double&gt; weight; // 指向父节点的权值 public: UnionFind(int n) { for (int i = 0; i &lt; n; ++i) { parent.push_back(i); weight.push_back(1.0); // 权重初始化为1 } } // 路径压缩。返回根节点id int find(int x) { // 递归寻找根节点，更新该点到根的权重为该点父节点到根的权重 if (x != parent[x]) { int origin = parent[x]; parent[x] = find(parent[x]); weight[x] *= weight[origin]; } return parent[x]; } // 返回除法结果。如果两个值不存在则-1 double isConected(int x, int y) { int rootX = find(x); int rootY = find(y); // 如果两个值有共同的根也就是可以计算，则算结果。否则不在同一个并查集，-1 if (rootX == rootY) { return weight[x] / weight[y]; } else { return -1.00000; } } // 合并操作，在find步会进行路径压缩 void myunion(int x, int y, double value) { // 分别找到二者的根节点 int rootX = find(x), rootY = find(y); if (rootX == rootY) { return; // 二者已经指向同一个根节点 } // 令分子指向分母的根节点，权重为分母到根的权重*分母除分子的值/分子到根的权重。一开始都是1 parent[rootX] = rootY; weight[rootX] = weight[y] * value / weight[x]; }}; 123456789101112131415161718192021222324252627282930313233343536373839404142class Solution {public: vector&lt;double&gt; calcEquation(vector&lt;vector&lt;string&gt;&gt;&amp; equations, vector&lt;double&gt;&amp; values, vector&lt;vector&lt;string&gt;&gt;&amp; queries) { // 初始化并查集 int equationsSize = equations.size(); UnionFind unionFind(2 * equationsSize); // 第 1 步：预处理，将变量的值与 id 进行映射 map&lt;string, int&gt; hashMap; int id = 0; for (int i = 0; i &lt; equationsSize; ++i) { // 存分子，分母，值为id vector&lt;string&gt; equation = equations[i]; string var1 = equation[0]; string var2 = equation[1]; if (!hashMap.count(var1)) { hashMap[var1] = id; ++id; } if (!hashMap.count(var2)) { hashMap[var2] = id; ++id; } // 把分子分母用有向边连起来 unionFind.myunion(hashMap[var1], hashMap[var2], values[i]); } // 第 2 步：做查询 int queriesSize = queries.size(); vector&lt;double&gt; res(queriesSize, -1.00000); for (int i = 0; i &lt; queriesSize; ++i) { string var1 = queries[i][0]; string var2 = queries[i][1]; int id1, id2; // 如果两个值有至少一个不在equations中，结果为-1，否则做除法 if (hashMap.count(var1) &amp;&amp; hashMap.count(var2)) { id1 = hashMap[var1]; id2 = hashMap[var2]; res[i] = unionFind.isConected(id1, id2); } } return res; }};","link":"/2024/03/08/LeetCode399_%E9%99%A4%E6%B3%95%E6%B1%82%E5%80%BC/"},{"title":"LeetCode41_缺失的第一个正数","text":"LeetCode41_缺失的第一个正数 这道题难点在时间复杂度是O(n)，空间复杂度是O(1)，因此可以用原地Hash。 原地Hash的意思就是当前数组充当Hash数组，当前数组下标0则对应数字1，1对应2，类推，下面是题解： 因此第一遍遍历就是调整交换，尽可能将该数组所有位置上的数放在其应有的位置上 第二遍遍历就是从前往后遍历，第一个出现不是在该位置上的，九四缺失的第一个正数","link":"/2023/11/29/LeetCode41-%E7%BC%BA%E5%A4%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%AD%A3%E6%95%B0/"},{"title":"LeetCode4_寻找两个正序数组的中位数","text":"LeetCode4_寻找两个正序数组的中位数 这道题思路有点多，且方法有点多，下面理解二分的；且有时间复杂度的要求是O(logn)O(logn)O(logn) 思路 对于两个数组，采用划分的方式解决 如果是两个数组之和是偶数：sizeleft=sizerightsize_{left}=size_{right}sizeleft​=sizeright​ 如果是两个数组之和是奇数：sizeleft=sizeright+1size_{left}=size_{right}+1sizeleft​=sizeright​+1 假设两个数组长度分别是m,nm,nm,n，可以统一成sizeleft=m+n+12size_{left}=\\frac{m+n+1}{2}sizeleft​=2m+n+1​ 需要满足分割线左边所有数 &lt; 分割线右边所有数；所以左上 &lt; 右下，左下 &lt; 右上 中位数 = maxmaxmax(左边两个值) + minminmin(右边两个值) 所以只需要确定分割线的位置，这就采用二分查找 分割线右边的数太小，就将分割线在数组1中右移动 分割线左边的数太大，就将分割线在数组1中左移动 特殊情况讨论：可能会产生下标越界 两个数组长度不一样 两个数组长度一样 代码 二分查找：查找数组1中分割线的位置 123456789101112131415161718192021222324252627int m = nums1.size();int n = nums2.size();int left = 0, right = m;while (left &lt;= right) { // 前一部分包含 nums1[0 .. i-1] 和 nums2[0 .. j-1] // 后一部分包含 nums1[i .. m-1] 和 nums2[j .. n-1] int i = (left + right) / 2; int j = (m + n + 1) / 2 - i; // 注意数组越界问题 &amp; 取分割线两边的值 // nums_im1, nums_i, nums_jm1, nums_j 分别表示 nums1[i-1], nums1[i], nums2[j-1], nums2[j] int nums_im1 = (i == 0 ? INT_MIN : nums1[i - 1]); int nums_i = (i == m ? INT_MAX : nums1[i]); int nums_jm1 = (j == 0 ? INT_MIN : nums2[j - 1]); int nums_j = (j == n ? INT_MAX : nums2[j]); // 移动分割线的查找区间 if (nums_im1 &lt;= nums_j) { median1 = max(nums_im1, nums_jm1); median2 = min(nums_i, nums_j); left = i + 1; } else { right = i - 1; }}","link":"/2024/03/08/LeetCode4-%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/"},{"title":"LeetCode42_接雨水","text":"LeetCode42_接雨水 双指针优化解法 首先搞清楚是横向求还是纵向求： 如果纵向求，则只需要遍历每一列，并且第一个柱子和最后一个不接雨水： 对于每一列，min(lHeight, rHeight) - height 然而超时，所以用双指针优化，对于这一组数据，左边和右边最高高度用数组来记录：maxLeft[i] = max(height[i], maxLeft[i - 1]); maxRight[i] = max(height[i], maxRight[i + 1]); 最后只需要遍历一遍计算即可 单调栈解法 单调栈作用就是求左边 or 右边 最大 or 最小元素；单调栈则是采用的用行来计算雨水，添加元素 &gt; 栈顶元素，则代表出现凹槽，则代表要积累雨水了 这个单调栈从栈头到栈底应该是从小到大的；栈头第一个代表凹槽底部元素；第二个代表凹槽左边柱子；添加元素代表凹槽右边柱子 栈内保存柱子下标即可，因为要算宽度，高度根据数组获取即可 从左到右遍历，分成三种情况： 情况一：当前遍历的元素（柱子）高度小于栈顶元素的高度 height[i] &lt; height[st.top()]，直接入栈 情况二：当前遍历的元素（柱子）高度等于栈顶元素的高度 height[i] == height[st.top()]，需要弹出顶部再入栈（因为左边需要计算最右边的宽度） - 但是可以忽略这个情况，遍历来看是对的 情况三：当前遍历的元素（柱子）高度大于栈顶元素的高度 height[i] &gt; height[st.top()]，则需要计算积水面积了， 单调栈的思路比较难理解，但是如果遍历来看，其实是对的","link":"/2023/11/26/LeetCode42-%E6%8E%A5%E9%9B%A8%E6%B0%B4/"},{"title":"LeetCode437_路径总和III","text":"LeetCode437_路径总和III 前缀和：由根结点到当前结点的路径上所有节点的和 可以利用先序遍历二叉树，记录根节点rootrootroot到当前节点ppp的路径上除当前节点以外所有节点的前缀和，在已保存的路径前缀和中查找是否存在前缀和刚好等于当前节点到根节点的前缀和currcurrcurr减去targetSumtargetSumtargetSum 比如下面遍历到3的时候，得到10-5这部分前缀和；则存在前缀和为10-15的；当前节点到根节点的前缀和currcurrcurr为18； 存在18-10=8；说明5-3这部分刚好等于targetSumtargetSumtargetSum(即蓝色部分) 123456789101112int count = 0;unordered_map&lt;long long, int&gt; prefix; // 前缀和 和 其个数（遍历到当前节点时）// 当前遍历节点；到当前节点的前缀和；目标值void helper(TreeNode437 *root, long long curr, int targetSum) { if (root == NULL) return; curr += root-&gt;val; count += prefix[curr - targetSum]; prefix[curr]++; helper(root-&gt;left, curr, targetSum); helper(root-&gt;right, curr, targetSum); prefix[curr]--;}","link":"/2024/03/08/LeetCode437-%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8CIII/"},{"title":"LeetCode48_旋转图像","text":"LeetCode48_旋转图像 这题主要是用数学推导，然后遍历即可 每一次遍历，即是一次位置转换； 遍历的范围也是左上角，行是n/2，列是(n+1)/2","link":"/2024/01/09/LeetCode48-%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F/"},{"title":"LeetCode790_多米诺和托米诺平铺","text":"LeetCode790_多米诺和托米诺平铺 在第iii列前面的正方形都被瓷砖覆盖，在第iii列后面的正方形都没有被瓷砖覆盖（iii从111开始计数）。那么第iii列的正方形有四种被覆盖的情况： 一个正方形都没有被覆盖，记为状态 000； 只有上方的正方形被覆盖，记为状态 111； 只有下方的正方形被覆盖，记为状态 222； 上下两个正方形都被覆盖，记为状态 333。 使用 dp[i][s]dp[i][s]dp[i][s] 表示平铺到第 iii 列时，各个状态 sss 对应的平铺方法数量。考虑第i−1i-1i−1 列和第iii列正方形，它们之间的状态转移如下图（红色条表示新铺的瓷砖）： ![[/Assets/6ba5da8ab9c35e50460ab797e64505da_MD5.png]] 初始时 dp[0][0]=0,dp[0][1]=0,dp[0][2]=0,dp[0][3]=1dp[0][0]=0,dp[0][1]=0,dp[0][2]=0,dp[0][3]=1dp[0][0]=0,dp[0][1]=0,dp[0][2]=0,dp[0][3]=1，对应的状态转移方程（i&gt;0i&gt;0i&gt;0）为： dp[i][0]=dp[i−1][3]dp[i][1]=dp[i−1][0]+dp[i−1][2]dp[i][2]=dp[i−1][0]+dp[i−1][1]dp[i][3]=dp[i−1][0]+dp[i−1][1]+dp[i−1][2]+dp[i−1][3]dp[i][0]=dp[i−1][3] \\\\ dp[i][1]=dp[i−1][0]+dp[i−1][2] \\\\dp[i][2]=dp[i−1][0]+dp[i−1][1] \\\\dp[i][3]=dp[i−1][0]+dp[i−1][1]+dp[i−1][2]+dp[i−1][3]dp[i][0]=dp[i−1][3]dp[i][1]=dp[i−1][0]+dp[i−1][2]dp[i][2]=dp[i−1][0]+dp[i−1][1]dp[i][3]=dp[i−1][0]+dp[i−1][1]+dp[i−1][2]+dp[i−1][3] 最后平铺到第 nnn 列时，上下两个正方形都被覆盖的状态 dp[n][3]dp[n][3]dp[n][3] 对应的平铺方法数量就是总平铺方法数量。","link":"/2024/03/08/LeetCode790-%E5%A4%9A%E7%B1%B3%E8%AF%BA%E5%92%8C%E6%89%98%E7%B1%B3%E8%AF%BA%E5%B9%B3%E9%93%BA/"},{"title":"LeetCode875_爱吃香蕉的珂珂","text":"LeetCode875_爱吃香蕉的珂珂 这道题感觉就是在对题目进行推导计算公式 思路 如果在hhh小时内吃掉所有香蕉的最小速度是每小时kkk个香蕉，则当吃香蕉的速度大于每小时kkk个香蕉时一定可以在hhh小时内吃掉所有香蕉，当吃香蕉的速度小于每小时kkk个香蕉时一定不能在hhh小时内吃掉所有香蕉 因此可以用二分查找的方法得到最小速度kkk；由于每小时都要吃香蕉，即每小时至少吃111个香蕉，下界是111；由于每小时最多吃一堆香蕉，即每小时吃的香蕉数目不会超过最多的一堆中的香蕉数目，因此上界是最多的一堆中的香蕉数目 假设吃香蕉的速度是speedspeedspeed，则当一堆香蕉的个数是pilepilepile时，吃掉这堆香蕉需要⌈pilespeed⌉\\lceil \\frac{pile}{speed} \\rceil⌈speedpile​⌉小时；如果在速度speedspeedspeed下可以在hhh小时内吃掉所有香蕉，则最小速度一定小于或等于speedspeedspeed，上界调整为speedspeedspeed；否则最小速度一定大于speedspeedspeed，因此将下界调整为speed+1speed+1speed+1 二分查找结束之后，即可得到在hhh小时内吃掉所有香蕉的最小速度kkk 代码 在计算吃掉每一堆香蕉的时间时，由于pilepilepile和speedspeedspeed都大于000，因此⌈pilespeed⌉\\lceil \\frac{pile}{speed} \\rceil⌈speedpile​⌉等价于⌊pile+speed−1speed⌋\\lfloor \\frac{pile+speed-1}{speed} \\rfloor⌊speedpile+speed−1​⌋ 12345678910111213141516171819202122232425262728293031class Solution {public: int minEatingSpeed(vector&lt;int&gt;&amp; piles, int h) { int low = 1; int high = 0; for (int pile : piles) { high = max(high, pile); } int k = high; while (low &lt; high) { int speed = (high - low) / 2 + low; long time = getTime(piles, speed); if (time &lt;= h) { k = speed; high = speed; } else { low = speed + 1; } } return k; } long getTime(const vector&lt;int&gt;&amp; piles, int speed) { long time = 0; for (int pile : piles) { int curTime = (pile + speed - 1) / speed; time += curTime; } return time; }};","link":"/2024/03/08/LeetCode875-%E7%88%B1%E5%90%83%E9%A6%99%E8%95%89%E7%9A%84%E7%8F%82%E7%8F%82/"},{"title":"LeetCode968_监控二叉树","text":"LeetCode968_监控二叉树 【遍历方式】 因为需要尽量让叶子结点的父结点安装摄像头，所以需要从底往上推导，也就是后序遍历 【转移方程】 每个节点有3种状态；父结点就可以根据每个节点的 0：该节点无覆盖 1：本节点有摄像头 2：本节点有覆盖 【空节点状态】 不能是无覆盖状态：因为叶子结点就可以放摄像头了 不能是有摄像头状态：因为叶子结点就没必要放摄像头了 所以应该是 有覆盖 状态 12// 空节点，该节点有覆盖if (cur == NULL) return 2; 【递推关系】 有4种情况 情况1：左右节点都有覆盖，则中间结点是无覆盖状态 12// 左右节点都有覆盖if (left == 2 &amp;&amp; right == 2) return 0; 情况2：左右节点至少有一个无覆盖的情况，则中间结点应该放摄像头 1234if (left == 0 || right == 0) { result++; return 1;} 情况3：左右节点至少有一个有摄像头，则中间结点应该是有覆盖状态 1if (left == 1 || right == 1) return 2; 情况4：头结点没有覆盖，递归结束之后，可能头结点 还有一个无覆盖的情况，所以还需要判断 1234567int minCameraCover(TreeNode* root) { result = 0; if (traversal(root) == 0) { // root 无覆盖 result++; } return result;}","link":"/2024/03/08/LeetCode968-%E7%9B%91%E6%8E%A7%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"title":"LeetCode918_环形子数组的最大和","text":"LeetCode918_环形子数组的最大和 方法一：动态规划 包括两种情况 子数组在中间 子数组在两边 情况1：做法和最大子数组和相同，动态规划，max(now,pre+now)max(now,pre+now)max(now,pre+now) 情况2：固定jjj的位置，找到0∼j−10 \\sim j-10∼j−1前缀和最大的 代码可以分成两个部分 从左往右遍历：求最大前缀和数组 + 情况1更新 res 从右往左遍历：求出后缀 + 根据最大前缀和数组更新 res 方法二：取反 情况1和上面一样 情况2：实际上就是求出中间的minminmin，求出最小的之后，用sum−minsum-minsum−min即可","link":"/2024/03/08/LeetCode918-%E7%8E%AF%E5%BD%A2%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%92%8C/"},{"title":"LeetCode面试题03.05_栈排序","text":"解法一 对于每次插入的新元素都用辅助栈保证是适合s1的 比如s1 = {1,5,6,8,9}，插入7 先把{8,9}插入s2，s2 = {8,9} 再把7插入s1，s1 = {1,5,6,7} 再把s2插入s1，s1 = {1,5,6,7,8,9} 解法二 维护两个栈，原栈为降序，辅助栈为升序 s1 = {8,7,3} s2 = {} 插入5，因为比s1.top大，把3插入s2中，5插入s1中 s1 = {8,7,5} s2 = {3} 对于当前valvalval，把s2中比valvalval大的放到s1中，把s1中比valvalval小的放到s2中 [[/Assets/LeetCode面试题03.05-栈排序 2024-06-02 14.08.24.excalidraw]] 因为所有的元素都是从s1中pop然后push到s2中的，所以s2是降序的 这样就没必要在push的时候把s2中元素重新加入到s1中去，只是在pop的时候需要清空s2","link":"/2024/06/02/LeetCode%E9%9D%A2%E8%AF%95%E9%A2%9803.05-%E6%A0%88%E6%8E%92%E5%BA%8F/"},{"title":"LeetCode面试题02.07_链表相交","text":"解法一 遍历链表headAheadAheadA ，并将链表headAheadAheadA 中的每个节点加入哈希集合中 遍历链表headBheadBheadB，对于遍历到的每个节点，判断该节点是否在哈希集合中 如果不在，则继续遍历 如果在，则后面的节点都在，返回该节点 如果所有都不在，则两个链表不相交，返回nullnullnull 解法二 用双指针的方式 [[/Assets/LeetCode面试题02.07-链表相交 2024-06-02 13.24.47.excalidraw]] 指针A先遍历链表headA，再遍历链表headB，走到node时共走步数为a+(b−c)a+(b-c)a+(b−c) 指针B先遍历链表headB，再遍历链表headA，走到node时共走步数为b+(a−c)b+(a-c)b+(a−c) 那么此时指针A，B重合，如果两个链表有公共尾部，即c&gt;0，则A，B同时指向第一个公共节点node；如果没有公共节点，即c=0，则A，B同时指向nullnullnull 写代码的话，就是每步都是指针A，B都向前走一步；哪个指针走到nullnullnull了就换到另一个链条的头节点；如果相等则返回AAA","link":"/2024/06/02/LeetCode%E9%9D%A2%E8%AF%95%E9%A2%9802.07-%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A4/"},{"title":"LeetCode面试题04.09_二叉搜索树序列","text":"就是给定一棵二叉搜索树，给出从左到右遍历 能够生成这棵树的数组；说实话题目意思还是没咋看懂，但是知道怎么解题了 [[/Assets/LeetCode面试题04.09-二叉搜索树序列 2024-06-02 15.12.46.excalidraw]] 题意即解法大概如上，代码方面是bfs + 回溯","link":"/2024/06/02/LeetCode%E9%9D%A2%E8%AF%95%E9%A2%9804.09-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E5%BA%8F%E5%88%97/"},{"title":"LeetCode面试题05.08_绘制直线","text":"这道题首先需要理解题目 以length = 3, w = 96, x1 = 0, x2 = 95, y = 0为例子 以length = 9, w = 96, x1 = 61, x2 = 63, y = 2为例子 由于是32位的int，从x1/32个整数开始，到x2/32个整数结束 每一行的开始和结束坐标是(i+1)*32-1和i+32，看看是不是超出了起始和结束坐标的范围，然后新的坐标对32取余 由于题目保证1不会分布到两行中，所以可以先得到1的起始和终止位置在第几位之后，进行左移","link":"/2024/06/02/LeetCode%E9%9D%A2%E8%AF%95%E9%A2%9805.08-%E7%BB%98%E5%88%B6%E7%9B%B4%E7%BA%BF/"},{"title":"LeetCode649_Dota2参议院","text":"LeetCode649_Dota2参议院 Radiant和Dire；以Radiant的议员为例，当一名Radiant的议员行使权利时： 如果目前所有议员都是Radiant方，那么可以直接宣布取得胜利 如果仍然有Dire方的议员，那么只能行使【禁止一名参议员的权利】，那么应该挑选按照投票顺序的下一名Dire的议员【贪心】 可以分别用两个队列存储Radiant和Dire的投票时间 如果此时Radiant或者Dire为空，那么就可以宣布另一方获得胜利 如果均不为空，可以比较首元素，就可以确定当前行使权利的是哪方； 如果Radiant的首元素较小，那说明轮到天辉方的议员行使权利 其会挑选Dire的首元素对应的那一名议员。因此，我们会将Dire的首元素永久地弹出 并将Radiant的首元素弹出，增加n【所有议员数量】之后再重新放回队列，即表示该议员会参与下一轮的投票 最后判断哪个不为空即可","link":"/2024/03/08/LeetCode649-Dota2%E5%8F%82%E8%AE%AE%E9%99%A2/"},{"title":"LeetCode面试题10.03_搜索旋转数组","text":"根据题解总结旋转数组相关题目，都是二分法 一 https://leetcode.cn/problems/rotate-array/description/ 向右移动的位置k可能会大于n，因此对m取余 先将整个数组反转，再将前k个反转，再将后n-k个反转 二 https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array/description/ nums中所有整数都是唯一的 nums原来是一个升序排列的数组，但在预先未知的某个点上进行了旋转 二分法 1. nums[mid] &gt; nums[right]，如[3,4,5,1,2]，则左侧是有序上升的，最小值在右侧 2. nums[mid] &lt;= nums[right]，如[6,7,1,2,3,4,5]，则右侧是有序上升的，最小值在左侧 三 https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array-ii/description/ 和二相比，就是数组中有重复值 二分法 nums[mid] &gt; nums[right]，如[3,4,5,1,2]，则左侧是有序上升的，最小值在右侧 nums[mid] &lt; nums[right]，如[6,7,1,2,3,4,5]，则右侧是有序上升的，最小值在左侧 nums[mid] == nums[right]，如[2,3,1,1,1]，重复数字可能是最小值，也可能最小值在左侧，所以right左移 四 https://xleetcode.cn/problems/search-in-rotated-sorted-array/description/ 分为左半部分有序和右半部分有序；最终找到目标值 五 https://leetcode.cn/problems/search-in-rotated-sorted-array-ii/description/ 和四相比是添加了重复值 重点在于处理重复数字 左边有重复，将左边界右移 右边有重复，将右边界左移 然后按照左半部分和右半部分有序来分 六 https://leetcode.cn/problems/search-rotate-array-lcci/description/ 和五很像，区别是五是只要存在target就返回true，而这道题要返回多个重复target中最靠前的那个 边界条件很多 当left符合条件时直接返回，因为找的是最小的索引 当中间值等于目标值，将右边界移到中间，因为左边可能还有相等的值 当中间数字与左边数字相等时，将左边界右移","link":"/2024/06/11/LeetCode%E9%9D%A2%E8%AF%95%E9%A2%9810.03-%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84/"},{"title":"LeetCode面试题08.14_布尔运算","text":"状态定义：dp[i][j][result=0/1]表示第i到j个数字计算结果为result的方案数 状态转移：枚举区间分割点，根据分割点情况讨论左右区间计算结果，方案数增量为左右方案数相乘 分割点为&amp; 结果为0有三种情况： 0 0, 0 1, 1 0 dp[i][j][0] += dp[i][k - 1][0] * dp[k + 1][j][0] + dp[i][k - 1][0] * dp[k + 1][j][1] + dp[i][k - 1][1] * dp[k + 1][j][0] 结果为1有一种情况： 1 1 dp[i][j][1] += dp[i][k - 1][1] * dp[k + 1][j][1] 分割点为|: 结果为0有一种情况： 0 0 dp[i][j][0] += dp[i][k - 1][0] * dp[k + 1][j][0] 结果为1有三种情况： 0 1, 1 0, 1 1 dp[i][j][1] += dp[i][k - 1][0] * dp[k + 1][j][1] + dp[i][k - 1][1] * dp[k + 1][j][0] + dp[i][k - 1][1] * dp[k + 1][j][1] 分割点为^: 结果为0有两种情况： 0 0, 1 1 dp[i][j][0] += dp[i][k - 1][0] * dp[k + 1][j][0] + dp[i][k - 1][1] * dp[k + 1][j][1] 结果为1有两种情况： 0 1, 1 0 dp[i][j][1] += dp[i][k - 1][1] * dp[k + 1][j][0] + dp[i][k - 1][0] * dp[k + 1][j][1] 初始条件：数字位初始化为1，即dp[i][i]][0/1]=1 具体代码： 三个循环： 枚举区间长度：跳步为2，一个数字一个符号 枚举区间起点：数字位，跳步为2 枚举分割点：三种&amp; | ^，跳步为2","link":"/2024/06/09/LeetCode%E9%9D%A2%E8%AF%95%E9%A2%9808.14-%E5%B8%83%E5%B0%94%E8%BF%90%E7%AE%97/"},{"title":"LeetCode面试题16.03_交点","text":"设一条线段的两个端点分别为(x1,y1)(x1,y1)(x1,y1)以及(x2,y2)(x2,y2)(x2,y2)，另一个线段的两个端点分别为(x3,y3)(x3,y3)(x3,y3)以及(x4,y4)(x4,y4)(x4,y4) 如果平面上两条直线不平行，则一定相交并且有唯一的交点 不平行 写出这两条线段所在的直线的参数方程 对于线段(x1,y1)∼(x2,y2)(x1, y1) \\sim (x2, y2)(x1,y1)∼(x2,y2)，它的参数方程为： {x=x1+t1(x2−x1)y=y1+t1(y2−y1)t1∈[0,1]\\begin{cases} x = x_1 + t_1(x_2 - x_1) \\\\ y = y_1 + t_1(y_2 - y_1) \\end{cases} \\quad t_1 \\in [0, 1] {x=x1​+t1​(x2​−x1​)y=y1​+t1​(y2​−y1​)​t1​∈[0,1] 对于线段(x3,y3)∼(x4,y4)(x3, y3) \\sim (x4, y4)(x3,y3)∼(x4,y4)，它的参数方程为： {x=x3+t2(x4−x3)y=y3+t2(y4−y3)t2∈[0,1]\\begin{cases} x = x_3 + t_2(x_4 - x_3) \\\\ y = y_3 + t_2(y_4 - y_3) \\end{cases} \\quad t_2 \\in [0, 1] {x=x3​+t2​(x4​−x3​)y=y3​+t2​(y4​−y3​)​t2​∈[0,1] 联立这两个参数方程求出交点 我们先忽略t1,t2∈[0,1]t1, t2 \\in [0, 1]t1,t2∈[0,1]的限制，求出它们的值之后再进行判断。联立得到的方程组为： {x1+t1(x2−x1)=x3+t2(x4−x3)y1+t1(y2−y1)=y3+t2(y4−y3)\\begin{cases} x_1 + t_1(x_2 - x_1) = x_3 + t_2(x_4 - x_3) \\\\ y_1 + t_1(y_2 - y_1) = y_3 + t_2(y_4 - y_3) \\end{cases} {x1​+t1​(x2​−x1​)=x3​+t2​(x4​−x3​)y1​+t1​(y2​−y1​)=y3​+t2​(y4​−y3​)​ 这是一个普通的二元一次方程组，我们可以得到解为： {t1=x3(y4−y3)+y1(x4−x3)−y3(x4−x3)−x1(y4−y3)(x2−x1)(y4−y3)−(x4−x3)(y2−y1)t2=x1(y2−y1)+y3(x2−x1)−y1(x2−x1)−x3(y2−y1)(x4−x3)(y2−y1)−(x2−x1)(y4−y3)\\begin{cases} t_1 = \\frac{x_3(y_4-y_3)+y_1(x_4-x_3)-y_3(x_4-x_3)-x_1(y_4-y_3)}{(x_2-x_1)(y_4-y_3)-(x_4-x_3)(y_2-y_1)}\\\\ t_2 = \\frac{x_1(y_2-y_1)+y_3(x_2-x_1)-y_1(x_2-x_1)-x_3(y_2-y_1)}{(x_4-x_3)(y_2-y_1)-(x_2-x_1)(y_4-y_3)} \\end{cases} {t1​=(x2​−x1​)(y4​−y3​)−(x4​−x3​)(y2​−y1​)x3​(y4​−y3​)+y1​(x4​−x3​)−y3​(x4​−x3​)−x1​(y4​−y3​)​t2​=(x4​−x3​)(y2​−y1​)−(x2​−x1​)(y4​−y3​)x1​(y2​−y1​)+y3​(x2​−x1​)−y1​(x2​−x1​)−x3​(y2​−y1​)​​ 判断这个交点是否在线段上 我们只要判断是否有0≤t1≤10 \\leq t_1 \\leq 10≤t1​≤1 以及 0≤t2≤10 \\leq t_2 \\leq 10≤t2​≤1 平行 可以通过检查斜率来判断两条线段是否平行，即当： y4−y3x4−x3=y2−y1x2−x1\\frac{y_4-y_3}{x_4-x_3} = \\frac{y_2-y_1}{x_2-x_1} x4​−x3​y4​−y3​​=x2​−x1​y2​−y1​​ 满足时，两条线段平行。但这里需要注意的是，可能出现斜率无穷大的情况（即线段与 yyy 轴平行），此时x2−x1x_2 - x_1x2​−x1​以及x4−x3x_4 - x_3x4​−x3​的值为000，无法作为分母。因此我们需要将除法变为乘法，用：(y4−y3)(x2−x1)=(y2−y1)(x4−x3)(y_4-y_3)(x_2-x_1) = (y_2-y_1)(x_4-x_3)(y4​−y3​)(x2​−x1​)=(y2​−y1​)(x4​−x3​)进行判断。 当我们知道了两条线段平行之后，会有两种情况： 这两条线段不在同一条直线上，那么它们不会有交点； 这两条线段在同一条直线上，此时如果它们有交点，最优的交点一定是 (x1,y1)(x_1, y_1)(x1​,y1​)、(x2,y2)(x_2, y_2)(x2​,y2​)、(x3,y3)(x_3, y_3)(x3​,y3​)以及(x4,y4)(x_4, y_4)(x4​,y4​)中的一个。这是因为假设这两条线段有交点 (xi,yi)(x_i, y_i)(xi​,yi​)，那么我们一定可以不断地将这个交点往更优的方向移动，直到到达某一条线段的端点，这个端点即为上述四个端点中的一个。 那么我们如何判断这两条线段是否在同一条直线上呢？由于它们平行，因此我们只需要判断 (x3,y3)(x_3, y_3)(x3​,y3​)是否在(x1,y1)∼(x2,y2)(x_1, y_1) \\sim (x_2, y_2)(x1​,y1​)∼(x2​,y2​)所在的直线上。即存在t∈Rt \\in \\mathbb{R}t∈R使得： {x3=x1+t(x2−x1)y3=y1+t(y2−y1)\\begin{cases} x_3 = x_1 + t(x_2 - x_1)\\\\ y_3 = y_1 + t(y_2 - y_1) \\end{cases} {x3​=x1​+t(x2​−x1​)y3​=y1​+t(y2​−y1​)​ 联立这两个等式即可得到 t=x3−x1x2−x1=y3−y1y2−y1⇒y2−y1x2−x1=y3−y1x3−x1\\begin{aligned} &amp; t = \\frac{x_3 - x_1}{x_2 - x_1} = \\frac{y_3 - y_1}{y_2 - y_1}\\\\ \\Rightarrow &amp; \\frac{y_2 - y_1}{x_2 - x_1} = \\frac{y_3 - y_1}{x_3 - x_1} \\end{aligned} ⇒​t=x2​−x1​x3​−x1​​=y2​−y1​y3​−y1​​x2​−x1​y2​−y1​​=x3​−x1​y3​−y1​​​ 它的几何意义为：(x1,y1)∼(x2,y2)(x_1, y_1) \\sim (x_2, y_2)(x1​,y1​)∼(x2​,y2​)的斜率等于(x1,y1)∼(x3,y3)(x_1, y_1) \\sim (x_3, y_3)(x1​,y1​)∼(x3​,y3​)的斜率，这也是比较直观的。同样地，我们需要将除法变为乘法进行判断: (y2−y1)(x3−x1)=(y3−y1)(x2−x1)(y_2 - y_1)(x_3 - x_1) = (y_3 - y_1)(x_2 - x_1)(y2​−y1​)(x3​−x1​)=(y3​−y1​)(x2​−x1​) 最后一步我们只需要判断：(x1,y1)(x_1, y_1)(x1​,y1​)是否在线段(x3,y3)∼(x4,y4)(x_3, y_3) \\sim (x_4, y_4)(x3​,y3​)∼(x4​,y4​)上；(x2,y2)(x_2, y_2)(x2​,y2​)是否在线段(x3,y3)∼(x4,y4)(x_3, y_3) \\sim (x_4, y_4)(x3​,y3​)∼(x4​,y4​)上；(x3,y3)(x_3, y_3)(x3​,y3​)是否在线段(x1,y1)∼(x2,y2)(x_1, y_1) \\sim (x_2, y_2)(x1​,y1​)∼(x2​,y2​)上；(x4,y4)(x_4, y_4)(x4​,y4​)是否在线段(x1,y1)∼(x2,y2)(x_1, y_1) \\sim (x_2, y_2)(x1​,y1​)∼(x2​,y2​)上。 并在满足条件的端点中选择一个最优的。我们以判断(x3,y3)(x_3, y_3)(x3​,y3​)是否在线段 (x1,y1)∼(x2,y2)(x_1, y_1) \\sim (x_2, y_2)(x1​,y1​)∼(x2​,y2​)上为例，根据上文的推导，需要满足： 0≤x3−x1x2−x1=y3−y1y2−y1≤10 \\leq \\frac{x_3 - x_1}{x_2 - x_1} = \\frac{y_3 - y_1}{y_2 - y_1} \\leq 1 0≤x2​−x1​x3​−x1​​=y2​−y1​y3​−y1​​≤1 这里有一些边界情况，我们一种一种来考虑： 如果线段(x1,y1)∼(x2,y2)(x_1, y_1) \\sim (x_2, y_2)(x1​,y1​)∼(x2​,y2​)与 xxx 轴平行，即 y1=y2y_1 = y_2y1​=y2​ ，那么只需要判断是否有： 0≤x3−x1x2−x1≤10 \\leq \\frac{x_3 - x_1}{x_2 - x_1} \\leq 1 0≤x2​−x1​x3​−x1​​≤1 它等价于 min⁡(x1,x2)≤x3≤max⁡(x1,x2)\\min(x_1, x_2) \\leq x_3 \\leq \\max(x_1, x_2)min(x1​,x2​)≤x3​≤max(x1​,x2​)。它的几何意义也是很显然的，因为线段与 xxx 轴平行，所以只要 x3x_3x3​，在x1x_1x1​与 x2x_2x2​之间就行了； 如果线段 (x1,y1)∼(x2,y2)(x_1, y_1) \\sim (x_2, y_2)(x1​,y1​)∼(x2​,y2​)与 yyy 轴平行，即 x1=x2x_1 = x_2x1​=x2​，那么只需要判断是否有： 0 \\leq \\frac{y_3 - y_1}{y_2 - y_1} \\leq 1$$它等价于$\\min(y_1, y_2) \\leq y_3 \\leq \\max(y_1, y_2)$如果是其余的情况，那么需要判断 $\\min(x_1, x_2) \\leq x_3 \\leq \\max(x_1, x_2)$和 $\\min(y_1, y_2) \\leq y_3 \\leq \\max(y_1, y_2)$这两者。","link":"/2024/06/11/LeetCode%E9%9D%A2%E8%AF%95%E9%A2%9816.03-%E4%BA%A4%E7%82%B9/"},{"title":"Neo4j学习","text":"安装过程 需要已经安装好homebrew和JAVA 终端输入brew install neo4j 进入neo4j官网：选择products-选择deploy-选择deployment center，链接 选择对应版本下载得到tar.gz文件，解压 进入Downloads文件夹，改名：`mv neo4j-community-5.1.0 NEO4J_HOME 将文件移动到home目录，cp NEO4J_HOME $HOME 启动，终端输入：neo4j start 停止，终端输入：neo4j stop 安装插件：下载对应的文件放入plugins文件夹中 运行过程 可以下载其他语言的驱动，导入数据 数据都是共享的，需要删除数据则： 删除所有节点： MATCH (n) DETACH DELETE n; 删除所有关系： MATCH ()-[r]-() DETACH DELETE r; 删除所有属性： MATCH (n) DETACH DELETE n; 删除标签：得一个个删： 查看索引：:schema 删除对应的：DROP CONSTRAINT constraint_4a7831e6","link":"/2024/10/30/Neo4j%E5%AD%A6%E4%B9%A0/"},{"title":"Notion学习","text":"下面主要是记录一下用Notion Formula中常用公式 属性（Properties） prop(&quot;属性&quot;)得到属性值 包括：数字、文本、日期、布尔值 数字：可用add,around,ceil等函数 文本：用+号即可 日期：用end可得到截止日期 布尔：用打勾来代表bool值 常量（Constants） 运算符（Operators） 函数（Functions） if函数：if(boolean,value,value) 快捷键 ⇧⌫ 放大字体 ⇧⌘L 黑暗模式","link":"/2023/09/15/Notion%E5%AD%A6%E4%B9%A0/"},{"title":"Mac学习","text":"快捷键 ⌃⌘␣ 特殊符号 ⌘␣ 搜索 ⌘⌥ese 程序运行 ⌘⇧. 隐藏的文件夹 找到host finder-前往文件夹-/etc. /⇧⌘G 删掉应用程序 终端输入Killall 进程名称 显示隐藏的文件夹 终端输入defaults write com.apple.finder AppleShowAllFiles Yes &amp;&amp; killall Finder 虚拟机关机-设置-处理机和内存-硬盘大小 装WTG：用固态硬盘 管理员：sudo su 123456shift+command+G //访达访问页面开启Tomcat:sudo chmod 755 *.sh //开放权限sudo sh ./startup.sh //开启sh ./shutdown.sh //关闭sudo dscacheutil -flushcache; sudo killall -HUP mDNSResponder //清除缓存","link":"/2024/04/19/Mac%E5%AD%A6%E4%B9%A0/"},{"title":"Obsidian学习","text":"先开一个坑，陆陆续续搞Obsidian的主题插件，后面有机会再总结一下 后续待做 [ ] 感觉其实Notion的财务模板感觉可以迁移过来？主要Notion打开速度太慢了，感觉可以DB Folder，button，Kanban一起联动来完成notion的功能 [ ] 代码字体还不是很好看，而且还不能折叠，以后再调成比较方便的形式吧；而且没有不同颜色高亮，不同颜色字体之类的，不过这个不是很紧急，而且也不影响之后的使用 和Zotero联动 采用的是ZotLit插件，官网介绍得还挺清晰的，链接，下面是我自己的配置，生成结果如下，主要是能够做一个整合，可以配合dataview插件，以及zotero所有的注释也可以进行展示，也可以链接到Zotero中 下面是我的Obsidian配置呈现页，tags和collections可以便于管理总结： 下面是Zotero注释页面，如果更新可以update到Obsidian中 主题和字体配置 感觉Blue Topaz主题很不错，比较多人用，有问题可以问，而且比较多样化。字体用的是’霞鹜文楷 GB 屏幕阅读版’，中英文都很不错，但是代码的话暂时没有特别喜欢的，用文楷又感觉应该要区别一下。需要先下载，解决了之前的中文粗体问题（不知道为啥，有些中文加不了粗） Style Setting这个插件可以配合Blue Topaz主题一起使用，我用这个改了段落之间的距离（因为感觉宽一点比较好，从别的笔记迁移过来的话），还有设置了选中文本时候颜色之类的 Iconize这个插件主要是提供了图标，因为Notion是能够给文档加上图标的，可能比较美观吧 Linter这个插件也是为了页面更加美观，比如去除空行之类的，暂时也没怎么用到 Callout设置 感觉callout就很好看，用的是admonition这个插件，主要是用它来做分栏，而且可以折叠感觉不错。下面由于用的是Blue Topaz主题，所以如果cssclasses显示是kanban，则可以用无序列表展示出看板的效果（比单纯的看板插件可用性感觉高一点，因为看板插件展示的md文件不能渲染其他东西） 下面的页面还采用了插件HomePage，就是开机即到达该页面，算是一个主页的作用，便于导航 表格数据展示 notion和飞书的多维表格做的是真的很好，这个obsidian调试估计要调很久还没有效果，普通的表格的话就用了advanced table比较方便调节。常用的还是dataview进行一个统计的操作，以及DB Folder看上去可以比较容易实现联动，可以仿照一下notion，这个后续再研究 画图工具 之前还觉得在Obsidian画图的那个ExcaliDraw画风太可爱了不适合，但是确实还挺不错的，而且才用到初级的，后面还有很多可以一起加上去 以及还有自带的canva画布，这个没咋用，但是可以链接文档啥的，Obsidian的双链功能，思维图谱功能都挺出名的，但是目前还没有使用到 大纲查看 其实有官方的大纲，但是总是要点一下，所以用了floating toc插件，效果如下，右边即是插件的功能，可以一直悬浮看很方便 123title: 左右对比![](/Assets/Pasted%20image%2020240418172204.png)![](/Assets/Pasted%20image%2020240418172212.png) 查找替换 官方也有提供单个页面查找和全局查找，但是都不能替换，所以下载了Regex Find/Replace这个插件，就可以正则表达式替换，其实后面应该不会太用到，主要是前期在搞图片路径 菜单展示 Obsidian是一个纯文本编辑，而且还没有菜单，我有时候就记不住快捷键，而且打字还挺麻烦的，一开始用了editing-tool-bar，但是总是不能显示，得呼唤一下才能显示，现在用的cMenu，可以自定义操作上去，感觉还挺方便。这个是和增强编辑操作一起做的，增强编辑主要起一个快捷作用 日记功能 让我投奔Obsidian的一大原因就是居然整合了日记功能，感觉日记这个东西放在云端不太方便，本地比较好，但是有想手机和电脑端都可以记录，而Obsidian居然有日记核心插件，简直了！！可以和很多其他的联动，比如thino，这个我也下载了，但是感觉对我没啥用 和Hexo联动 用template插件，建立如下模板： 12345678---title: &lt;% tp.file.title %&gt;date: &lt;% tp.file.creation_date(&quot;YYYY-MM-DD HH:mm:ss&quot;) %&gt;updated: tags: categories: --- 采用quickAdd插件，用命令即可插入一个新的文件到我写Blog的文件夹中 网页展示 采用的是Auto Card Link，就是可以变成卡片形式的，之前还尝试过另外一个，但是不太好用，但是有时候连不了网的时候也fetch不到，就是下面代码形式，可以改图标啥的 1234url: https://feishu.cntitle: &quot;飞书——先进企业协作与管理平台，一站式无缝办公协作，团队上下对齐目标，全面激活组织和个人。先进团队，先用飞书。&quot;description: &quot;飞书——先进企业协作与管理平台，不仅一站式整合及时沟通、智能日历、音视频会议、飞书文档、云盘等办公协作套件，更提供飞书OKR、飞书招聘、飞书绩效等组织管理产品，让目标更清晰，信息流动更顺畅，每一个人工作更高效更愉悦。先进团队，先用飞书。&quot;host: feishu.cn 网页嵌入 因为还是对notion有需求，任务之类的还没有迁移过来，所以想着怎么委婉地all in one，就用了Custom Frames插件可以全屏嵌入网页而且还可以固定图标 附件操作 最开始需要插入图片到特定路径的时候，需要用到比如$filename, $data之类的变量，用到了custom Attachment location插件（它会影响Obsidian全局附件位置），Local Image Plus则是有快捷键可以把比如网页上的图片全都存储到本地中 Clear Unused Images则是会清除所有没被用到的图片 笔记迁移 因为我是需要把Notion和语雀的笔记迁移过来的，所以下载了importer这个插件，网上搜一搜教程即可 图片展示 有时候图片太大了，所以下载了Mousewheel Image zoom这个插件，但是只能在Obsidian中缩放（用Alt+鼠标滚轮即可），其他还是正常的 最近文件 Recent Files能找到最近文件，后续看看能不能迁移到主页上，用来快速定位到上一次打开or学习的地方，但突然感觉其实有挺多能替代的，按下Ctrl+O即可 查看标签 其实官方有查看标签的地方，但是感觉功能有点少，Tags Overview就是plus版吧，但是有点花里胡哨，后面看看有没有能再改进 123![](/Assets/Pasted%20image%2020240418203327.png)![|291](/Assets/Pasted%20image%2020240418203429.png) 标题数字 Number Headings就是给标题自动加上前缀，比如1，2，3之类的，主要是在建立知识库的时候比较清晰一点 多端同步 用的是Remotely Save，还是不错的，平台是Onedrive，1GB暂时够用 标签页管理 因为每次打开文件都覆盖掉当前的了，所以用了Open In New Tab在新的标签页打开文件 记账管理 我用的ledger，操作基本上懂了，但是还是不太好用，完不成notion的功能，所以还是用Notion吧 知道功能但没怎么用的 Button就是一个按钮，感觉可以仿照notion的按钮功能来进行操作，但是还没怎么研究 Code Style感觉和我的主题冲突了还是怎么样，本来想用它来折叠代码的，结果没出现折叠的东西 Kanban的话也是和notion很像，但是它不能嵌入到其他页面，所以就不好观看，也许后续能够用到 笔记软件对比 先后迁移过好几个笔记软件了，总结一下下 Notion 可以多端，比较好的是数据库，按钮操作。而且有很多模板库可以选择，比如旅行模板，任务模板之类的；刚上手的时候还不错，感觉挺新奇的；而且换到iphone之后其实notion手机端挺好用的 但是比较慢，而且感觉排版啥的有时候太空了？？而且没有大纲 语雀 当时想有一个在线上的，感觉自己搭建的github+hexo太慢了，有时候又想看到自己的笔记（事实是记了就没看过hhh，以后会用到了） 所以把hexo的所有笔记都迁移到语雀上了，而且当时用它的小记功能，能记一些琐碎的东西 Obsidian 最近在研究，主要是插件市场很强大，而且是本地的，需要多端也是可以同步的，我主力是在电脑，手机ipad啥的就是查看一下，所以还挺不错，移动端没咋研究。 个性化好处就是需要满足啥功能可以自己去搜，坏处就是很多东西需要自己实现。现在主力把Blog，日记，学习笔记之类的放到这边，记账我觉得也是可以的，但是应该需要另外花费时间 Typora 这个软件之前比较喜欢用，但是后来收费了，而且其实主打markdown，用别的编辑器也是一样的，vscode和Obsidian感觉功能更多。当然，平时随便写一些文件还是可以的","link":"/2024/04/18/Obsidian%E5%AD%A6%E4%B9%A0/"},{"title":"WPS学习","text":"快捷键 ⇧⌘= 上标 ⌘= 下标 ⌘Y 恢复上一步操作 ⌘鼠标左键 选择不同位置文字 ⌘⏎ 分页符","link":"/2024/04/19/WPS%E5%AD%A6%E4%B9%A0/"},{"title":"VSCode学习","text":"快捷键 ⌘K ⌘F 代码整齐 ⌘- ⌘+ 字体大小 虚拟环境 venv 更改了虚拟环境的路径 找到activate文件夹 搜索VIRTUAL_ENV，然后更改到对应的 conda 如果在linux中不是root，则在python中有很多库不能安装，需要用conda 安装包：wget https://repo.anaconda.com/archive/Anaconda3-2023.07-Linux-x86_64.sh 安装：bash Anaconda3-2023.07-Linux-x86_64.sh 配置环境变量：source ~/.bashrc export PATH=&quot;$HOME/anaconda3/bin:$PATH&quot; 保存之后运行：source ~/.bashrc 验证安装：conda --version 创建虚拟环境：conda create -n myenv python=3.8 激活环境：conda activate myenv 列出环境：conda env list 删除环境：conda remove -n myenv --all `","link":"/2024/04/19/VSCode%E5%AD%A6%E4%B9%A0/"},{"title":"STL","text":"整理STL的数据类型及相关操作 STL标准模版库 C++标准模板库（STL）提供了一组通用的模板类和函数，这些类和函数可以实现各种数据结构和算法。以下是一些类似std::vector和std::string的常用STL容器： std::array：一个固定大小的数组，支持随机访问和迭代器。 std::deque：双端队列，支持在队列两端进行元素的插入和删除。 std::forward_list：单向链表，支持在链表头部进行元素的插入和删除。 std::list：双向链表，支持在链表两端进行元素的插入和删除。 std::map：关联容器，用于存储键值对。支持按照键进行查询和插入，底层实现为红黑树。 std::multimap：和std::map类似，但可以存储多个具有相同键的键值对。 std::set：关联容器，用于存储唯一的键。支持按照键进行查询和插入，底层实现为红黑树。 std::multiset：和std::set类似，但可以存储多个相同的键。 std::stack：堆栈，支持在栈顶进行元素的插入和删除。 std::queue：队列，支持在队尾进行元素的插入，在队头进行元素的删除。 std::priority_queue：优先队列，支持按照元素的优先级进行插入和删除，底层实现为堆。 除了上述容器之外，STL还提供了一些辅助类和函数，如迭代器、算法、函数对象等。这些类和函数可以与容器一起使用，实现各种常用的操作和算法。 string 1. 构造函数： 1234string(); // 创建一个空字符串string(const char* s); // 从C字符串创建一个字符串string(const string&amp; str); // 从另一个字符串创建一个字符串string(size_t n, char c); // 从字符c创建一个由n个字符c组成的字符串 2. 赋值和赋值运算符： 1234567string&amp; operator=(const string&amp; str); // 从另一个字符串赋值string&amp; operator=(const char* s); // 从C字符串赋值string&amp; operator=(char c); // 从一个字符赋值string&amp; assign(const string&amp; str); // 从另一个字符串赋值string&amp; assign(const char* s); // 从C字符串赋值string&amp; assign(const char* s, size_t n); // 从C字符串的前n个字符赋值string&amp; assign(size_t n, char c); // 从字符c创建一个由n个字符c组成的字符串 3. 访问和修改字符串的字符： 123456789101112131415char&amp; operator[](size_t pos); // 访问字符串的第pos个字符const char&amp; operator[](size_t pos) const; // 访问字符串的第pos个字符（常量版本）char&amp; at(size_t pos); // 访问字符串的第pos个字符，并检查边界const char&amp; at(size_t pos) const; // 访问字符串的第pos个字符，并检查边界（常量版本）char&amp; front(); // 访问字符串的第一个字符const char&amp; front() const; // 访问字符串的第一个字符（常量版本）char&amp; back(); // 访问字符串的最后一个字符const char&amp; back() const; // 访问字符串的最后一个字符（常量版本）string&amp; operator+=(const string&amp; str); // 将另一个字符串附加到当前字符串的末尾string&amp; operator+=(const char* s); // 将C字符串附加到当前字符串的末尾string&amp; operator+=(char c); // 将一个字符附加到当前字符串的末尾string&amp; append(const string&amp; str); // 将另一个字符串附加到当前字符串的末尾string&amp; append(const char* s); // 将C字符串附加到当前字符串的末尾string&amp; append(const char* s, size_t n); // 将C字符串的前n个字符附加到当前字符串的末尾string&amp; append(size_t n, char c); // 将字符c创建的由n个字符c组成的字符串附加到当前字符串的末尾 4. 字符串的比较： 1234int compare(const string&amp; str) const; // 比较当前字符串和另一个字符串int compare(const char* s) const; // 比较当前字符串和C字符串int compare(size_t pos, size_t len, const string&amp; str) const; // 从pos位置开始比较当前字符串的前len个字符和另一个字符串int compare(size_t pos, size_t len, const char* s) const; // 从pos位置开始比较当前字符串的前len个字符和C字符串 5. 字符串的查找和替换： 12345678910size_t find(const string&amp; str, size_t pos = 0) const; // 在当前字符串中查找另一个字符串，并返回它的位置size_t find(const char* s, size_t pos = 0) const; // 在当前字符串中查找C字符串，并返回它的位置size_t find(char c, size_t pos = 0) const; // 在当前字符串中查找字符c，并返回它的位置size_t rfind(const string&amp; str, size_t pos = npos) const; // 在当前字符串中倒序查找另一个字符串，并返回它的位置size_t rfind(const char* s, size_t pos = npos) const; // 在当前字符串中倒序查找C字符串，并返回它的位置size_t rfind(char c, size_t pos = npos) const; // 在当前字符串中倒序查找字符c，并返回它的位置string&amp; replace(size_t pos, size_t len, const string&amp; str); // 替换当前字符串中从pos位置开始的len个字符为另一个字符串string&amp; replace(size_t pos, size_t len, const char* s); // 替换当前字符串中从pos位置开始的len个字符为C字符串string&amp; replace(size_t pos, size_t len, const char* s, size_t n); // 替换当前字符串中从pos位置开始的len个字符为C字符串的前n个字符string&amp; replace(size_t pos, size_t len, size_t n, char c); // 替换当前字符串中从pos位置开始的len个字符为n个字符c 6. 字符串的子串： 1string substr(size_t pos = 0, size_t len = npos) const; // 返回当前字符串中从pos位置开始的len个字符组成的子串 7. 字符串的长度和容量： 123456size_t size() const; // 返回当前字符串的长度size_t length() const; // 返回当前字符串的长度size_t capacity() const; // 返回当前字符串的容量bool empty() const; // 判断当前字符串是否为空void reserve(size_t n); // 分配至少可以容纳n个字符的内部存储空间void shrink_to_fit(); // 收缩当前字符串的内部存储空间，使其能够容纳实际的字符数 8. 字符串的输入输出： 123istream&amp; getline(istream&amp; is, string&amp; str, char delim); // 从输入流中读取一行到字符串中，以delim为分隔符ostream&amp; operator&lt;&lt;(ostream&amp; os, const string&amp; str); // 将字符串输出到输出流中istream&amp; operator&gt;&gt;(istream&amp; is, string&amp; str); // 从输入流中读取字符串 9. 字符串的判断和分类： 1234567891011121314bool operator==(const string&amp; lhs, const string&amp; rhs); // 判断两个字符串是否相等bool operator!=(const string&amp; lhs, const string&amp; rhs); // 判断两个字符串是否不相等bool operator&lt;(const string&amp; lhs, const string&amp; rhs); // 判断一个字符串是否小于另一个字符串bool operator&lt;=(const string&amp; lhs, const string&amp; rhs); // 判断一个字符串是否小于或等于另一个字符串bool operator&gt;(const string&amp; lhs, const string&amp; rhs); // 判断一个字符串是否大于另一个字符串bool operator&gt;=(const string&amp; lhs, const string&amp; rhs); // 判断一个字符串是否大于或等于另一个字符串bool starts_with(const string&amp; str, const string&amp; prefix); // 判断一个字符串是否以另一个字符串开头bool ends_with(const string&amp; str, const string&amp; suffix); // 判断一个字符串是否以另一个字符串结尾bool isalnum(int c); // 判断一个字符是否是字母或数字bool isalpha(int c); // 判断一个字符是否是字母bool isdigit(int c); // 判断一个字符是否是数字bool islower(int c); // 判断一个字符是否是小写字母bool isupper(int c); // 判断一个字符是否是大写字母bool isspace(int c); // 判断一个字符是否是空白字符，包括空格、制表符、换行符等 10. 字符串的转换： 123456789101112131415161718string to_string(int value); // 将整数转换为字符串string to_string(long value);string to_string(long long value);string to_string(unsigned value);string to_string(unsigned long value);string to_string(unsigned long long value);string to_string(float value); // 将浮点数转换为字符串string to_string(double value);string to_string(long double value);int stoi(const string&amp; str, size_t* pos = 0, int base = 10); // 将字符串转换为整数long stol(const string&amp; str, size_t* pos = 0, int base = 10);long long stoll(const string&amp; str, size_t* pos = 0, int base = 10);unsigned stoul(const string&amp; str, size_t* pos = 0, int base = 10);unsigned long stoul(const string&amp; str, size_t* pos = 0, int base = 10);unsigned long long stoull(const string&amp; str, size_t* pos = 0, int base = 10);float stof(const string&amp; str, size_t* pos = 0); // 将字符串转换为浮点数double stod(const string&amp; str, size_t* pos = 0);long double stold(const string&amp; str, size_t* pos = 0); 11. 字符串的处理： 123456789101112void transform(const string&amp; str, string&amp; result, UnaryOperation op); // 将字符串中的每个字符应用一个一元操作，并将结果存储到另一个字符串中void transform(const string&amp; str1, const string&amp; str2, string&amp; result, BinaryOperation op); // 将两个字符串中的每个字符一一对应地应用一个二元操作，并将结果存储到另一个字符串中void replace_all(string&amp; str, const string&amp; from, const string&amp; to); // 替换字符串中的所有出现的一个子串为另一个子串void replace_all(string&amp; str, char from, char to); // 替换字符串中的所有出现的一个字符为另一个字符void replace_all(string&amp; str, const vector&lt;pair&lt;string, string&gt;&gt;&amp; replacements); // 替换字符串中的所有出现的多个子串为另一个子串void erase(string&amp; str, size_t pos, size_t len); // 删除字符串中从pos位置开始的len个字符void remove(string&amp; str, char); // 删除字符串中所有出现的指定字符void remove_if(string&amp; str, UnaryPredicate pred); // 删除字符串中满足指定条件的所有字符void reverse(string&amp; str); // 反转字符串中的字符顺序void shuffle(string&amp; str); // 将字符串中的字符随机打乱顺序void sort(string&amp; str); // 将字符串中的字符按字典顺序排序void unique(string&amp; str); // 删除字符串中连续出现的重复字符，只保留一个 12. 字符串的查找和定位： 12345678size_t find(const string&amp; str, const string&amp; substr, size_t pos = 0); // 在字符串中查找指定子串的第一个出现位置，从pos位置开始查找size_t find(const string&amp; str, char ch, size_t pos = 0); // 在字符串中查找指定字符的第一个出现位置，从pos位置开始查找size_t rfind(const string&amp; str, const string&amp; substr, size_t pos = string::npos); // 在字符串中查找指定子串的最后一个出现位置，从pos位置开始查找size_t rfind(const string&amp; str, char ch, size_t pos = string::npos); // 在字符串中查找指定字符的最后一个出现位置，从pos位置开始查找size_t find_first_of(const string&amp; str, const string&amp; chars, size_t pos = 0); // 在字符串中查找第一个与指定字符集中任意一个字符匹配的字符的位置，从pos位置开始查找size_t find_first_not_of(const string&amp; str, const string&amp; chars, size_t pos = 0); // 在字符串中查找第一个不与指定字符集中任何一个字符匹配的字符的位置，从pos位置开始查找size_t find_last_of(const string&amp; str, const string&amp; chars, size_t pos = string::npos); // 在字符串中查找最后一个与指定字符集中任意一个字符匹配的字符的位置，从pos位置开始查找size_t find_last_not_of(const string&amp; str, const string&amp; chars, size_t pos = string::npos); // 在字符串中查找最后一个不与指定字符集中任何一个字符匹配的字符的位置，从pos位置开始查找 这些函数可以用于查找和定位字符串中的子串或字符。find和rfind函数可以分别在字符串中从前往后或从后往前查找子串或字符的位置，find_first_of和find_last_of函数可以查找与指定字符集中任意一个字符匹配的字符的位置，find_first_not_of和find_last_not_of函数可以查找不与指定字符集中任何一个字符匹配的字符的位置。 13. 字符串的分割和拼接： 12vector&lt;string&gt; split(const string&amp; str, const string&amp; delimiter); // 将字符串按指定分隔符分割成多个子串，并存储到一个字符串向量中string join(const vector&lt;string&gt;&amp; strs, const string&amp; delimiter); // 将多个子串拼接成一个字符串，中间用指定分隔符隔开 split函数可以将一个字符串按照指定的分隔符分割成多个子串，并将这些子串存储到一个字符串向量中返回。join函数则可以将多个子串拼接成一个字符串，并使用指定的分隔符隔开。 14. 字符串的大小写转换： 12void to_lower(string&amp; str); // 将字符串中的所有字符转换为小写void to_upper(string&amp; str); // 将字符串中的所有字符转换为大写 这两个函数可以将字符串中的所有字符分别转换为小写或大写字母。 15. 字符串的格式化输出： 1234int printf(const char* format, ...); // 将格式化的字符串输出到标准输出流（stdout）int fprintf(FILE* stream, const char* format, ...); // 将格式化的字符串输出到指定文件流int sprintf(char* str, const char* format, ...); // 将格式化的字符串输出到指定字符缓冲区int snprintf(char* str, size_t size, const char* format, ...); // 将格式化的字符串输出到指定字符缓冲区，限制输出的最大长度 这些函数可以将格式化的字符串按指定格式输出到标准输出流、文件流或字符缓冲区中。这些函数的第一个参数是一个格式化字符串，其中包含了格式化指令和占位符，后面的可变参数列表则是要输出的实际内容。例如： 123456int a = 10;double b = 3.1415926;string str = &quot;hello&quot;;printf(&quot;a = %d, b = %.2lf, str = %s&quot;, a, b, str.c_str());// 输出：a = 10, b = 3.14, str = hello 这里的%d、%.2lf和%s都是格式化指令，分别表示输出整数、保留两位小数的浮点数和字符串。c_str()函数可以将一个string对象转换为一个C风格的字符串，以便在格式化输出时使用。 需要注意的是，这些函数都是C语言中的标准库函数，而不是C++标准库中的函数。在使用时需要包含对应的头文件，如&lt;cstdio&gt;、&lt;cstring&gt;等。此外，这些函数都没有进行格式字符串的类型检查，需要使用时要确保格式字符串和可变参数列表的类型匹配，否则可能会导致未定义行为。 16. 字符串的重复： 12345678910111213141516171819string&amp; assign(size_t n, char c); // 将字符串赋值为由n个c字符组成的字符串string&amp; assign(const string&amp; str); // 将字符串赋值为另一个字符串string&amp; append(size_t n, char c); // 将n个c字符追加到字符串末尾string&amp; append(const string&amp; str); // 将另一个字符串追加到字符串末尾string&amp; append(const string&amp; str, size_t subpos, size_t sublen); // 将另一个字符串的子串追加到字符串末尾string&amp; append(const char* s, size_t n); // 将指定长度的C风格字符串追加到字符串末尾string&amp; append(const char* s); // 将C风格字符串追加到字符串末尾string&amp; append(iterator first, iterator last); // 将[first,last)范围内的字符追加到字符串末尾string&amp; operator+=(const string&amp; str); // 将另一个字符串追加到字符串末尾，等价于调用append函数string&amp; operator+=(const char* s); // 将C风格字符串追加到字符串末尾，等价于调用append函数string&amp; operator+=(char c); // 将一个字符追加到字符串末尾，等价于调用push_back函数string&amp; insert(size_t pos, size_t n, char c); // 在指定位置插入由n个c字符组成的字符串string&amp; insert(size_t pos, const string&amp; str); // 在指定位置插入另一个字符串string&amp; insert(size_t pos, const string&amp; str, size_t subpos, size_t sublen); // 在指定位置插入另一个字符串的子串string&amp; insert(size_t pos, constchar* s, size_t n); // 在指定位置插入指定长度的C风格字符串string&amp; insert(size_t pos, const char* s); // 在指定位置插入C风格字符串iterator insert(iterator p, char c); // 在指定位置插入一个字符void insert(iterator p, size_t n, char c); // 在指定位置插入由n个c字符组成的字符串void insert(iterator p, iterator first, iterator last); // 在指定位置插入[first,last)范围内的字符 vector 1. 构造函数： 12345vector(); // 默认构造函数，创建一个空的vectorvector(size_type count, const T&amp; value = T()); // 创建一个包含count个元素，每个元素的值都为value的vectorvector(const vector&amp; other); // 复制构造函数，创建一个other的副本vector(vector&amp;&amp; other) noexcept; // 移动构造函数，创建一个other的右值引用的副本vector(initializer_list&lt;T&gt; init); // 创建一个包含initializer_list对象中元素的vector 2. 赋值运算符： 123vector&amp; operator=(const vector&amp; other); // 复制赋值运算符，将当前vector赋值为other的副本vector&amp; operator=(vector&amp;&amp; other) noexcept; // 移动赋值运算符，将当前vector赋值为other的右值引用的副本vector&amp; operator=(initializer_list&lt;T&gt; init); // 将当前vector赋值为initializer_list对象中元素 3. 容量相关操作： 123456bool empty() const noexcept; // 判断vector是否为空，如果为空则返回true，否则返回falsesize_type size() const noexcept; // 返回vector中元素的数量size_type max_size() const noexcept; // 返回vector最大可容纳的元素数量void reserve(size_type new_cap); // 将vector的容量调整为至少为new_cap的大小size_type capacity() const noexcept; // 返回vector当前的容量void shrink_to_fit(); // 将vector的容量调整为当前元素数量的大小 4. 访问元素： 12345678910reference operator[](size_type pos); // 访问vector中位于pos位置的元素const_reference operator[](size_type pos) const; // 访问vector中位于pos位置的元素（常量版本）reference at(size_type pos); // 访问vector中位于pos位置的元素，并进行边界检查。如果越界，则抛出std::out_of_range异常const_reference at(size_type pos) const; // 访问vector中位于pos位置的元素，并进行边界检查（常量版本）reference front(); // 返回vector中第一个元素的引用const_reference front() const; // 返回vector中第一个元素的引用（常量版本）reference back(); // 返回vector中最后一个元素的引用const_reference back() const; // 返回vector中最后一个元素的引用（常量版本）value_type* data() noexcept; // 返回指向vector中第一个元素的指针，如果vector为空，则返回nullptrconst value_type* data() const noexcept; // 返回指向vector中第一个元素的指针（常量版本） 5. 修改容器： 123456789101112131415void clear() noexcept; // 删除vector中所有元素iterator insert(const_iterator pos, const T&amp; value); // 在pos位置之前插入一个值为value的元素，并返回指向插入元素的迭代器iterator insert(const_iterator pos, T&amp;&amp; value); // 在pos位置之前插入一个右值引用为value的元素，并返回指向插入元素的迭代器iterator insert(const_iterator pos, size_type count, const T&amp; value); // 在pos位置之前插入count个值为value的元素，并返回指向第一个插入元素的迭代器template &lt;class InputIt&gt;iterator insert(const_iterator pos, InputIt first, InputIt last); // 在pos位置之前插入[first,last)范围内的元素，并返回指向第一个插入元素的迭代器iterator insert(const_iterator pos, initializer_list&lt;T&gt; ilist); // 在pos位置之前插入initializer_list对象中的元素，并返回指向第一个插入元素的迭代器iterator erase(const_iterator pos); // 删除pos位置处的元素，并返回指向下一个元素的迭代器iterator erase(const_iterator first, const_iterator last); // 删除[first,last)范围内的元素，并返回指向下一个元素的迭代器void push_back(const T&amp; value); // 在vector末尾插入一个值为value的元素void push_back(T&amp;&amp; value); // 在vector末尾插入一个右值引用为value的元素void pop_back(); // 删除vector末尾的元素void resize(size_type count); // 将vector的大小调整为count，并在必要时插入或删除元素void resize(size_type count, const value_type&amp; value); // 将vector的大小调整为count，并在必要时插入或删除元素，新增的元素值为valuevoid swap(vector&amp; other) noexcept; // 交换当前vector和other的元素 6. 迭代器相关操作： 123456789101112iterator begin() noexcept; // 返回指向第一个元素的迭代器const_iterator begin() const noexcept; // 返回指向第一个元素的迭代器（常量版本）const_iterator cbegin() const noexcept; // 返回指向第一个元素的迭代器（常量版本）iterator end() noexcept; // 返回指向vector末尾（下一个元素）的迭代器const_iterator end() const noexcept; // 返回指向vector末尾（下一个元素）的迭代器（常量版本）const_iterator cend() const noexcept; // 返回指向vector末尾（下一个元素）的迭代器（常量版本）reverse_iterator rbegin() noexcept; // 返回指向最后一个元素的迭代器const_reverse_iterator rbegin() const noexcept; // 返回指向最后一个元素的迭代器（常量版本）const_reverse_iterator crbegin() const noexcept; // 返回指向最后一个元素的迭代器（常量版本）reverse_iterator rend() noexcept; // 返回指向vector开头（前一个元素）的迭代器const_reverse_iterator rend() const noexcept; // 返回指向vector开头（前一个元素）的迭代器（常量版本）const_reverse_iterator crend() const noexcept; // 返回指向vector开头（前一个元素）的迭代器（常量版本） 7. 其他操作： 123456bool operator==(const vector&amp; lhs, const vector&amp; rhs); // 比较两个vector是否相等bool operator!=(const vector&amp; lhs, const vector&amp; rhs); // 比较两个vector是否不相等bool operator&lt;(const vector&amp; lhs, const vector&amp; rhs); // 比较两个vector的大小（字典序）bool operator&lt;=(const vector&amp; lhs, const vector&amp; rhs); // 比较两个vector的大小（字典序）bool operator&gt;(const vector&amp; lhs, const vector&amp; rhs); // 比较两个vector的大小（字典序）bool operator&gt;=(const vector&amp; lhs, const vector&amp; rhs); // 比较两个vector的大小（字典序） 8. 查找元素： 1234iterator find(const T&amp; value); // 在vector中查找值为value的元素，并返回指向该元素的迭代器，如果未找到则返回end()const_iterator find(const T&amp; value) const; // 在vector中查找值为value的元素，并返回指向该元素的迭代器（常量版本），如果未找到则返回end()template&lt;class Predicate&gt; iterator find_if(Predicate pred); // 在vector中查找满足谓词pred的第一个元素，并返回指向该元素的迭代器，如果未找到则返回end()template&lt;class Predicate&gt; const_iterator find_if(Predicate pred) const; // 在vector中查找满足谓词pred的第一个元素，并返回指向该元素的迭代器（常量版本），如果未找到则返回end() 9. 数值算法： 12345T accumulate(InputIt first, InputIt last, T init); // 对[first,last)范围内的元素进行累加，初始值为initT accumulate(InputIt first, InputIt last, T init, BinaryOp op); // 对[first,last)范围内的元素进行二元运算op的累加，初始值为initvoid sort(RandomIt first, RandomIt last); // 对[first,last)范围内的元素进行排序void sort(RandomIt first, RandomIt last, Compare comp); // 对[first,last)范围内的元素进行排序，使用比较函数comp进行排序bool binary_search(ForwardIt first, ForwardIt last, const T&amp; value); // 二分查找，查找[first,last)范围内是否存在值为value的元素 10. 与其他容器的转换： 12template&lt;class InputIt&gt; vector(InputIt first, InputIt last) -&gt; vector&lt;typename iterator_traits&lt;InputIt&gt;::value_type&gt;; // 将[first,last)范围内的元素复制到vector中template&lt;class T&gt; vector(initializer_list&lt;T&gt; init) -&gt; vector&lt;T&gt;; // 使用initializer_list对象中的元素创建vector 11. 自定义排序： 12template&lt;class Compare&gt; void sort(Compare comp); // 对vector中的元素进行排序，使用比较函数comp进行排序 1234567891011121314151617181920212223#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;// 自定义比较函数，按照字符串长度排序bool cmp(const std::string&amp; a, const std::string&amp; b) { return a.length() &lt; b.length();}int main() { std::vector&lt;std::string&gt; vec = {&quot;apple&quot;, &quot;banana&quot;, &quot;pear&quot;, &quot;orange&quot;}; // 对vector进行自定义比较函数排序 std::sort(vec.begin(), vec.end(), cmp); // 输出排序后的结果 for (const auto&amp; str : vec) { std::cout &lt;&lt; str &lt;&lt; &quot; &quot;; } std::cout &lt;&lt; std::endl; return 0;} 12. 与其他容器的交互： 12template&lt;class T, class Alloc&gt;void swap(vector&lt;T,Alloc&gt;&amp; x, vector&lt;T,Alloc&gt;&amp; y) noexcept; // 交换x和y的元素 12std::iter_swap(vec.begin() + 1, vec.begin() + 3);std::swap(vec[1], vec[3]); array 1. 构造函数： 12345array(); // 默认构造函数，创建一个空的arrayarray(const array&amp; other); // 复制构造函数，用other的副本构造一个新的arrayarray(array&amp;&amp; other) noexcept; // 移动构造函数，用other的右值引用构造一个新的arrayarray(const value_type&amp; value); // 构造一个包含N个元素的array，每个元素的值为valuearray(initializer_list&lt;value_type&gt; init); // 使用initializer_list对象中的元素创建array 2. 访问元素： 12345678910reference at(size_type pos); // 返回下标为pos的元素的引用，如果pos超出array的范围，抛出std::out_of_range异常const_reference at(size_type pos) const; // 返回下标为pos的元素的常量引用，如果pos超出array的范围，抛出std::out_of_range异常reference front(); // 返回array的第一个元素的引用const_reference front() const; // 返回array的第一个元素的常量引用reference back(); // 返回array的最后一个元素的引用const_reference back() const; // 返回array的最后一个元素的常量引用pointer data(); // 返回指向array中第一个元素的指针const_pointer data() const; // 返回指向array中第一个元素的常量指针reference operator[](size_type pos); // 返回下标为pos的元素的引用const_reference operator[](size_type pos) const; // 返回下标为pos的元素的常量引用 3. 修改元素： 12void fill(const value_type&amp; value); // 将所有元素的值设为valuevoid swap(array&amp; other); // 交换array中的元素和other中的元素 4. 容量和大小： 123size_type size() const; // 返回array中元素的个数，即Nbool empty() const; // 如果array为空，返回true，否则返回falsesize_type max_size() const; // 返回array最多可以容纳的元素个数，即N 5. 比较操作： 123456bool operator==(const array&amp; other) const; // 判断当前array和other是否相等bool operator!=(const array&amp; other) const; // 判断当前array和other是否不相等bool operator&lt;(const array&amp; other) const; // 判断当前array是否小于otherbool operator&lt;=(const array&amp; other) const; // 判断当前array是否小于等于otherbool operator&gt;(const array&amp; other) const; // 判断当前array是否大于otherbool operator&gt;=(const array&amp; other) const; // 判断当前array是否大于等于other 6. 插入和删除元素： std::array的容量是固定的，因此不能像std::vector那样插入或删除元素。 7. 迭代器： 123456789101112iterator begin(); // 返回指向第一个元素的迭代器const_iterator begin() const; // 返回指向第一个元素的常量迭代器const_iterator cbegin() const; // 返回指向第一个元素的常量迭代器iterator end(); // 返回指向最后一个元素的下一个位置的迭代器const_iterator end() const; // 返回指向最后一个元素的下一个位置的常量迭代器const_iterator cend() const; // 返回指向最后一个元素的下一个位置的常量迭代器reverse_iterator rbegin(); // 返回指向最后一个元素的迭代器const_reverse_iterator rbegin() const; // 返回指向最后一个元素的常量迭代器const_reverse_iterator crbegin() const; // 返回指向最后一个元素的常量迭代器reverse_iterator rend(); // 返回指向第一个元素的前一个位置的迭代器const_reverse_iterator rend() const; // 返回指向第一个元素的前一个位置的常量迭代器const_reverse_iterator crend() const; // 返回指向第一个元素的前一个位置的常量迭代器 8. 其他操作： 1void swap(array&amp; lhs, array&amp; rhs); // 交换lhs和rhs中的元素 注意：std::array的元素类型必须是可复制的（CopyAssignable），因为std::array的复制构造函数和赋值操作符会复制每个元素。如果元素类型不支持复制操作，则不能用于std::array。 deque 1. 构造函数： 1234567deque(); // 构造一个空的dequedeque(size_type count); // 构造一个包含count个元素的deque，元素的值为默认值deque(size_type count, const value_type&amp; value); // 构造一个包含count个元素的deque，元素的值为valuedeque(const deque&amp; other); // 复制构造函数，用other的副本构造一个新的dequedeque(deque&amp;&amp; other) noexcept; // 移动构造函数，用other的右值引用构造一个新的dequedeque(initializer_list&lt;value_type&gt; init); // 使用initializer_list对象中的元素创建dequetemplate&lt;class InputIt&gt; deque(InputIt first, InputIt last); // 从迭代器范围[first, last)中的元素创建deque 2. 插入和删除元素： 123456789101112void push_front(const value_type&amp; value); // 在deque的前面插入一个元素void push_back(const value_type&amp; value); // 在deque的后面插入一个元素void emplace_front(Args&amp;&amp;... args); // 在deque的前面插入一个元素，使用参数args构造元素void emplace_back(Args&amp;&amp;... args); // 在deque的后面插入一个元素，使用参数args构造元素void pop_front(); // 删除deque的第一个元素void pop_back(); // 删除deque的最后一个元素iterator insert(const_iterator pos, const value_type&amp; value); // 在pos处插入一个元素，并返回指向该元素的迭代器iterator insert(const_iterator pos, size_type count, const value_type&amp; value); // 在pos处插入count个值为value的元素，并返回指向第一个新元素的迭代器template&lt;class InputIt&gt; iterator insert(const_iterator pos, InputIt first, InputIt last); // 在pos处插入迭代器[first, last)中的元素，并返回指向第一个新元素的迭代器iterator erase(const_iterator pos); // 删除pos处的元素，并返回指向下一个元素的迭代器iterator erase(const_iterator first, const_iterator last); // 删除[first, last)范围内的元素，并返回指向下一个元素的迭代器void clear(); // 删除deque中的所有元素 3. 访问元素： 12345678reference front(); // 返回deque的第一个元素的引用const_reference front() const; // 返回deque的第一个元素的常量引用reference back(); // 返回deque的最后一个元素的引用const_reference back() const; // 返回deque的最后一个元素的常量引用reference operator[](size_type pos); // 返回下标为pos的元素的引用const_reference operator[](size_type pos) const; // 返回下标为pos的元素的常量引用reference at(size_type pos); // 返回下标为pos的元素的引用，如果pos超出deque的范围，抛出std::out_of_range异常const_reference at(size_type pos) const; // 返回下标为pos的元素的常量引用，如果pos超出deque的范围，抛出std::out_of_range异常 4. 容量和大小： 1234bool empty() const; // 如果deque为空，返回true，否则返回falsesize_type size() const; // 返回deque中的元素个数size_type max_size() const; // 返回deque最多可以容纳的元素个数void shrink_to_fit(); // 释放deque多余的内存，将它的capacity缩小到等于size 5. 迭代器： 123456789101112iterator begin(); // 返回指向第一个元素的迭代器const_iterator begin() const; // 返回指向第一个元素的常量迭代器const_iterator cbegin() const; // 返回指向第一个元素的常量迭代器iterator end(); // 返回指向最后一个元素的下一个位置的迭代器const_iterator end() const; // 返回指向最后一个元素的下一个位置的常量迭代器const_iterator cend() const; // 返回指向最后一个元素的下一个位置的常量迭代器reverse_iterator rbegin(); // 返回指向最后一个元素的迭代器const_reverse_iterator rbegin() const; // 返回指向最后一个元素的常量迭代器const_reverse_iterator crbegin() const; // 返回指向最后一个元素的常量迭代器reverse_iterator rend(); // 返回指向第一个元素的前一个位置的迭代器const_reverse_iterator rend() const; // 返回指向第一个元素的前一个位置的常量迭代器const_reverse_iterator crend() const; // 返回指向第一个元素的前一个位置的常量迭代器 6. 修改容量： 123void resize(size_type count); // 将deque的元素个数调整为count，多余的元素会被删除void resize(size_type count, const value_type&amp; value); // 将deque的元素个数调整为count，多余的元素会被删除，新元素的值为valuevoid reserve(size_type new_cap); // 将deque的容量调整为new_cap，如果new_cap小于等于deque当前的容量，该函数不会做任何操作 7. 比较操作： 123456bool operator==(const deque&amp; other) const; // 判断当前deque和other是否相等bool operator!=(const deque&amp; other) const; // 判断当前deque和other是否不相等bool operator&lt;(const deque&amp; other) const; // 判断当前deque是否小于otherbool operator&lt;=(const deque&amp; other) const; // 判断当前deque是否小于等于otherbool operator&gt;(const deque&amp; other) const; // 判断当前deque是否大于otherbool operator&gt;=(const deque&amp; other) const; // 判断当前deque是否大于等于other map 1. 构造函数： 1234567map(); // 构造一个空的mapmap(const map&amp; other); // 复制构造函数，用other的副本构造一个新的mapmap(map&amp;&amp; other) noexcept; // 移动构造函数，用other的右值引用构造一个新的mapmap(initializer_list&lt;value_type&gt; init); // 使用initializer_list对象中的元素创建maptemplate&lt;class InputIt&gt; map(InputIt first, InputIt last); // 从迭代器范围[first, last)中的元素创建maptemplate&lt;class Compare&gt; map(const Compare&amp; comp); // 构造一个空的map，并使用比较函数comp进行元素比较template&lt;class Compare&gt; map(const Compare&amp; comp, const allocator_type&amp; alloc); // 构造一个空的map，并使用比较函数comp进行元素比较，使用分配器alloc分配内存 2. 插入和删除元素： 12345678pair&lt;iterator, bool&gt; insert(const value_type&amp; value); // 在map中插入一个元素，返回一个pair对象，第一个元素是指向新元素的迭代器，第二个元素表示插入是否成功iterator insert(const_iterator hint, const value_type&amp; value); // 在hint处插入一个元素，返回指向新元素的迭代器void insert(initializer_list&lt;value_type&gt; init); // 使用initializer_list对象中的元素插入maptemplate&lt;class InputIt&gt; void insert(InputIt first, InputIt last); // 插入迭代器范围[first, last)中的元素void erase(iterator pos); // 删除pos处的元素size_type erase(const key_type&amp; key); // 删除键为key的元素，返回删除的元素个数void erase(iterator first, iterator last); // 删除[first, last)范围内的元素void clear(); // 删除map中的所有元素 3. 访问元素： 1234567mapped_type&amp; operator[](const key_type&amp; key); // 返回键为key的元素的引用，如果key不存在，会插入一个键为key，值为mapped_type()的新元素mapped_type&amp; at(const key_type&amp; key); // 返回键为key的元素的引用，如果key不存在，抛出std::out_of_range异常const mapped_type&amp; at(const key_type&amp; key) const; // 返回键为key的元素的常量引用，如果key不存在，抛出std::out_of_range异常iterator find(const key_type&amp; key); // 查找键为key的元素，返回指向该元素的迭代器，如果key不存在，返回map::end()const_iterator find(const key_type&amp; key) const; // 查找键为key的元素，返回指向该元素的常量迭代器，如果key不存在，返回map::end()size_type count(const key_type&amp; key) const; // 返回键为key的元素的个数，因为map中每个键最多只能对应一个元素，因此返回值只可能是0或1bool contains(const key_type&amp; key) const; // 判断map中是否包含键为key的元素，等价于count(key) != 0 4. 迭代器： 123456789101112iterator begin(); // 返回指向第一个元素的迭代器const_iterator begin() const; // 返回指向第一个元素的常量迭代器const_iterator cbegin() const; // 返回指向第一个元素的常量迭代器iterator end(); // 返回指向最后一个元素的下一个位置的迭代器const_iterator end() const; // 返回指向最后一个元素的下一个位置的常量迭代器const_iterator cend() const; // 返回指向最后一个元素的下一个位置的常量迭代器reverse_iterator rbegin(); // 返回指向最后一个元素的迭代器const_reverse_iterator rbegin() const; // 返回指向最后一个元素的常量迭代器const_reverse_iterator crbegin() const; // 返回指向最后一个元素的常量迭代器reverse_iterator rend(); // 返回指向第一个元素的前一个位置的迭代器const_reverse_iterator rend()const; // 返回指向第一个元素的前一个位置的常量迭代器const_reverse_iterator crend() const; // 返回指向第一个元素的前一个位置的常量迭代器 5. 容量： 123bool empty() const; // 判断map是否为空，即是否含有任何元素size_type size() const; // 返回map中元素的个数size_type max_size() const; // 返回map中最大元素个数，取决于分配器和计算机架构 6. 比较和交换： 123bool operator==(const map&amp; other) const; // 判断当前map是否等于另一个mapbool operator!=(const map&amp; other) const; // 判断当前map是否不等于另一个mapvoid swap(map&amp; other); // 交换当前map和另一个map中的元素 7. 分配器： 1allocator_type get_allocator() const; // 返回当前map使用的分配器对象 8. 键和值的访问： 123456key_compare key_comp() const; // 返回当前map使用的键比较函数value_compare value_comp() const; // 返回当前map使用的元素比较函数const key_type&amp; rbegin() const; // 返回map中最小的键const key_type&amp; rend() const; // 返回map中最大的键const mapped_type&amp; front() const; // 返回map中最小的值const mapped_type&amp; back() const; // 返回map中最大的值 9. 辅助函数： 12345bool empty() const; // 判断map是否为空，即是否含有任何元素size_type size() const; // 返回map中元素的个数size_type max_size() const; // 返回map中最大元素个数，取决于分配器和计算机架构void clear(); // 删除map中的所有元素void swap(map&amp; other); // 交换当前map和另一个map中的元素 10. 相邻元素的访问： 123456iterator lower_bound(const key_type&amp; key); // 返回一个迭代器，指向第一个大于等于key的元素const_iterator lower_bound(const key_type&amp; key) const; // 返回一个常量迭代器，指向第一个大于等于key的元素iterator upper_bound(const key_type&amp; key); // 返回一个迭代器，指向第一个大于key的元素const_iterator upper_bound(const key_type&amp; key) const; // 返回一个常量迭代器，指向第一个大于key的元素pair&lt;iterator, iterator&gt; equal_range(const key_type&amp; key); // 返回一个pair对象，第一个元素是迭代器，指向第一个等于key的元素，第二个元素是迭代器，指向第一个大于key的元素pair&lt;const_iterator, const_iterator&gt; equal_range(const key_type&amp; key) const; // 返回一个pair对象，第一个元素是常量迭代器，指向第一个等于key的元素，第二个元素是常量迭代器，指向第一个大于key的元素 11. 比较运算符： 1234bool operator&lt;(const map&amp; other) const; // 判断当前map是否小于另一个mapbool operator&lt;=(const map&amp; other) const; // 判断当前map是否小于等于另一个mapbool operator&gt;(const map&amp; other) const; // 判断当前map是否大于另一个mapbool operator&gt;=(const map&amp; other) const; // 判断当前map是否大于等于另一个map 12. 按照键，值排序 1234567891011121314151617#include &lt;map&gt;#include &lt;string&gt;#include &lt;iostream&gt;struct MyCompare { bool operator()(const std::string&amp; lhs, const std::string&amp; rhs) const { return lhs.size() &lt; rhs.size(); // 按照字符串长度升序排序 }};int main() { std::map&lt;std::string, int, MyCompare&gt; myMap = {{&quot;abc&quot;, 1}, {&quot;defg&quot;, 2}, {&quot;hijkl&quot;, 3}}; for (const auto&amp; kv : myMap) { std::cout &lt;&lt; kv.first &lt;&lt; &quot; -&gt; &quot; &lt;&lt; kv.second &lt;&lt; std::endl; } return 0;} 1234567891011121314151617181920212223242526#include &lt;map&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;#include &lt;iostream&gt;template &lt;typename K, typename V&gt;std::vector&lt;std::pair&lt;K, V&gt;&gt; sort_map_by_value(const std::map&lt;K, V&gt;&amp; map) { std::vector&lt;std::pair&lt;K, V&gt;&gt; vec; vec.reserve(map.size()); for (const auto&amp; kv : map) { vec.emplace_back(kv.first, kv.second); } std::sort(vec.begin(), vec.end(), [](const auto&amp; lhs, const auto&amp; rhs) { return lhs.second &lt; rhs.second; }); return vec;}int main() { std::map&lt;std::string, int&gt; myMap = {{&quot;foo&quot;, 2}, {&quot;bar&quot;, 5}, {&quot;baz&quot;, 1}}; auto sortedVec = sort_map_by_value(myMap); for (const auto&amp; kv : sortedVec) { std::cout &lt;&lt; kv.first &lt;&lt; &quot; -&gt; &quot; &lt;&lt; kv.second &lt;&lt; std::endl; } return 0;} 13. 运算符重载 1234567891011121314class MyInt {public: MyInt(int value = 0) : value_(value) {} int value() const { return value_; }private: int value_; friend MyInt operator+(const MyInt&amp; lhs, const MyInt&amp; rhs);};MyInt operator+(const MyInt&amp; lhs, const MyInt&amp; rhs) { return MyInt(lhs.value_ + rhs.value_);} set 1. 插入元素 insert(val)：向std::set中插入一个值为val的元素。 insert(first, last)：向std::set中插入区间[first, last)中的所有元素。 emplace(args...)：通过传递参数args构造一个新的元素，并将其插入std::set中。 emplace_hint(hint, args...)：通过传递参数args构造一个新的元素，并将其插入std::set中。插入位置的提示迭代器为hint。 2. 删除元素 erase(val)：从std::set中删除值为val的元素。 erase(pos)：从std::set中删除迭代器pos指向的元素。 erase(first, last)：从std::set中删除区间[first, last)中的所有元素。 clear()：删除std::set中的所有元素。 3. 访问元素 find(val)：查找值为val的元素，返回该元素的迭代器，如果不存在，则返回std::set::end()。 count(val)：返回std::set中值为val的元素的个数，由于std::set中元素的值都不相同，因此返回值只能是0或1。 lower_bound(val)：返回一个迭代器，指向std::set中第一个不小于val的元素。 upper_bound(val)：返回一个迭代器，指向std::set中第一个大于val的元素。 equal_range(val)：返回一个std::pair对象，该对象包含两个迭代器。第一个迭代器指向std::set中第一个等于val的元素，如果不存在，则指向下一个大于val的元素；第二个迭代器指向std::set中第一个大于val的元素。 4. 容量和状态 size()：返回std::set中元素的个数。 empty()：如果std::set为空，则返回true，否则返回false。 5. 迭代器 begin()：返回指向std::set中第一个元素的迭代器。 end()：返回指向std::set中最后一个元素之后的迭代器。 rbegin()：返回指向std::set中最后一个元素的迭代器。 rend()：返回指向std::set中第一个元素之前的迭代器。 6. 其他操作 swap(otherSet)：交换std::set和otherSet中的元素。 12set1.swap(set2);std::swap(set1, set2); multimap std::multimap是C++ STL中的一个关联容器，用于存储一组按照某种规则排序的键值对，并且允许键值可以重复。下面是std::multimap支持的所有操作： 1. 插入元素 insert(val)：向std::multimap中插入一个值为val的键值对。 insert(first, last)：向std::multimap中插入区间[first, last)中的所有键值对。 emplace(args...)：通过传递参数args构造一个新的键值对，并将其插入std::multimap中。 emplace_hint(hint, args...)：通过传递参数args构造一个新的键值对，并将其插入std::multimap中。插入位置的提示迭代器为hint。 2. 删除元素 erase(key)：从std::multimap中删除所有键为key的键值对。 erase(pos)：从std::multimap中删除迭代器pos指向的键值对。 erase(first, last)：从std::multimap中删除区间[first, last)中的所有键值对。 clear()：删除std::multimap中的所有键值对。 3. 访问元素 find(key)：查找键为key的第一个键值对，返回该键值对的迭代器，如果不存在，则返回std::multimap::end()。 count(key)：返回std::multimap中键为key的键值对的个数。 lower_bound(key)：返回一个迭代器，指向std::multimap中第一个键不小于key的键值对。 upper_bound(key)：返回一个迭代器，指向std::multimap中第一个键大于key的键值对。 equal_range(key)：返回一个std::pair对象，该对象包含两个迭代器。第一个迭代器指向std::multimap中第一个键等于key的键值对，如果不存在，则指向下一个大于key的键值对；第二个迭代器指向std::multimap中第一个大于key的键值对。 4. 容量和状态 size()：返回std::multimap中键值对的个数。 empty()：如果std::multimap为空，则返回true，否则返回false。 5. 迭代器 begin()：返回指向std::multimap中第一个键值对的迭代器。 end()：返回指向std::multimap中最后一个键值对之后的迭代器。 rbegin()：返回指向std::multimap中最后一个键值对的迭代器。 rend()：返回指向std::multimap中第一个键值对之前的迭代器。 6. 其他操作 swap(otherMultimap)：交换std::multimap和otherMultimap中的键值对。 需要注意的是，std::multimap中的元素可以根据键值进行排序，因此插入、删除和查找元素的复杂度取决于排序规则。如果需要根据值对进行排序，并且不允许键值重复，可以使用std::map。 12345678910111213141516171819202122232425#include &lt;iostream&gt;#include &lt;map&gt;// 自定义比较函数，按照键值从大到小进行排序bool compare(int a, int b) { return a &gt; b;}int main() { std::multimap&lt;int, std::string, decltype(compare)*&gt; myMap(compare); // 向 multimap 中插入元素 myMap.insert(std::make_pair(1, &quot;apple&quot;)); myMap.insert(std::make_pair(2, &quot;banana&quot;)); myMap.insert(std::make_pair(3, &quot;cherry&quot;)); myMap.insert(std::make_pair(2, &quot;date&quot;)); myMap.insert(std::make_pair(4, &quot;elderberry&quot;)); // 输出 multimap 中的元素 for (auto it = myMap.begin(); it != myMap.end(); ++it) { std::cout &lt;&lt; it-&gt;first &lt;&lt; &quot;: &quot; &lt;&lt; it-&gt;second &lt;&lt; std::endl; } return 0;} stack 1. 容器适配器操作： stack()：创建一个空的std::stack。 stack(c)：创建一个std::stack，它包含容器c中的所有元素。 empty()：如果std::stack为空，则返回true，否则返回false。 size()：返回std::stack中的元素个数。 swap(otherStack)：将std::stack和otherStack中的元素进行交换。 2. 元素访问操作： top()：返回std::stack顶部的元素的引用（不弹出）。 emplace(args...)：通过传递参数args构造一个新的元素，并将其压入std::stack的顶部。 push(val)：将值为val的元素压入std::stack的顶部。 pop()：弹出std::stack顶部的元素。 forward_list std::forward_list是C++ STL中的一个单向链表容器，它支持在常量时间内在链表前端（头部）插入和删除元素，但在链表中间或末尾进行插入和删除操作的复杂度为线性时间。下面是std::forward_list支持的所有操作： 1. 迭代器操作： begin()：返回指向链表第一个元素的迭代器。 end()：返回指向链表最后一个元素之后的迭代器。 cbegin()：返回指向链表第一个元素的const迭代器。 cend()：返回指向链表最后一个元素之后的const迭代器。 2. 容器操作： empty()：如果std::forward_list为空，则返回true，否则返回false。 size()：返回std::forward_list中元素的个数。 max_size()：返回std::forward_list中可以容纳的最大元素数量。 3. 访问元素操作： front()：返回链表的第一个元素的引用。 before_begin()：返回链表中第一个元素之前的位置的迭代器。 cbefore_begin()：返回链表中第一个元素之前的位置的const迭代器。 4. 修改容器操作： clear()：删除std::forward_list中的所有元素。 emplace_after(pos, args...)：在迭代器pos之后插入一个新元素，使用参数args构造元素。 erase_after(pos)：删除迭代器pos之后的元素。 erase_after(first, last)：删除区间[first, last)中的所有元素。 insert_after(pos, val)：在迭代器pos之后插入一个值为val的新元素。 insert_after(pos, n, val)：在迭代器pos之后插入n个值为val的新元素。 insert_after(pos, first, last)：在迭代器pos之后插入区间[first, last)中的所有元素。 emplace_front(args...)：在链表头部插入一个新元素，使用参数args构造元素。 pop_front()：删除链表头部的元素。 push_front(val)：在链表头部插入一个值为val的新元素。 resize(count)：将链表的大小调整为count，多余的元素将被删除。 resize(count, val)：将链表的大小调整为count，不足的元素将使用值为val的新元素进行补充。 reverse()：颠倒链表中的元素顺序。 sort()：对链表中的元素进行排序。 需要注意的是，由于std::forward_list是一个单向链表容器，它不支持像双向链表那样直接访问前一个元素。如果需要访问前一个元素，可以使用before_begin()操作获得一个迭代器，该迭代器指向链表中第一个元素之前的位置。在此基础上，可以使用++操作符来访问链表中的元素。 list std::list是C++ STL中的一个双向链表容器，它支持在常量时间内在链表前后端插入和删除元素，并且可以在常量时间内访问任意位置的元素。下面是std::list支持的所有操作： 1. 迭代器操作： begin()：返回指向链表第一个元素的迭代器。 end()：返回指向链表最后一个元素之后的迭代器。 rbegin()：返回指向链表最后一个元素的反向迭代器。 rend()：返回指向链表第一个元素之前的反向迭代器。 2. 容器操作： empty()：如果std::list为空，则返回true，否则返回false。 size()：返回std::list中元素的个数。 max_size()：返回std::list中可以容纳的最大元素数量。 3. 访问元素操作： front()：返回链表的第一个元素的引用。 back()：返回链表的最后一个元素的引用。 4. 修改容器操作： clear()：删除std::list中的所有元素。 emplace(pos, args...)：在迭代器pos之前插入一个新元素，使用参数args构造元素。 erase(pos)：删除迭代器pos处的元素。 erase(first, last)：删除区间[first, last)中的所有元素。 insert(pos, val)：在迭代器pos之前插入一个值为val的新元素。 insert(pos, n, val)：在迭代器pos之前插入n个值为val的新元素。 insert(pos, first, last)：在迭代器pos之前插入区间[first, last)中的所有元素。 emplace_back(args...)：在链表尾部插入一个新元素，使用参数args构造元素。 emplace_front(args...)：在链表头部插入一个新元素，使用参数args构造元素。 pop_back()：删除链表尾部的元素。 pop_front()：删除链表头部的元素。 push_back(val)：在链表尾部插入一个值为val的新元素。 push_front(val)：在链表头部插入一个值为val的新元素。 resize(count)：将链表的大小调整为count，多余的元素将被删除。 resize(count, val)：将链表的大小调整为count，不足的元素将使用值为val的新元素进行补充。 reverse()：颠倒链表中的元素顺序。 sort()：对链表中的元素进行排序。 需要注意的是，由于std::list是一个双向链表容器，它支持在常量时间内在链表前后端插入和删除元素，并且可以在常量时间内访问任意位置的元素。在此基础上，它还支持反向迭代器的操作，因此可以在从后往前遍历链表时使用反向迭代器。 下面是一个示例，演示了std::list的基本操作： 1234567891011121314151617181920212223242526272829303132#include &lt;iostream&gt;#include &lt;list&gt;int main() { std::list&lt;int&gt; myList; // 插入元素 myList.push_back(1); myList.push_back(2); myList.push_back(3); myList.push_front(0); // 输出所有元素 for (auto it = myList.begin(); it != myList.end(); ++it) { std::cout &lt;&lt; *it &lt;&lt; std::endl; } // 删除元素 myList.pop_back(); myList.pop_front(); // 插入元素 myList.insert(myList.begin(), 4); myList.emplace_back(5); // 输出所有元素 for (auto it = myList.begin(); it != myList.end(); ++it) { std::cout &lt;&lt; *it &lt;&lt; std::endl; } return 0;} 在上面的示例中，我们创建了一个std::list对象myList，并向其中压入一些元素。然后，我们使用迭代器遍历myList中的所有元素，并使用pop_back()和pop_front()操作删除链表尾部和头部的元素。接下来，我们使用insert()和emplace_back()操作在链表中插入新元素，并再次使用迭代器遍历myList中的所有元素，输出它们的值。 需要注意的是，std::list的操作大多数都是针对链表头尾的操作，因此它在某些场景下比较高效。同时，由于它是一个双向链表容器，支持在常量时间内访问任意位置的元素，因此它在某些场景下也比较实用。","link":"/2023/09/17/STL/"},{"title":"Git学习","text":"下面主要是记录一下Git间接性学习过程 1.基本介绍 所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地提交，只需在连网时push到相应的服务器或其他用户那里 2. 基本Linux命令 12345678910111213141516clear 清屏。cd 改变目录。cd . . 回退到上一个目录，直接cd进入默认目录pwd 显示当前所在的目录路径。ls(ll) 都是列出当前目录中的所有文件，只不过ll(两个ll)列出的内容更为详细touch 新建一个文件 如 touch index.js 就会在当前目录下新建一个index.js文件rm 删除一个文件, rm index.js 就会把index.js文件删除mkdir 新建一个目录,就是新建一个文件夹rm -r 删除一个文件夹, rm -r src 删除src目录rm -rf / 删除电脑中全部文件mv 移动文件reset 重新初始化终端/清屏。clear 清屏history 查看命令历史help 帮助exit 退出# 表示注释 3. 基本理论 工作目录(Working Directory):平时存放项目代码的地方 暂存区(Stage/Index):事实上它只是一个文件 资源库(Repository或Git Directory):有提交到所有版本的数据 远程的git仓库(Remote Directory):托管代码的服务器 4. 文件的四种状态 Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged. Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用git rm移出版本库, 则成为Untracked文件 Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改 Staged: 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存, 文件状态为Modified 5. 忽略格式 12345*.txt #忽略所有 .txt结尾的文件,这样的话上传就不会被选中！!lib.txt #但lib.txt除外/temp #仅忽略项目根目录下的TODO文件,不包括其它目录tempbuild/ #忽略build/目录下的所有文件doc/*.txt #会忽略 doc/notes.txt 但不包括 doc/server/arch.txt 6. 分支 123456789101112131415# 列出所有本地分支git branch# 列出所有远程分支git branch -r# 新建一个分支，但依然停留在当前分支git branch [branch-name]# 新建一个分支，并切换到该分支git checkout -b [branch]# 合并指定分支到当前分支$ git merge [branch]# 删除分支$ git branch -d [branch-name]# 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote/branch] 7. Git ignore清除缓存 1234cd `项目目录`git rm -r --cached .git add .git commit -m 'update .gitignore'","link":"/2023/09/11/git%E5%AD%A6%E4%B9%A0/"},{"title":"二叉树","text":"二叉树 ![[/Assets/image-20240401150543097.png]]","link":"/2023/11/13/%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"title":"其他补充","text":"算法其他补充 加快读取速度：ios::sync _with_stdio(false): lower_bound( begin,end,num)：从数组的begin位置到end-1位置二分查找第一个大于或等于num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。 upper_bound( begin,end,num)：从数组的begin位置到end-1位置二分查找第一个大于num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。 lower_bound( begin,end,num,greater&lt;type&gt;()):从数组的begin位置到end-1位置二分查找第一个小于或等于num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。 upper_bound( begin,end,num,greater&lt;type&gt;()):从数组的begin位置到end-1位置二分查找第一个小于num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。","link":"/2023/09/19/%E5%85%B6%E4%BB%96/"},{"title":"位运算","text":"判断奇偶： 奇：(x &amp; 1) == 1 ⟺ (x &amp; 1) != 0 偶：(x &amp; 1) == 0 ⟺ (x &amp; 1) != 1 乘（或除）以 2 的幂次： x &gt;&gt; n ⟺ x / 2^n x &lt;&lt; n ⟺ x * 2^n 去除最后一位 1：x &amp; (x - 1) 得到最后一位 1：x &amp; -x 判断 2 的幂次：x &amp; (x - 1) == 0 交换两个数：a ^= b; b ^= a; a ^= b; 交换符号：~x + 1 ⟺ -x 取绝对值：(x ^ x &gt;&gt; size(x) - 1) - (x &gt;&gt; size(x) - 1) ⟺ x &lt; 0 ? -x : x 构造 n 个 1：(1 &lt;&lt; n) - 1 将最左边的 n 位清零：x &amp; (~0 &lt;&lt; n) 获取 x 的第 n 位值（0 或 1）：(x &gt;&gt; n) &amp; 1 获取 x 的第 n 位的幂值：x &amp; (1 &lt;&lt; n) 仅将第 n 位置为 1：x | (1 &lt;&lt; n) 仅将第 n 位置为 0：x &amp; (~(1 &lt;&lt; n)) 将 x 最高位至第 n 位（含）清零：x &amp; ((1 &lt;&lt; n) - 1) 将第 n 位至第 0 位（含）清零：x &amp; (~((1 &lt;&lt; (n + 1)) - 1)) 取反第 n 位：x ^ (1 &lt;&lt; n) 异或满足交换律、结合律：a ^ b ^ a = b ^ (a ^ a) = b ^ 0 = b","link":"/2024/06/02/%E4%BD%8D%E8%BF%90%E7%AE%97/"},{"title":"其他DP","text":"区间DP；计数类DP；数位统计DP；状态压缩DP；树形DP；记忆化搜索 区间DP AcWing 282. 石子合并 f(i,j)f(i,j)f(i,j)表示从第iii堆石子到第jjj堆石子合并成一堆的所有方式中，合并代价最小的MINMINMIN 代价就是f[i][k]+f[k+1][j]+s[j]−s[i−1]k=i∼j−1f[i][k]+f[k+1][j]+s[j]-s[i-1]\\quad k=i \\sim j-1f[i][k]+f[k+1][j]+s[j]−s[i−1]k=i∼j−1，后面用前缀和 ![[/Assets/image-20240401145504006.png|450]] 数位统计DP 强调分情况讨论！ AcWing 338. 计数问题 题目：对于1∼nn=abcdefg1 \\sim n \\quad n=abcdefg1∼nn=abcdefg，需要求出1∼91 \\sim 91∼9在出现在全部数字的每一位的次数总和 eg：n=11，则全部数字为1,2,3…11，则1在1中出现1次，在10中出现1次，在11中出现2次；2在2中出现一次… 最终得到1出现总次数为4，2出现总次数为1… 例如n=abcdefgn=abcdefgn=abcdefg，可以先求1在第4位上面出现次数，下面是分情况讨论：1&lt;=xxx1yyy&lt;=abcdefg1&lt;=xxx1yyy&lt;=abcdefg1&lt;=xxx1yyy&lt;=abcdefg，其中就是求xxx1yyyxxx1yyyxxx1yyy有多少个 xxx=000∼abc−1xxx=000 \\sim abc-1xxx=000∼abc−1，则yyy=000∼999yyy=000 \\sim 999yyy=000∼999，有abc∗1000abc*1000abc∗1000种 xxx=abcxxx=abcxxx=abc d&lt;1d&lt;1d&lt;1，则abc1yyy&gt;abc0efgabc1yyy&gt;abc0efgabc1yyy&gt;abc0efg，有0种 d=1d=1d=1，则yy000∼efgyy000 \\sim efgyy000∼efg，有efg+1efg+1efg+1种 d&gt;1d&gt;1d&gt;1，则yyy=000∼999yyy=000 \\sim 999yyy=000∼999，有100010001000种 然后求出1在所有位上出现的次数相加-&gt;1∼91 \\sim 91∼9都可以这么求 状态压缩DP AcWing 291. 蒙德里安的梦想 f(i,j)f(i,j)f(i,j)表示的是第iii列是第jjj种格子摆放状态时的所有方式的总和SUMSUMSUM 例子如下： 首先因为横着放的格子放满之后，竖着放的格子就自然放了，所以只考虑横着的 下图为f[i,j],j=00001,k=10010f[i,j],j=00001,k=10010f[i,j],j=00001,k=10010时的情况；j,kj,kj,k分别指格子在i,i−1i,i-1i,i−1列的占用状态(格子的第二个)，用二进制表示 jjj和kkk要满足条件 两列不能重合：j&amp;k==0j\\&amp;k==0j&amp;k==0 竖着放的格子需要两个：j∥kj\\|kj∥k不存在连续奇数个0 ![[/Assets/700ef16fa06e3e8bb5001e3a2adc4400_MD5.jpeg|350]] AcWing 91. 最短Hamilton路径 f(i,j)f(i,j)f(i,j)表示的所有从000走到iii走过的所有点是jjj的所有方式中，距离最小的MINMINMIN ![[/Assets/8d38e9ee63dc30e629a9b69547dd5819_MD5.jpeg|500]] 树形DP AcWing 285. 没有上司的舞会 有两个状态f(u,0),f(u,1)f(u,0),f(u,1)f(u,0),f(u,1)，f(u,0)f(u,0)f(u,0)表示的是不选择uuu这个点的所有方案获得值的最大值，f(u,1)f(u,1)f(u,1)表示的是选择uuu这个点的所有方案获得值的最大值MAXMAXMAX sis_isi​是uuu的所有儿子 f(u,0)=∑max(f(si,0),f(si,1))f(u,0)=\\sum max(f(s_i,0),f(s_i,1))f(u,0)=∑max(f(si​,0),f(si​,1)) f(u,1)=∑f(si,0)f(u,1)=\\sum f(s_i,0)f(u,1)=∑f(si​,0) 选择上司就下属就不会再被选了 记忆化搜索 AcWing 901. 滑雪 f(i,j)f(i,j)f(i,j)表示的是从(i,j)(i,j)(i,j)开始滑所有路径的最大值MAXMAXMAX 代码复杂度会降低 ![[/Assets/image-20240401145758353.png|400]]","link":"/2023/09/14/%E5%85%B6%E4%BB%96DP/"},{"title":"动态规划","text":"动态规划 动态规划5步曲： 确定dp数组（dp table）以及下标的含义 确定递推公式 dp数组如何初始化 确定遍历顺序 举例推导dp数组 问题分类： 背包问题 劫舍系列 股票系列 子序列问题 编辑距离问题","link":"/2023/11/18/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"},{"title":"区间问题","text":"区间选点；最大不相交区间数量；区间分组；区间覆盖 主要难点在于证明 + 多做题找思路 AcWing 905. 区间选点 &amp; AcWing 908. 最大不相交区间数量 选择尽可能少的点能够覆盖所有的区间；选择尽量多的区间没有交集 做法 将每个区间按照右端点从小到大排序 从前往后枚举每个区间 如果当前区间已经包含点，则直接过 否则，选择当前区间的右端点 ![[/Assets/2d5f96f263796b3e8aa363ac513d839e_MD5.jpeg]] AcWing 906. 区间分组 将区间分为尽量少的组，让组内部区间没有交集 做法 将每个区间按照左端点从小到大排序 从前往后枚举每个区间 如果能放到某个组中li&gt;max(rj)l_i&gt;max(r_j)li​&gt;max(rj​)，则放入并更新max(rj)max(r_j)max(rj​) 否则开新组，将其放入 ![[/Assets/694b2c7b5ac6460d6364939d8a6dba91_MD5.jpeg]] AcWing 907. 区间覆盖 给定多个区间，指定一个线段，选择尽可能少的区间覆盖线段 做法 将每个区间按照左端点从小到大排序 从前往后枚举每个区间 选择能覆盖起点的右端点最大的区间 将起点更新成右端点最大值 [[/Assets/5dcac4d633c18dd2f8a7c0e4212ef4f2_MD5.jpeg|Open: image-20240401150643110.png]] ![[/Assets/5dcac4d633c18dd2f8a7c0e4212ef4f2_MD5.jpeg]]","link":"/2023/09/15/%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/"},{"title":"基础算法","text":"二分；高精度；前缀和与差分；双指针算法；位运算；离散化 二分 整数二分 有两个模版：求红绿的边界点，一定能求出边界点，之后根据边界点的数得到题目有无解； 比如查找一个数，check如果是右边模版则为q[mid]&gt;=target；如果是左边模版则为q[mid]&lt;=target 1234567891011121314151617181920212223242526272829// 补上加1：如果l=r-1，则mid=l+r向下取整=l，则l=l，会死循环// check =&gt; l=mid/r=mid =&gt; 是否要补上+1// 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用int bsearch_1(int l,int r){ while(l &lt; r) { int mid = l + r &gt;&gt;1; // check 是否满足绿颜色的性质 if(check(mid)) r = mid; else l = mid + 1; } return l;}// 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用int bsearch_2(int l,int r){ while(l &lt; r) { // 区别，如果更新的是l=mid,则mid需要加上1 int mid = l + r + 1 &gt;&gt;1; // check 是否满足红颜色的性质 if(check(mid)) l = mid; else r = mid - 1; } return l;} 浮点数二分 直接判断r−lr-lr−l的范围，例如r−l&gt;=1e−6r-l&gt;=1e-6r−l&gt;=1e−6 没有+1,−1+1,-1+1,−1，直接l=mid,r=midl=mid,r=midl=mid,r=mid 或者不用判断r−lr-lr−l，直接循环100100100次 高精度 当输入的数很大时，可采用字符串方式接收 拆成一位一位的数字，把它们存在一个数组中，一个数组元素表示一位数字 数组从左到右依次为从低位到高位，因为加法可能会产生进位，而数组在最前面加上数字是不可能的，但在尾巴处加上数字是好做的 有+−×÷模版 前缀和与差分 前缀和 一维公式： si=a1+a2+...+ais0=0s_i=a_1+a_2+...+a_i \\quad s_0=0si​=a1​+a2​+...+ai​s0​=0 ai+...+aj=sj−sia_i+...+a_j=s_j-s_iai​+...+aj​=sj​−si​ 二维公式： s[i][j]=s[i−1][j]+s[i][j−1]−s[i−1][j−1]+a[i][j]s[i][j]=s[i-1][j]+s[i][j-1]-s[i-1][j-1]+a[i][j]s[i][j]=s[i−1][j]+s[i][j−1]−s[i−1][j−1]+a[i][j] a[x1][y1]+...+a[x2][y2]=s[x2][y2]−s[x1−1][y2]−s[x2][y1−1]+s[x1−1][y1−1]a[x1][y1]+...+a[x2][y2]=s[x2][y2]-s[x1-1][y2]-s[x2][y1-1]+s[x1-1][y1-1]a[x1][y1]+...+a[x2][y2]=s[x2][y2]−s[x1−1][y2]−s[x2][y1−1]+s[x1−1][y1−1] 差分 一维公式： bi=ai−ai−1b_i=a_i-a_{i-1}bi​=ai​−ai−1​ ai=b1+b2+...bia_i=b_1+b_2+...b_iai​=b1​+b2​+...bi​ 当需要在ai...aja_i...a_jai​...aj​之间所有数都加上ccc，则只需要bi+c,bj+1−cb_i+c,b_{j+1}-cbi​+c,bj+1​−c即可 二维公式： b[i][j]=a[i][j]−a[i−1][j]−a[i][j−1]+a[i−1][j−1]b[i][j]=a[i][j]-a[i-1][j]-a[i][j-1]+a[i-1][j-1]b[i][j]=a[i][j]−a[i−1][j]−a[i][j−1]+a[i−1][j−1] 当需要在a[x1][y1]...a[x2][y2]a[x1][y1]...a[x2][y2]a[x1][y1]...a[x2][y2]之间所有数都加上ccc，则只需要b[x1][y1]+c;b[x1][y2+1]−c;b[x2+1][y1]−c;b[x2+1][y2+1]+cb[x1][y1]+c;b[x1][y2+1]-c;b[x2+1][y1]-c;b[x2+1][y2+1]+cb[x1][y1]+c;b[x1][y2+1]−c;b[x2+1][y1]−c;b[x2+1][y2+1]+c即可 双指针算法 指向的是两个序列，维护某种次序，比如归并排序合并 指向的是一个序列，两个指针维护一段区间 一般是将朴素算法优化到O(N)O(N)O(N) 123456789// 朴素算法for(int i=0;i&lt;n;i++) for(int j=0;j&lt;n;j++) // 具体逻辑// 双指针for(int i=0,j=0;i&lt;n;i++) while(j &lt; i &amp;&amp; check(i,j)) j++ //单调性 // 具体逻辑 位运算 求出xxx的二进制表示第kkk位的值：(x&gt;&gt;k)&amp;1(x&gt;&gt;k)\\&amp;1(x&gt;&gt;k)&amp;1 返回xxx的二进制表示最后一位111：x&amp;−x=x&amp;(∼x+1)x\\&amp;-x=x\\&amp;(\\sim x + 1)x&amp;−x=x&amp;(∼x+1) 证明： x=1010...10000x=1010...10000x=1010...10000 ∼x=0101...01111\\sim x=0101...01111∼x=0101...01111 ∼x+1=0101...10000\\sim x +1=0101...10000∼x+1=0101...10000 x&amp;(∼x+1)=0000....10000x\\&amp;(\\sim x + 1)=0000....10000x&amp;(∼x+1)=0000....10000 应用：得到xxx有多少个111，每次把xxx的最后一位去掉(也就是−(x&amp;−x)-(x\\&amp;-x)−(x&amp;−x))，计算次数即可 消除xxx的二进制表示最后一位111：x&amp;x−1x\\&amp;x-1x&amp;x−1 离散化 值域很大，但是真正用到的很稀疏 a[]a[]a[]中可能有重复元素-去重 123vector&lt;int&gt; alls; // 存储所有待离散化的值sort(alls.begin(), alls.end()); // 将所有值排序alls.erase(unique(alls.begin(), alls.end()), alls.end()); // 去掉重复元素 如何求出xxx离散化的值-二分 123456789101112// 二分求出x对应的离散化的值int find(int x) // 找到第一个大于等于x的位置{ int l = 0, r = alls.size() - 1; while (l &lt; r) { int mid = l + r &gt;&gt; 1; if (alls[mid] &gt;= x) r = mid; else l = mid + 1; } return r + 1; // 映射到1, 2, ...n}","link":"/2023/09/17/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"},{"title":"排序算法","text":"插入排序；交换排序；选择排序；归并排序；分配排序； 插入排序 直接插入；折半插入；链表插入 插入第i个时，前面i-1个已经排好序 v[i]v[i]v[i]与v[i−1],v[i−2].v[i-1],v[i-2].v[i−1],v[i−2].…比较，找到插入位置 原来位置元素向后移 希尔排序 将全部元素分为gap个子序列 缩小间隔gap 直到gap为1 交换排序 快速排序 以某个元素为基准；确定分界点（q[l],q[(l+r)/2],q[r]q[l],q[(l+r)/2],q[r]q[l],q[(l+r)/2],q[r]）随机 按照该元素的排序码大小，将整个元素序列分为两部分 第一种 分为两个区间a[],b[]a[],b[]a[],b[] 对于q[l−r]q[l-r]q[l−r]，若q[i]&lt;=x,x−&gt;a[]q[i]&lt;=x,x-&gt;a[]q[i]&lt;=x,x−&gt;a[]，否则x−&gt;b[]x-&gt;b[]x−&gt;b[] a[],b[]a[],b[]a[],b[]放入q[]q[]q[]中 第二种 i,ji,ji,j指针分别从左边和右边，iii指向的数&lt;=x&lt;=x&lt;=x，jjj指向的数&gt;=x&gt;=x&gt;=x 直到q[i]&gt;x,q[j]&lt;xq[i]&gt;x,q[j]&lt;xq[i]&gt;x,q[j]&lt;x，i,ji,ji,j指针指向数交换 直到i,ji,ji,j相遇，那么iii左边的数都是&lt;=x&lt;=x&lt;=x，jjj右边的数都是&gt;=x&gt;=x&gt;=x的，分为两段 对这两部分重复实施上述方法，递归 背快排模版-注意边界问题 123456789101112131415void quick_sort(int q[], int l, int r){ if(l &gt;= r) return; int x = q[l], i = l - 1, j = r + 1; while(i &lt; j) { do i ++ ; while (q[i] &lt; x); do j -- ; while (q[j] &gt; x); if(i &lt; j) swap(q[i], q[j]); } // 边界问题 // 如果改成(q, l, i - 1), (q, i, r)则上面改为x = q[r] quick_sort(q, l, j); quick_sort(q, j + 1, r);} 冒泡排序 对象个数为nnn，最多做n−1n-1n−1趟排序 发生逆序，则交换v[n]v[n]v[n]和v[n−1]v[n-1]v[n−1] 选择排序 直接选择排序 在一组元素中选择最小的 将最小元素放到这组的第一个位置 在剩下元素中重复过程 直到只剩下1个元素 堆排序 将无序数组构造成一个大根堆（新插入的数据与其父结点比较） 固定一个最大值，将剩余的数重新构造成一个大根堆，重复这样的过程 归并排序 确定分界点，mid=(l+r)/2mid=(l+r)/2mid=(l+r)/2，是下标的中间值 先分成两个数组，递归排序两个数组 将两个数组合二为一 两个数组分别有指针i,ji,ji,j指向 将i,ji,ji,j指向的进行对比，选择小的存在temptemptemp中，剩余的直接接在后面 将temptemptemp数组赋值到原数组中","link":"/2023/09/16/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"},{"title":"搜索算法","text":"深度优先搜索；广度优先搜索； 数据结构 空间 其他 DFS Stack O(h)O(h)O(h) 回溯；剪枝；每个dfs对应一个搜索树 BFS Queue O(2h)O(2^h)O(2h) 有最短路径性质 DFS 回溯一定要注意恢复现场 子集树：通常有2n2^n2n个叶子结点，遍历子集树时间为Ω(2n)Ω(2^n)Ω(2n) 排列树：通常有n!n!n!个叶子结点，遍历子集树时间为Ω(n!)Ω(n!)Ω(n!) AcWing 842. 排列数字 &amp; 排列数 123456789101112131415161718192021// u代表当前层数void dfs(int u){ if (u == n) { for (int i = 0; i &lt; n; i++) cout &lt;&lt; path[i]; } // 对于每个数进行遍历 for (int i = 0; i &lt; n; i++) // 该数没有被用过 if (!st[i]) { path[u] = i; st[i] = true; // 一般会做剪枝操作，进入dfs需要条件 dfs(u + 1); // 恢复现场 st[i] = false; }} AcWing 843. n-皇后问题 &amp; 子集树 该问题可以用排列数来做，但是需要进行剪枝操作 或者用子集树来做，对于每一个格子进行枚举，可以选择放/不放 1234567891011121314151617181920212223// s代表当前层数void dfs(int x, int y, int s){ if (y == n) y = 0, x++; if (x = n) { if (s == n) { for (int i = 0; i &lt; n; i++) puts(g[i]); } return; } //不放皇后 dfs(x, y + 1, s); //放皇后 if (!row[x] &amp;&amp; !col[y] &amp;&amp; !dg[x + y] &amp;&amp; !udg[x - y + n]) { row[x] = col[y] = dg[x + y] = udg[x - y + n] = true; dfs(x, y + 1, s + 1); // 恢复现场 row[x] = col[y] = dg[x + y] = udg[x - y + n] = false; }} BFS 一般模版： 123456// 初始queuewhile(!queue.empty()){ t=queue.队头; 扩展t，进入队列中}","link":"/2023/09/18/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/"},{"title":"回溯算法","text":"回溯算法 问题分类 所有的回溯法都可以变成树结构 组合问题：N个数里面按一定规则找出k个数的集合 切割问题：一个字符串按一定规则有几种切割方式 子集问题：一个N个数的集合里有多少符合条件的子集 排列问题：N个数按一定规则全排列，有几种排列方式 棋盘问题：N皇后，解数独等等 一般来说，组合和排列是取叶子结点，子集问题是取全部结点 子集问题分析： 时间复杂度：O(2n)O(2^n)O(2n)，因为每一个元素的状态无外乎取与不取，所以时间复杂度为O(2n)O(2^n)O(2n) 空间复杂度：O(n)O(n)O(n)，递归深度为n，所以系统栈所用空间为O(n)O(n)O(n)，每一层递归所用的空间都是常数级别，注意代码里的result和path都是全局变量，就算是放在参数里，传的也是引用，并不会新申请内存空间，最终空间复杂度为O(n)O(n)O(n) 排列问题分析： 时间复杂度：O(n!)O(n!)O(n!)，这个可以从排列的树形图中很明显发现，每一层节点为nnn，第二层每一个分支都延伸了n−1n-1n−1个分支，再往下又是n−2n-2n−2个分支，所以一直到叶子节点一共就是 n∗n−1∗n−2∗.....1=n!n * n-1 * n-2 * ..... 1 = n!n∗n−1∗n−2∗.....1=n! 空间复杂度：O(n)O(n)O(n)，和子集问题同理。 组合问题分析： 时间复杂度：O(2n)O(2^n)O(2n)，组合问题其实就是一种子集的问题，所以组合问题最坏的情况，也不会超过子集问题的时间复杂度。 空间复杂度：O(n)O(n)O(n)，和子集问题同理。 N皇后问题分析： 时间复杂度：O(n!) ，其实如果看树形图的话，直觉上是O(nn)O(n^n)O(nn)，但皇后之间不能见面所以在搜索的过程中是有剪枝的，最差也就是O（n!）O（n!）O（n!），n!n!n!表示n∗(n−1)∗....∗1。n * (n-1) * .... * 1。n∗(n−1)∗....∗1。 空间复杂度：O(n)，和子集问题同理。 解数独问题分析： 时间复杂度：O(9^m) , m是’.'的数目。 空间复杂度：O(n^2)，递归的深度是n^2 回溯方法 回溯函数模板返回值以及参数 回溯函数终止条件 回溯搜索的遍历过程 123456789101112void backtracking(参数) { if (终止条件) { 存放结果; return; } for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) { 处理节点; backtracking(路径，选择列表); // 递归 回溯，撤销处理结果 }} 组合问题 LeetCode77. 组合 直接可以代入上面的代码模版；横向遍历就是遍历index，纵向遍历就是调用自己，遇到叶子结点就是一个结果 上图是剪枝优化的问题，如果n=4, k=4的话，那么被叉掉的代表凑不够4个数了，所以可以不用递归遍历了 LeetCode216. 组合总和 III 这道题就是9为宽度，k为深度，约束自己条件是n LeetCode17. 电话号码的字母组合 这道题尝试自己画一下图 大概深度是数字个数；每个数字对应的字母是宽度 LeetCode39. 组合总和 这道题其实和17组合一样，但是是无限取，所以递归没有层数的要求，只要target满足，就直接返回（相当于纵向遍历可以改变） LeetCode40. 组合总和II 这道题难点在于去重；这里表示的是同一层的去重，而不是同一个树枝的去重； 这里需要说明一下，为什么 used[i - 1] == false 就是同一树层呢：因为同一树层，used[i - 1] == false 才能表示，当前取的 candidates[i] 是从 candidates[i - 1] 回溯而来的。 而 used[i - 1] == true，说明是进入下一层递归，去下一个数，所以是树枝上 LeetCode131.分割回文串 其实很难把切割回文串和组合问题放在一起；但是可以以切割的位置作为递归的条件； 纵向就是剩余切割的位置，横向就是最开始切割的位置； 当切割的位置在最后的时候，则可以输出一个结果 中间切割的过程中，出现任何一个不是回文串都可以放弃这条分支 之类还有一个判断回文的算法（用双指针法） LeetCode93. 复原 IP 地址 本题和上一题分割字符串的题目很像，只是结束条件不一样。本题的结束条件是分割的份数（需要有3个分割线，分割成4份）+ 分割结束的结果是符合条件的 还有一个判断段位是否合法的函数；有以下几点 段位以0为开头的数字不合法 段位里有非正整数字符不合法 段位如果大于255了不合法 LeetCode78.子集 子集问题和之前不一样在于：之前都是找叶子结点，该问题是找全部结点；该问题也不需要任何剪枝，因为就是遍历整棵树 LeetCode90. 子集 II 这题和上一题的区别在于，给定的集合中是有重复元素的。但是选出来的子集又不能有重复的；所以就是树枝去重和树层去重需要弄懂，这个即LeetCode40. 组合总和II题思路一样 在LeetCode78.子集这题的思路上加上了去重的工作 LeetCode491.递增子序列 这道题一开始思路很容易想成上一题的子集，因为有去重然后有子集，只不过是需要递增而已；但是不能这样，因为原数组的顺序不能改变，所以不能先排序 单层不重复的逻辑：当前元素和startIndex后前面的元素有没有重复的 以及因为子集必须是&gt;2的，所以需要在path进入result的时候判断一下 排列问题 LeetCode46. 全排列 递归需要一个used数组来判断是否使用过；不需要startIndex了(因为元素还是要重复使用的) 递归终止条件还是到达了叶子结点 LeetCode47. 全排列 II 和46题的区别在于给的集合是重复的，所以取出子集的时候也会有重复的，这时候就需要去重；去重还是先排序，才能通过相邻结点看是否重复了，和之前去重的思路一样 另外很奇妙的是这道题树枝去重和树层去重都是可以的，但是树层上去重效率更高 树层上去重(used[i - 1] == false)，的树形结构如下： 树枝上去重（used[i - 1] == true）的树型结构如下： 图论问题 LeetCode332. 重新安排行程 这道题是一道hard题，感觉是用图论的深度优先搜索，但是也可以用回溯法来做； 只需要找到一个行程，树形结构中唯一通向叶子结点的路线，所以函数返回值是bool 递归终止条件就是遇到的机场数量=航班数量+1 在单层搜索的时候，因为要遍历一个机场所对应的所有机场，还要容易删除增删元素（因为需要避免重复），所以用unordered_map&lt;string, map&lt;string, int&gt;&gt; targets来做映射，直接用int字段来判断这个集合中机场是否使用过 棋盘问题 LeetCode51. N 皇后 深度就是当前棋盘遍历的行数 终止条件就是遍历到最底下一行了 单层搜索逻辑就是一列列试，直到找到符合条件的 不能同行 不能同列 不能同斜线 （45度和135度角） LeetCode37. 解数独 解数独仅有一个解，所以用bool来返回 这是一个二维的递归，遍历行和列 判断棋盘是否合法 同行是否重复 同列是否重复 9宫格里是否重复","link":"/2023/11/12/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"},{"title":"数据结构","text":"单调栈；单调队列；KMP字符串；Trie树；并查集；哈希 链表 数组模拟比较快；node较慢 单链表 123456789101112131415161718192021222324// head存储链表头// e[]存储节点的值// ne[]存储节点的next指针// idx表示当前用到了哪个节点int head, e[N], ne[N], idx;// 初始化void init(){ head = -1; idx = 0;}// 在链表头插入一个数avoid insert(int a){ e[idx] = a, ne[idx] = head, head = idx ++ ;}// 将头结点删除，需要保证头结点存在void remove(){ head = ne[head];} 双链表 12345678910111213141516171819202122232425262728// e[]表示节点的值// l[]表示节点的左指针// r[]表示节点的右指针// idx表示当前用到了哪个节点int e[N], l[N], r[N], idx;// 初始化void init(){ // 0是左端点，1是右端点 r[0] = 1, l[1] = 0; idx = 2;}// 在节点a的右边插入一个数xvoid insert(int a, int x){ e[idx] = x; l[idx] = a, r[idx] = r[a]; l[r[a]] = idx, r[a] = idx ++ ;}// 删除节点avoid remove(int a){ l[r[a]] = l[a]; r[l[a]] = r[a];} 栈 普通栈 12345678910111213141516// tt表示栈顶int stk[N], tt = 0;// 向栈顶插入一个数stk[ ++ tt] = x; // 从栈顶弹出一个数tt -- ;// 栈顶的值stk[tt];// 判断栈是否为空if (tt &gt; 0){} 单调栈 常见模型：找出每个数左边离它最近的比它大/小的数 在上述图片中红色方框能把3,43,43,4推出栈是因为： 222是在3,43,43,4后面 222比3,43,43,4小 所以比如3,43,43,4能满足比777小，那222肯定能满足，而且222还离得比777近，3,43,43,4没有用了就被推出 123456789int tt = 0;for (int i = 1; i &lt;= n; i ++ ){ // 栈顶是否&lt;=当前数 while (tt &amp;&amp; check(stk[tt], i)) tt -- ; // 当前数插入栈中 stk[ ++ tt] = i;} 队列 普通队列 12345678910111213141516// hh 表示队头，tt表示队尾int q[N], hh = 0, tt = -1;// 向队尾插入一个数q[ ++ tt] = x;// 从队头弹出一个数hh ++ ;// 队头的值q[hh];// 判断队列是否为空if (hh &lt;= tt){} 循环队列 123456789101112131415161718// hh 表示队头，tt表示队尾的后一个位置int q[N], hh = 0, tt = 0; // 向队尾插入一个数q[tt ++ ] = x;if (tt == N) tt = 0;// 从队头弹出一个数hh ++ ;if (hh == N) hh = 0;// 队头的值q[hh];// 判断队列是否为空if (hh != tt){} 单调队列 常见模型：找出滑动窗口中的最大值/最小值 红色代表所有从左侧推出的(可以推出该队列是一个单调递增的)，黄色代表所有从右侧推出的 在上述图片中，第一个红色方框能把0,10,10,1推出队列是因为： −1-1−1代表的下标是在0,10,10,1后面 −1-1−1比0,10,10,1下标查出来的值小 ​ 所以有−1-1−1，则0,10,10,1查出来的值1,31,31,3就永远不会被用到了； 在上述图片中，黄色方框能把333推出队列是因为： 因为k=3k=3k=3，所以下标333就过期了 12345678910111213// hh是左指针，tt是右指针// 队列是一个单调递增的双端队列，存储的是原数组的下标值int hh = 0, tt = -1;for (int i = 0; i &lt; n; i ++ ){ // 左侧弹出：队头是否滑出窗口 while (hh &lt;= tt &amp;&amp; check_out(q[hh])) hh ++ ; // 右侧弹出：队列中有值比新来的大 while (hh &lt;= tt &amp;&amp; check(q[tt], i)) tt -- ; q[ ++ tt] = i; // 每次获取当前窗口最小值 cout &lt;&lt; q[hh];} KMP字符串 可以发现：求next数组和用next数组采用的同一个i,ji,ji,j循环逻辑 1234567891011121314151617181920// 求Next数组：// s[]是模式串，p[]是模板串, n是s的长度，m是p的长度for (int i = 2, j = 0; i &lt;= m; i ++ ){ while (j &amp;&amp; p[i] != p[j + 1]) j = ne[j]; if (p[i] == p[j + 1]) j ++ ; ne[i] = j;}// 匹配for (int i = 1, j = 0; i &lt;= n; i ++ ){ while (j &amp;&amp; s[i] != p[j + 1]) j = ne[j]; if (s[i] == p[j + 1]) j ++ ; if (j == m) { j = ne[j]; // 匹配成功后的逻辑 }} Trie树 高效地存储和查找字符串集合的数据结构 1234567891011121314151617181920212223242526272829303132333435// Trie字符串统计int son[N][26], cnt[N], idx;// 0号点既是根节点，又是空节点// son[][]存储树中每个节点的子节点// son[p][u],p代表当前结点编号,u代表子结点字母// cnt[]存储以每个节点结尾的单词数量// 插入一个字符串void insert(char *str){ int p = 0; for (int i = 0; str[i]; i ++ ) { int u = str[i] - 'a'; // 没有子节点则创建 if (!son[p][u]) son[p][u] = ++ idx; // 当前父节点变为原来子节点，循环 p = son[p][u]; } // 存储该节点结尾的单词数量 cnt[p] ++ ;} // 查询字符串出现的次数int query(char *str){ int p = 0; for (int i = 0; str[i]; i ++ ) { int u = str[i] - 'a'; if (!son[p][u]) return 0; p = son[p][u]; } return cnt[p];} 并查集 查询操作 - 找到元素的父节点 合并操作 - 将两个集合合并 朴素并查集 12345678910111213141516int p[N]; // p[]存储每个点的祖宗节点// 返回x的祖宗节点int find(int x){ // 路径压缩 if (p[x] != x) p[x] = find(p[x]); return p[x];} // 初始化，假定节点编号是1~nfor (int i = 1; i &lt;= n; i ++ ) p[i] = i;// 合并a和b所在的两个集合：p[find(a)] = find(b); 维护size的并查集 12345678910111213141516171819202122int p[N], size[N];// p[]存储每个点的祖宗节点// size[]只有祖宗节点的有意义，表示祖宗节点所在集合中的点的数量// 可以按照高度来合并// 返回x的祖宗节点int find(int x){ if (p[x] != x) p[x] = find(p[x]); return p[x];}// 初始化，假定节点编号是1~nfor (int i = 1; i &lt;= n; i ++ ){ p[i] = i; size[i] = 1;}// 合并a和b所在的两个集合：p[find(a)] = find(b);size[b] += size[a]; 维护到祖宗节点距离的并查集 123456789101112131415161718192021222324252627int p[N], d[N];// p[]存储每个点的祖宗节点// d[x]存储x到p[x]的距离// 返回x的祖宗节点int find(int x){ if (p[x] != x) { int u = find(p[x]); // 先到达最底层，然后回溯时更新 d[x] += d[p[x]]; p[x] = u; } return p[x];}// 初始化，假定节点编号是1~nfor (int i = 1; i &lt;= n; i ++ ){ p[i] = i; d[i] = 0;} // 合并a和b所在的两个集合：p[find(a)] = find(b);d[find(a)] = distance; // 根据具体问题，初始化find(a)的偏移量 堆 用一维数组来存，因为是完全二叉树，所以对于xxx，左儿子2x2x2x，右儿子2x+12x+12x+1，基本方法有两个： down[x]down[x]down[x]向下调整；已经维护好的堆，要把头结点的值换掉 123 1 3 4 头结点从1换成63 5 4 5 123 6 3 4 在3,4,6找到最小值，把6换下去3 5 4 5 123 3 6 4 在3,4,6找到最小值，把6换下去3 5 4 5 123 3 3 4 在3,5,6找到最小值，把6换下去6 5 4 5 up[x]up[x]up[x]向上调整；已经维护好的堆，要把后面结点的值换掉 123 3 3 4 尾结点从5换成23 5 4 5 123 3 3 4 和父节点对比，如果小，则换上去3 5 4 2 123 3 3 2 和父节点对比，如果小，则换上去3 5 4 4 123 2 3 3 和父节点对比，如果小，则换上去3 5 4 4 插入一个数 求集合中最小值 删除最小值 删除任意一个元素 修改任意一个元素 STL可实现1,2,31,2,31,2,3 123456小根堆：1.插入一个数 heap[++ size] = x;up(size);2.求集合当中的最小值 heap[1];3.删除最小值 heap[1] = heap[size);size--;down(1);4.删除任意一个元素 heap[k] = heap[size];size--;down(k);up(k)；5.修改任意一个元素 heap[k] = x;down(k);up(k); 123456789101112131415161718192021222324252627282930313233343536// h[N]存储堆中的值, h[1]是堆顶，x的左儿子是2x, 右儿子是2x + 1// ph[k]存储第k个插入的点在堆中的位置// hp[k]存储堆中下标是k的点是第几个插入的int h[N], ph[N], hp[N], size;// 交换两个点，及其映射关系void heap_swap(int a, int b){ swap(ph[hp[a]],ph[hp[b]]); swap(hp[a], hp[b]); swap(h[a], h[b]);}void down(int u){ int t = u; if (u * 2 &lt;= size &amp;&amp; h[u * 2] &lt; h[t]) t = u * 2; if (u * 2 + 1 &lt;= size &amp;&amp; h[u * 2 + 1] &lt; h[t]) t = u * 2 + 1; if (u != t) { heap_swap(u, t); down(t); }}void up(int u){ while (u / 2 &amp;&amp; h[u] &lt; h[u / 2]) { heap_swap(u, u / 2); u &gt;&gt;= 1; }}// O(n)建堆,从n/2开始是从最后一个叶子结点的父节点开始for (int i = n / 2; i; i -- ) down(i); 哈希 一般哈希 离散化可以看作一种比较特殊的哈希方式：是保序的(需要递增的) 一般是添加和查找两个操作 拉链法 12345678910111213141516171819202122int h[N], e[N], ne[N], idx;// 向哈希表中插入一个数void insert(int x){ // N就是取模，模的数尽量选质数(冲突较少) int k = (x % N + N) % N; // +N代表变成正数 e[idx] = x; ne[idx] = h[k]; h[k] = idx ++ ;}// 在哈希表中查询某个数是否存在bool find(int x){ int k = (x % N + N) % N; for (int i = h[k]; i != -1; i = ne[i]) if (e[i] == x) return true; return false;} 开放寻址法 123456789101112int h[N];// 如果x在哈希表中，返回x的下标；如果x不在哈希表中，返回x应该插入的位置int find(int x){ int t = (x % N + N) % N; while (h[t] != null &amp;&amp; h[t] != x) { t ++ ; if (t == N) t = 0; } return t;} 字符串哈希 h[]h[]h[]数组代表什么：前缀哈希 123456str=&quot;A B C A B C D E Y X C A&quot; h[0] = 0 h[1] = &quot;A&quot;的哈希 h[2] = &quot;AB&quot;的哈希 h[3] = &quot;ABC&quot;的哈希 h[4] = &quot;ABCA&quot;的哈希 字符串的哈希值怎么求：将字符串看成PPP进制数，P的经验值是131131131或133311333113331，取这两个值的冲突概率低 123字符串 &quot; A B C A&quot;p进制 ( 1 2 3 1)p十进制 (1*p^3 + 2*p^2 + 3^p + 1) mod Q 可以用前缀哈希求所有子串的哈希值 已知1∼L−11 \\sim L-11∼L−1和1∼R1 \\sim R1∼R的哈希值，要求L∼RL \\sim RL∼R的哈希值 h[R]=(s[0]∗pR−1+s[1]∗pR−2+...+s[R−1]∗p0)modQh[R]=(s[0]*p^{R-1}+s[1]*p^{R-2}+...+s[R-1]*p^0)modQh[R]=(s[0]∗pR−1+s[1]∗pR−2+...+s[R−1]∗p0)modQ h[L−1]=(s[0]∗pL−2+s[1]∗pL−3+...+s[L−2]∗p0)modQh[L-1]=(s[0]*p^{L-2}+s[1]*p^{L-3}+...+s[L-2]*p^0)modQh[L−1]=(s[0]∗pL−2+s[1]∗pL−3+...+s[L−2]∗p0)modQ 平移h[L−1]h[L-1]h[L−1]，让他和h[R]h[R]h[R]的次方对齐，先∗pR−L+1*p^{R-L+1}∗pR−L+1 则L−RL-RL−R的哈希值=h[R]−h[L−1]∗pR−L+1h[R]-h[L-1]*p^{R-L+1}h[R]−h[L−1]∗pR−L+1 小技巧：QQQ取模的数用2642^{64}264，这样直接用unsigned long long存储，溢出的结果就是取模的结果 不能映射成0，假定不存在冲突 12345678910111213141516typedef unsigned long long ULL;ULL h[N], p[N]; // h[k]存储字符串前k个字母的哈希值, p[k]存储 P^k mod 2^64// 初始化p[0] = 1;for (int i = 1; i &lt;= n; i ++ ){ h[i] = h[i - 1] * P + str[i]; p[i] = p[i - 1] * P;}// 计算子串 str[l ~ r] 的哈希值ULL get(int l, int r){ return h[r] - h[l - 1] * p[r - l + 1];} STL STL数据类型及相关操作 vector 变长数组，倍增的思想，支持比较运算，按字典序 1234567size() 返回元素个数empty() 返回是否为空clear() 清空front()/back()push_back()/pop_back()begin()/end()[] pair&lt;int, int&gt; 支持比较运算，以first为第一关键字，以second为第二关键字（字典序） 12first, 第一个元素second, 第二个元素 string 12345size()/length() 返回字符串长度empty()clear()substr(起始下标，(子串长度)) 返回子串c_str() 返回字符串所在字符数组的起始地址 queue 123456size()empty()push() 向队尾插入一个元素front() 返回队头元素back() 返回队尾元素pop() 弹出队头元素 priority_queue 默认是大根堆；定义成小根堆的方式：priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; q; 123push() 插入一个元素top() 返回堆顶元素pop() 弹出堆顶元素 stack 12345size()empty()push() 向栈顶插入一个元素top() 返回栈顶元素pop() 弹出栈顶元素 deque 12345678size()empty()clear()front()/back()push_back()/pop_back()push_front()/pop_front()begin()/end()[] set, map multiset, multimap 基于平衡二叉树（红黑树），动态维护有序序列 12345size()empty()clear()begin()/end()++, -- 返回前驱和后继，时间复杂度 O(logn) set/multiset insert() 插入一个数 find() 查找一个数 count() 返回某一个数的个数 erase() (1) 输入是一个数x，删除所有x O(k + logn) (2) 输入一个迭代器，删除这个迭代器 lower_bound()/upper_bound() lower_bound(x) 返回大于等于x的最小的数的迭代器 upper_bound(x) 返回大于x的最小的数的迭代器 map/multimap insert() 插入的数是一个pair erase() 输入的参数是pair或者迭代器 find() [] 注意multimap不支持此操作。 时间复杂度是 O(logn) lower_bound()/upper_bound() unordered unordered_set, unordered_map, unordered_multiset, unordered_multimap 哈希表 和上面类似，增删改查的时间复杂度是 O(1) 凡是和排序有关的都不支持： lower_bound()/upper_bound()， 迭代器的++，– bitset 圧位 12345bitset&lt;10000&gt; s; &lt;&gt;存储的是位数~, &amp;, |, ^&gt;&gt;, &lt;&lt;==, !=[] count() 返回有多少个1 any() 判断是否至少有一个1 none() 判断是否全为0 set() 把所有位置成1 set(k, v) 将第k位变成v reset() 把所有位变成0 flip() 等价于~ flip(k) 把第k位取反","link":"/2023/09/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"title":"数学问题","text":"质数；约数；欧拉函数；快速幂；中国剩余定理；高斯消元；组合数；容斥原理；博弈论 质数 求NNN内质数个数 试除法 O(sqrt(n))O(sqrt(n))O(sqrt(n))质数的判定；只需要枚举i&lt;=n/ii&lt;=n/ii&lt;=n/i O(sqrt(n))O(sqrt(n))O(sqrt(n))分解质因数；nnn当中只包含一个大于sqrt(n)sqrt(n)sqrt(n)的质因数 筛法 适合求多个NNN的 1−n1-n1−n中有n/lnnn/lnnn/lnn个质数 埃氏筛法：从头枚举数(只用质数即可)，将他的倍数全部筛除 如求100以内的素数；只要去到sqrt(100)sqrt(100)sqrt(100)即可；因为101010的222倍已经被222去掉了，333倍已经被333去掉了，只剩下101010倍以上的还存在 下面的例子：222筛掉4,6,8,104,6,8,104,6,8,10；333筛掉999 可以发现：只需要筛掉当前ppp值的kkk倍（其中kkk是质数） 线性筛法：让其只会被最小的质因子筛一次 任何一个合数只有一个最小的质因子 因此任何一个合数只会被筛一次；且仅会被最小质因子筛 有两种情况 i%pj==0i \\% pj ==0i%pj==0 ；pjpjpj一定是iii的最小质因子，pjpjpj一定是pj∗ipj*ipj∗i的最小质因子 i%pj!=0i \\% pj !=0i%pj!=0 ；pjpjpj一定小于iii的所有质因子，pjpjpj一定是pj*i的最小质因子 约数 求一个数所有的约数 约数个数；分解之后个数就是对于每个piαip_i^{\\alpha_i}piαi​​，可以0−αi0-\\alpha_i0−αi​次 N=p1α1∗p2α2...pkαk(α1+1)∗(α2+1)...(αk+1)N=p_1^{\\alpha_1}*p_2^{\\alpha_2}...p_k^{\\alpha_k} \\\\(\\alpha_1+1)*(\\alpha_2+1)...(\\alpha_k+1) N=p1α1​​∗p2α2​​...pkαk​​(α1​+1)∗(α2​+1)...(αk​+1) 约数之和；ddd代表其中一个约数，βi\\beta_iβi​是在0−αi0-\\alpha_i0−αi​之间的 N=p1α1∗p2α2...pkαk(α1+1)∗(α2+1)...(αk+1)d=p1β1∗p2β2...pkβkd1+d2+...+di=(p10+p11+...p1α1)∗(p20+p21+...p2α2)...∗(pk0+pk1+...pkαk)N=p_1^{\\alpha_1}*p_2^{\\alpha_2}...p_k^{\\alpha_k} \\\\(\\alpha_1+1)*(\\alpha_2+1)...(\\alpha_k+1) \\\\ d=p_1^{\\beta_1}*p_2^{\\beta_2}...p_k^{\\beta_k} \\\\ d_1+d_2+...+d_i=(p_1^0+p_1^1+...p_1^{\\alpha_1})*(p_2^0+p_2^1+...p_2^{\\alpha_2})...*(p_k^0+p_k^1+...p_k^{\\alpha_k}) N=p1α1​​∗p2α2​​...pkαk​​(α1​+1)∗(α2​+1)...(αk​+1)d=p1β1​​∗p2β2​​...pkβk​​d1​+d2​+...+di​=(p10​+p11​+...p1α1​​)∗(p20​+p21​+...p2α2​​)...∗(pk0​+pk1​+...pkαk​​) 辗转相除法（欧几里得算法）aaa和bbb的最大公约数=bbb和a mod ba\\, mod\\, bamodb的最大公约数 (a,b)=(b,a mod b)(a,b) = (b,a \\bmod b) (a,b)=(b,amodb) 扩展欧几里德 裴蜀定理：给定方程，判断是否有解 a,ba,ba,b互质 ⇔ gcd(a,b)=1gcd(a,b)=1gcd(a,b)=1 ⇔ 存在整数x,yx,yx,y,使得ax+by=1ax+by=1ax+by=1； 可用来判断ax+by=cax+by=cax+by=c是否有解，需要看ccc是否是gcd(a,b)gcd(a,b)gcd(a,b)的倍数 扩展欧几里德算法：给定方程，求出解【 欧几里德+裴蜀】 给定a,ba,ba,b可以求x,yx,yx,y；下面的做法是讲如何从下一层递归的x,yx,yx,y值得到当前层递归的x,yx,yx,y值 ax+by=gcd(a,b)ax+by=gcd(a,b)ax+by=gcd(a,b)，a mod ba \\bmod bamodb和bbb的最大公约数也是ddd ax+by=gcd(b,a%b)=bx0+(a%b)y0ax+by=gcd(b,a \\% b)=bx_0+(a \\% b)y_0ax+by=gcd(b,a%b)=bx0​+(a%b)y0​ a%b=a−⌊ab⌋∗ba \\% b=a-\\lfloor \\frac{a}{b} \\rfloor * ba%b=a−⌊ba​⌋∗b，代入到上式 ax+by=bx0+(a−⌊ab⌋∗b)y0=ay0+b(x0−⌊ab⌋y0)ax+by=bx_0+(a-\\lfloor \\frac{a}{b} \\rfloor * b)y_0=ay_0+b(x_0-\\lfloor \\frac{a}{b} \\rfloor y_0)ax+by=bx0​+(a−⌊ba​⌋∗b)y0​=ay0​+b(x0​−⌊ba​⌋y0​) x=y0,y=x0−⌊ab⌋y0x=y_0,y=x_0-\\lfloor \\frac{a}{b} \\rfloor y_0x=y0​,y=x0​−⌊ba​⌋y0​ 线性同余方程：给定同余方程，求出解 【 扩展欧几里德应用】 ax≡b( mod m)ax≡ b(\\bmod m)ax≡b(modm)，给出a,b,ma,b,ma,b,m，求xxx； ⇔ ax=my+bax=my+bax=my+b，yyy是整数⇔ ax−my=bax-my=bax−my=b 即ax≡b( mod m)ax≡ b(\\bmod m)ax≡b(modm)有解的充要条件是bbb是gcd(a,m)gcd(a,m)gcd(a,m)的倍数 欧拉函数 φ(n)\\varphi(n)φ(n)是1−n−11-n-11−n−1中和nnn互质的个数；例如varphi(8)=4varphi(8)=4varphi(8)=4，因为1,3,5,71,3,5,71,3,5,7均和8互质 公式求 N=p1α1∗p2α2...pkαkφ(N)=N(1−1p1)(1−1p2)...(1−1pk)N=p_1^{\\alpha_1}*p_2^{\\alpha_2}...p_k^{\\alpha_k}\\\\ \\varphi(N)=N(1-\\frac{1}{p_1})(1-\\frac{1}{p_2})...(1-\\frac{1}{p_k}) N=p1α1​​∗p2α2​​...pkαk​​φ(N)=N(1−p1​1​)(1−p2​1​)...(1−pk​1​) 从1−N1-N1−N中去掉p1,p2...pkp1,p2...pkp1,p2...pk的所有倍数 加上所有pi∗pjpi*pjpi∗pj的倍数 减去所有pi∗pj∗pkpi*pj*pkpi∗pj∗pk的倍数 加上所有pi∗pj∗pk∗plpi*pj*pk*plpi∗pj∗pk∗pl的倍数 N−Np1−Np2−...+Np1p2+Np2p3+...−Np1p2p3−Np2p3p4+...N-\\frac{N}{p1}-\\frac{N}{p2}-...+\\frac{N}{p1p2}+\\frac{N}{p2p3}+...-\\frac{N}{p1p2p3}-\\frac{N}{p2p3p4}+...N−p1N​−p2N​−...+p1p2N​+p2p3N​+...−p1p2p3N​−p2p3p4N​+... 上面即容斥原理，和欧拉函数展开公式一样 小小总结 约数个数：只与幂次相关，与质因子无关 180=22∗32∗5180=2^2∗3^2∗5180=22∗32∗5 约数个数=(1+2)∗(1+2)∗(1+1)=18=(1+2)∗(1+2)∗(1+1)=18=(1+2)∗(1+2)∗(1+1)=18 约数和：与质数因子和幂次都相关 360=2∗2∗2∗3∗3∗5=23∗32∗51360=2∗2∗2∗3∗3∗5=2^3∗3^2∗5^1360=2∗2∗2∗3∗3∗5=23∗32∗51 约数和=(20+21+22+23)∗(30+31+32)∗(50+51)=(1+2+4+8)∗(1+3+9)∗(1+5)=15∗13∗6=1170=(2^0+2^1+2^2+2^3)∗(3^0+3^1+3^2)∗(5^0+5^1)=(1+2+4+8)∗(1+3+9)∗(1+5)=15∗13∗6=1170=(20+21+22+23)∗(30+31+32)∗(50+51)=(1+2+4+8)∗(1+3+9)∗(1+5)=15∗13∗6=1170 欧拉函数公式，只与因子相关，与指数无关 8=238=2^38=23 φ(8)=8∗(1−12)=4\\varphi(8)=8∗(1−\\frac{1}{2})=4φ(8)=8∗(1−21​)=4 筛法求 欧拉定理 若aaa与nnn互质，则aϕ(n)≡1 (mod n)a^{\\phi(n)}\\equiv1\\ (mod \\ n)aϕ(n)≡1 (mod n) 例子：a=5,n=6a=5,n=6a=5,n=6，则5φ(6) mod 6=52 mod 6=25 mod 6≡15^{\\varphi(6) }\\bmod 6=5^2 \\bmod 6=25 \\bmod 6 \\equiv 15φ(6)mod6=52mod6=25mod6≡1 快速幂 ak mod pa^k \\bmod pakmodp，时间复杂度是O(logk)O(logk)O(logk) 基本介绍 kkk可以被拆成logklogklogk个数，即k=2x1+2x2+...+2xtk=2^{x_1}+2^{x_2}+...+2^{x_t}k=2x1​+2x2​+...+2xt​ 可以先算出来拆出来的logklogklogk数字 mod p\\bmod pmodp的值 logk{a20 mod p2a21 mod p(a20)2a22 mod p(a21)2...a2logk mod p(a2logk−1)2logk\\begin{cases} a^{2^0} \\bmod p &amp; 2\\\\ a^{2^1} \\bmod p &amp; (a^{2^0})^2\\\\ a^{2^2} \\bmod p &amp; (a^{2^1})^2\\\\ ...\\\\ a^{2^{logk}} \\bmod p &amp;(a^{2^{logk-1}})^2 \\end{cases} logk⎩⎨⎧​a20modpa21modpa22modp...a2logkmodp​2(a20)2(a21)2(a2logk−1)2​ ak=a2x1+2x2+...+2xta^k=a^{2^{x_1}+2^{x_2}+...+2^{x_t}}ak=a2x1​+2x2​+...+2xt​=a2x1∗a2x2∗...∗a2xta^{2^{x_1}}*a^{2^{x_2}}*...*a^{2^{x_t}}a2x1​∗a2x2​∗...∗a2xt​ 将每个a2xi mod pa^{2^{x_i}} \\bmod pa2xi​modp取出来之后相乘，再 mod p\\bmod pmodp即可得到值 求逆元 逆元定义 若整数b,mb,mb,m互质，并且ba\\frac{b}{a}ab​，则存在一个整数xxx，使得ab≡a∗x( mod m)\\frac{a}{b}\\equiv a*x(\\bmod m)ba​≡a∗x(modm)，则称xxx为bbb的模mmm乘法逆元，记为b−1( mod m)b^{-1}(\\bmod m)b−1(modm) bbb存在乘法逆元的充要条件是bbb与模数mmm互质，当模数mmm为质数时，bm−2b^{m-2}bm−2即为bbb的乘法逆元 给定bbb，找到xxx，使得b∗x≡1( mod p)b*x \\equiv1 (\\bmod p)b∗x≡1(modp)，其中ppp是质数 费马定理：如果b,pb,pb,p互质，则bp−1≡1( mod p)b^{p-1} \\equiv1 (\\bmod p)bp−1≡1(modp)，则b∗bp−2≡1( mod p)b*b^{p-2} \\equiv1 (\\bmod p)b∗bp−2≡1(modp)，则bp−2b^{p-2}bp−2就是bbb的模mmm乘法逆元 中国剩余定理 m1,m2,...,mkm1,m2,...,mkm1,m2,...,mk两两互质，则 {x≡a1( mod m1)x≡a2( mod m2)...x≡ak( mod mk)\\begin{cases} x \\equiv a_1 (\\bmod m_1) \\\\ x \\equiv a_2 (\\bmod m_2) \\\\ ... \\\\ x \\equiv a_k (\\bmod m_k) \\end{cases} ⎩⎨⎧​x≡a1​(modm1​)x≡a2​(modm2​)...x≡ak​(modmk​)​ M=m1m2...mkM=m_1m_2...m_kM=m1​m2​...mk​，Mi=MmiM_i=\\frac{M}{m_i}Mi​=mi​M​，M−1M^{-1}M−1表示MiM_iMi​模mim_imi​的逆 x=a1MiMi−1+a2M2M2−1+...+akMkMk−1x=a_1M_iM_i^{-1}+a_2M_2M_2^{-1}+...+a_kM_kM_k^{-1}x=a1​Mi​Mi−1​+a2​M2​M2−1​+...+ak​Mk​Mk−1​ 高斯消元 复杂度是O(n3)O(n^3)O(n3) {a11x1+a12x2+...+a1nxn=b1a21x1+a22x2+...+a2nxn=b2...an1x1+an2x2+...+annxn=bn\\begin{cases} a_{11}x_1+a_{12}x_2+...+a_{1n}x_n=b_1 \\\\ a_{21}x_1+a_{22}x_2+...+a_{2n}x_n=b_2 \\\\ ...\\\\ a_{n1}x_1+a_{n2}x_2+...+a_{nn}x_n=b_n \\end{cases} ⎩⎨⎧​a11​x1​+a12​x2​+...+a1n​xn​=b1​a21​x1​+a22​x2​+...+a2n​xn​=b2​...an1​x1​+an2​x2​+...+ann​xn​=bn​​ 形成一个n∗(n+1)n*(n+1)n∗(n+1)的矩阵，可以用初等行列变换，变成一个上三角形式 把某一行乘一个非零的数 交换某2行 把某行的若干倍加到另一行上 {a11x1+a12x2+...+a1nxn=b1a12x2+...+a1nxn=b1...a1n−1xn−1+a1nxn=b1a1nxn=b1\\begin{cases} a_{11}x_1+a_{12}x_2+ \\qquad ...\\qquad +a_{1n}x_n=b_1 \\\\ \\qquad \\quad \\enspace a_{12}x_2+ \\qquad ... \\qquad +a_{1n}x_n=b_1 \\\\ \\qquad \\quad \\enspace \\qquad \\quad \\qquad...\\\\ \\qquad \\quad \\enspace \\qquad \\quad \\enspace a_{1n-1}x_{n-1}+a_{1n}x_n=b_1 \\\\ \\qquad \\quad \\enspace \\qquad \\quad \\enspace \\qquad \\quad \\enspace \\qquad a_{1n}x_n=b_1 \\end{cases} ⎩⎨⎧​a11​x1​+a12​x2​+...+a1n​xn​=b1​a12​x2​+...+a1n​xn​=b1​...a1n−1​xn−1​+a1n​xn​=b1​a1n​xn​=b1​​ 即从后往前算可得到所有的xix_ixi​值 完美阶梯形(有nnn个方程)——唯一解 左边没有未知数，右边非0——无解 左边没有未知数，右边0——无穷多解 组合数 做法1-递推 公式Cab=a!b!(a−b)!C^b_a=\\frac{a!}{b!(a-b)!}Cab​=b!(a−b)!a!​，Cab=Ca−1b+Ca−1b−1C^b_a=C^b_{a-1}+C^{b-1}_{a-1}Cab​=Ca−1b​+Ca−1b−1​，实际意义是在前a−1a-1a−1个中选bbb的情况和不选bbb的情况 做法2-预处理 fact[i]=i! mod 109+7fact[i]=i! \\bmod 10^9 +7fact[i]=i!mod109+7 infact[i]=(i!)−1 mod 109+7infact[i]=(i!)^{-1} \\bmod 10^9 +7infact[i]=(i!)−1mod109+7 逆元 Cab=fact[a]∗infact[b−a]∗infact[b]C^b_a=fact[a]*infact[b-a]*infact[b]Cab​=fact[a]∗infact[b−a]∗infact[b] 做法3-卢卡斯定理 Cab≡Ca mod pb mod p∗Ca/pb/p( mod p)C_a^b \\equiv C_{a \\bmod p}^{b \\bmod p}*C_{a / p}^{b / p} (\\bmod p)Cab​≡Camodpbmodp​∗Ca/pb/p​(modp) 做法4-分解质因数 值=p1α1∗p2α2...pkαk=p_1^{\\alpha_1}*p_2^{\\alpha_2}...p_k^{\\alpha_k}=p1α1​​∗p2α2​​...pkαk​​，然后用大数乘法 Cab=a!b!(a−b)!C^b_a=\\frac{a!}{b!(a-b)!}Cab​=b!(a−b)!a!​可以求上下分别有多少个p1,p2...pkp_1,p_2...p_kp1​,p2​...pk​ 如a!=⌊ap⌋+⌊ap2⌋+⌊ap3⌋+...a!=\\lfloor \\frac{a}{p} \\rfloor + \\lfloor \\frac{a}{p^2} \\rfloor + \\lfloor \\frac{a}{p^3} \\rfloor + ...a!=⌊pa​⌋+⌊p2a​⌋+⌊p3a​⌋+... 容斥原理 韦恩图 如果是4个，则公式为S1+S2+S3+S4−S1⋂S2−S1⋂S3−S1⋂S4−S2⋂S3−S2⋂S4−S3⋂S4+S1⋂S2⋂S3+S1⋂S2⋂S4+S2⋂S3⋂S4−S1⋂S2⋂S3⋂S4S_1+S_2+S_3+S_4-S_1 \\bigcap S_2 - S_1 \\bigcap S_3 - S_1 \\bigcap S_4-S_2 \\bigcap S_3-S_2 \\bigcap S_4- S_3 \\bigcap S_4 + S_1 \\bigcap S_2 \\bigcap S_3 + S_1 \\bigcap S_2 \\bigcap S_4 +S_2 \\bigcap S_3 \\bigcap S_4 - S_1 \\bigcap S_2 \\bigcap S_3 \\bigcap S_4S1​+S2​+S3​+S4​−S1​⋂S2​−S1​⋂S3​−S1​⋂S4​−S2​⋂S3​−S2​⋂S4​−S3​⋂S4​+S1​⋂S2​⋂S3​+S1​⋂S2​⋂S4​+S2​⋂S3​⋂S4​−S1​⋂S2​⋂S3​⋂S4​ 性质： 总共有Cn1+Cn2+Cn3+...+CnnC_n^1+C_n^2+C_n^3+...+C_n^nCn1​+Cn2​+Cn3​+...+Cnn​项 Cn0+Cn1+Cn2+Cn3+...+CnnC_n^0+C_n^1+C_n^2+C_n^3+...+C_n^nCn0​+Cn1​+Cn2​+Cn3​+...+Cnn​代表从nnn当中选择任意个数的方案数，所以=2n=2^n=2n 则共有2n−Cn0=2n−12^n-C_n^0=2^n-12n−Cn0​=2n−1项；时间复杂度是2n2^n2n 博弈论 先手必胜状态：可以走到某一个必胜状态a1∧a2∧...∧an≠0a_1 \\land a_2 \\land ... \\land a_n \\ne 0a1​∧a2​∧...∧an​=0 先手必败状态：走不到任何一个必胜状态 a1∧a2∧...∧an=0a_1 \\land a_2 \\land ... \\land a_n=0a1​∧a2​∧...∧an​=0","link":"/2023/10/11/%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98/"},{"title":"树图算法","text":"树和图的遍历；拓扑排序；Dijkstra；Bellman-Ford；spfa；floyd；prim；Kruskal；染色法；匈牙利 存储 树是一种特殊的图，与图的存储方式相同。 对于无向图中的边ababab，存储两条有向边a−&gt;b,b−&gt;aa-&gt;b, b-&gt;aa−&gt;b,b−&gt;a；因此我们可以只考虑有向图的存储。 存储方式（因此一般考虑有向图即可） 邻接矩阵：g[a][b]g[a][b]g[a][b] 存储边a−&gt;ba-&gt;ba−&gt;b 邻接表： 123456789101112131415// 对于每个点k，开一个单链表，存储k所有可以走到的点// h[k]存储这个单链表的头结点指向的值// e[]存储的是所有结点值// ne[]存储是所有结点的next值int h[N], e[N], ne[N], idx;// 添加一条边a-&gt;bvoid add(int a, int b){ e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ;}// 初始化idx = 0;memset(h, -1, sizeof h); 树与图的遍历 时间复杂度 O(n+m)O(n+m)O(n+m), nnn表示点数，mmm表示边数 深度优先遍历 12345678910int dfs(int u){ st[u] = true; // st[u] 表示点u已经被遍历过 for (int i = h[u]; i != -1; i = ne[i]) { int j = e[i]; if (!st[j]) dfs(j); }} 宽度优先遍历 12345678910111213141516171819queue&lt;int&gt; q;st[1] = true; // 表示1号点已经被遍历过q.push(1);while (q.size()){ int t = q.front(); q.pop(); for (int i = h[t]; i != -1; i = ne[i]) { int j = e[i]; if (!s[j]) { st[j] = true; // 表示点j已经被遍历过 q.push(j); } }} 拓扑排序 是BFS的应用 时间复杂度 O(n+m)O(n+m)O(n+m), nnn表示点数，mmm表示边数 123456789101112131415161718192021222324252627bool topsort(){ int hh = 0, tt = -1; // d[i] 存储点i的入度 for (int i = 1; i &lt;= n; i ++ ) if (!d[i]) // 存储所有入度为0的点 q[ ++ tt] = i; while (hh &lt;= tt) { int t = q[hh ++ ]; // 枚举所有出边 for (int i = h[t]; i != -1; i = ne[i]) { int j = e[i]; if (-- d[j] == 0) // 加入入度为0的点 q[ ++ tt] = j; } } // 如果所有点都入队了，说明存在拓扑序列；否则不存在拓扑序列。 return tt == n - 1; // 出队的顺序即使拓扑序列} 最短路径 nnn代表点，mmm代表边，只是有向图（包含无向图） 重边；自环 Dijkstra算法 朴素dijkstra 时间复杂度 O(n2+m)O(n^2+m)O(n2+m), nnn表示点数，mmm表示边数 12345678910111213141516171819202122232425262728int g[N][N]; // 存储每条边int dist[N]; // 存储1号点到每个点的最短距离bool st[N]; // 存储每个点的最短路是否已经确定// 求1号点到n号点的最短路，如果不存在则返回-1int dijkstra(){ memset(dist, 0x3f, sizeof dist); dist[1] = 0; // 每次循环可以确定一个点的最短距离 for (int i = 0; i &lt; n - 1; i ++ ) { int t = -1; // 在还未确定最短路的点中，寻找距离最小的点 for (int j = 1; j &lt;= n; j ++ ) if (!st[j] &amp;&amp; (t == -1 || dist[t] &gt; dist[j])) t = j; // 用t更新其他点的距离 for (int j = 1; j &lt;= n; j ++ ) dist[j] = min(dist[j], dist[t] + g[t][j]); st[t] = true; } if (dist[n] == 0x3f3f3f3f) return -1; return dist[n];} 堆优化版dijkstra 稀疏，改成邻接表形式 时间复杂度 O(mlogn)O(mlogn)O(mlogn), nnn表示点数，mmm表示边数 123456789101112131415161718192021222324252627282930313233343536373839typedef pair&lt;int, int&gt; PII;int n; // 点的数量int h[N], w[N], e[N], ne[N], idx; // 邻接表存储所有边int dist[N]; // 存储所有点到1号点的距离bool st[N]; // 存储每个点的最短距离是否已确定// 求1号点到n号点的最短距离，如果不存在，则返回-1int dijkstra(){ memset(dist, 0x3f, sizeof dist); dist[1] = 0; priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap; heap.push({0, 1}); // first存储距离，second存储节点编号 while (heap.size()) { auto t = heap.top(); heap.pop(); int ver = t.second, distance = t.first; if (st[ver]) continue; st[ver] = true; for (int i = h[ver]; i != -1; i = ne[i]) { int j = e[i]; if (dist[j] &gt; distance + w[i]) { dist[j] = distance + w[i]; heap.push({dist[j], j}); } } } if (dist[n] == 0x3f3f3f3f) return -1; return dist[n];} Bellman-Ford算法 有负权回路，最短路径不一定存在；可以求是不是有负权回路 时间复杂度 O(mn)O(mn)O(mn), nnn表示点数，mmm表示边数 1234567891011121314151617181920212223242526272829303132int n, m; // n表示点数，m表示边数int dist[N]; // dist[x]存储1到x的最短路距离struct Edge // 边，a表示出点，b表示入点，w表示边的权重{ int a, b, w;}edges[M];// 求1到n的最短路距离，如果无法从1走到n，则返回-1。int bellman_ford(){ memset(dist, 0x3f, sizeof dist); dist[1] = 0; // 如果第n次迭代仍然会松弛三角不等式，就说明存在一条长度是n+1的最短路径，由抽屉原理，路径中至少存在两个相同的点，说明图中存在负权回路。 // 迭代k次代表每个点到源点的最短距离经过的边数不超过k for (int i = 0; i &lt; n; i ++ ) { // 需要进行备份，只能用上一次的结果 memcpy(backup, dist, sizeof dist); for (int j = 0; j &lt; m; j ++ ) { int a = edges[j].a, b = edges[j].b, w = edges[j].w; if (dist[b] &gt; dist[a] + w) dist[b] = dist[a] + w; } } // 不能直接是==0x3f3f3f3f，可能会直接更新 if (dist[n] &gt; 0x3f3f3f3f / 2) return -1; return dist[n];} spfa 算法 只要图当中没有负环即可 算法模版 队列优化的Bellman-Ford算法 时间复杂度平均情况 O(m)O(m)O(m),最坏情况O(mn)O(mn)O(mn) nnn表示点数，mmm表示边数 123456789101112131415161718192021222324252627282930313233343536373839404142int n; // 总点数int h[N], w[N], e[N], ne[N], idx; // 邻接表存储所有边int dist[N]; // 存储每个点到1号点的最短距离bool st[N]; // 存储每个点是否在队列中// 求1号点到n号点的最短路距离，如果从1号点无法走到n号点则返回-1int spfa(){ memset(dist, 0x3f, sizeof dist); dist[1] = 0; queue&lt;int&gt; q; // q存储的是待更新的点 q.push(1); st[1] = true; while (q.size()) { auto t = q.front(); q.pop(); st[t] = false; // 遍历和t关联的所有点，判断是否可以更新 for (int i = h[t]; i != -1; i = ne[i]) { int j = e[i]; if (dist[j] &gt; dist[t] + w[i]) { dist[j] = dist[t] + w[i]; if (!st[j]) // 如果队列中已存在j，则不需要将j重复插入 { q.push(j); st[j] = true; } } } } if (dist[n] == 0x3f3f3f3f) return -1; return dist[n];} 判断图中是否存在负环 时间复杂度 O(nm)O(nm)O(nm)， nnn表示点数，mmm表示边数 123456789101112131415161718192021222324252627282930313233343536373839404142434445int n; // 总点数int h[N], w[N], e[N], ne[N], idx; // 邻接表存储所有边int dist[N], cnt[N]; // dist[x]存储1号点到x的最短距离，cnt[x]存储1到x的最短路中经过的点数bool st[N]; // 存储每个点是否在队列中// 如果存在负环，则返回true，否则返回false。bool spfa(){ // 不需要初始化dist数组 // 原理：如果某条最短路径上有n个点（除了自己），那么加上自己之后一共有n+1个点，由抽屉原理一定有两个点相同，所以存在环。 queue&lt;int&gt; q; // 对于所有的点都需要遍历到 for (int i = 1; i &lt;= n; i ++ ) { q.push(i); st[i] = true; } while (q.size()) { auto t = q.front(); q.pop(); st[t] = false; for (int i = h[t]; i != -1; i = ne[i]) { int j = e[i]; if (dist[j] &gt; dist[t] + w[i]) { dist[j] = dist[t] + w[i]; cnt[j] = cnt[t] + 1; if (cnt[j] &gt;= n) return true; // 如果从1号点到x的最短路中包含至少n个点（不包括自己），则说明存在环 if (!st[j]) { q.push(j); st[j] = true; } } } } return false;} floyd算法 时间复杂度 O(n3)O(n^3)O(n3)， nnn表示点数，mmm表示边数 12345678910111213141516// 初始化： for (int i = 1; i &lt;= n; i ++ ) for (int j = 1; j &lt;= n; j ++ ) if (i == j) d[i][j] = 0; else d[i][j] = INF;// 算法结束后，d[a][b]表示a到b的最短距离void floyd(){ // k是阶段 for (int k = 1; k &lt;= n; k ++ ) for (int i = 1; i &lt;= n; i ++ ) for (int j = 1; j &lt;= n; j ++ ) // 代表只经过1-k个点，从i到j的最短距离 d[i][j] = min(d[i][j], d[i][k] + d[k][j]);} 最小生成树 朴素版prim算法 时间复杂度 O(n2+m)O(n^2+m)O(n2+m)， nnn表示点数，mmm表示边数 1234567891011121314151617181920212223242526272829int n; // n表示点数int g[N][N]; // 邻接矩阵，存储所有边int dist[N]; // 存储其他点到当前最小生成树的距离bool st[N]; // 存储每个点是否已经在生成树中// 如果图不连通，则返回INF(值是0x3f3f3f3f), 否则返回最小生成树的树边权重之和int prim(){ memset(dist, 0x3f, sizeof dist); int res = 0; for (int i = 0; i &lt; n; i ++ ) { int t = -1; for (int j = 1; j &lt;= n; j ++ ) if (!st[j] &amp;&amp; (t == -1 || dist[t] &gt; dist[j])) t = j; if (i &amp;&amp; dist[t] == INF) return INF; if (i) res += dist[t]; st[t] = true; for (int j = 1; j &lt;= n; j ++ ) dist[j] = min(dist[j], g[t][j]); } return res;} Kruskal算法 时间复杂度 O(mlogm)O(mlogm)O(mlogm)， nnn表示点数，mmm表示边数 123456789101112131415161718192021222324252627282930313233343536373839404142int n, m; // n是点数，m是边数int p[N]; // 并查集的父节点数组struct Edge // 存储边{ int a, b, w; bool operator&lt; (const Edge &amp;W)const { return w &lt; W.w; }}edges[M];int find(int x) // 并查集核心操作{ if (p[x] != x) p[x] = find(p[x]); return p[x];}int kruskal(){ sort(edges, edges + m); for (int i = 1; i &lt;= n; i ++ ) p[i] = i; // 初始化并查集 int res = 0, cnt = 0; for (int i = 0; i &lt; m; i ++ ) { int a = edges[i].a, b = edges[i].b, w = edges[i].w; a = find(a), b = find(b); if (a != b) // 如果两个连通块不连通，则将这两个连通块合并 { p[a] = b; res += w; cnt ++ ; } } if (cnt &lt; n - 1) return INF; return res;} 染色法判别二分图 二分图的几个性质： 二分图不一定是连通图 一定不含有奇数环；可以包含长度为偶数的环 任何无回路的图均是二分图 O(n+m)O(n+m)O(n+m) 匈牙利算法 O(mn)O(mn)O(mn)","link":"/2023/09/18/%E6%A0%91%E5%92%8C%E5%9B%BE/"},{"title":"线性DP","text":"数字三角形；最长上升子序列；最长公共子序列；编辑距离 数字三角形 f(i,j)f(i,j)f(i,j)表示从起点走到(i,j)(i,j)(i,j)终点的所有路径中，路径长度的最大值MAXMAXMAX 递推公式：dp[i][j]=max(dp[i−1][j−1]+a[i][j],dp[i−1][j]+a[i][j])dp[i][j]=max(dp[i-1][j-1]+a[i][j],dp[i-1][j]+a[i][j])dp[i][j]=max(dp[i−1][j−1]+a[i][j],dp[i−1][j]+a[i][j]) 最长上升子序列 f(i)f(i)f(i)表示所有以iii结尾的上升子序列中，序列长度的最大值MAXMAXMAX 递推公式：dp[i]=max(dp[j]+1)j=0,1,2...i−1dp[i]=max(dp[j]+1) \\quad j=0,1,2...i-1dp[i]=max(dp[j]+1)j=0,1,2...i−1 前提就是dp[i]&gt;dp[j]dp[i]&gt;dp[j]dp[i]&gt;dp[j] 优化做法(贪心)： q数组下标为序列长度，值为所有该序列长度中具有的末尾最小值，该数组是严格单调递增的 遍历到一个新的值a[i]，则找q数组中小于它的最大值q[j]，找到则可以替换q[j+1]-可以用二分 证明q数组是严格单调递增的：如果长度为6的结尾最小值=长度为5的结尾最小值，则矛盾（因为是最长上升子序列） 最长公共子序列 f[i,j]f[i,j]f[i,j]表示第一个序列的前iii个字母和第二个序列的前jjj个字母所有公共子序列中，子序列长度的最大值MAXMAXMAX 求最大值，最小值分类是可以有重复的；但是求数量不可以 编辑距离 f[i,j]f[i,j]f[i,j]表示所有将a[1−i]a[1-i]a[1−i]变成b[1−j]b[1-j]b[1−j]的操作方式中，操作次数的最小值MINMINMIN 递推公式：dp[i][j]=min(dp[i−1][j]+1,dp[i][j−1]+1,dp[i−1][j−1]+1/0)dp[i][j]=min(dp[i-1][j]+1,dp[i][j-1]+1,dp[i-1][j-1]+1/0)dp[i][j]=min(dp[i−1][j]+1,dp[i][j−1]+1,dp[i−1][j−1]+1/0) 4种情况(转换为代码，主要还是看来的方向) 删除：如果删除a[i]a[i]a[i]后匹配(a[i]!=b[j])a[i]!=b[j])a[i]!=b[j])；a[1∼i−1]a[1 \\sim i-1]a[1∼i−1]和b[1∼j]b[1 \\sim j]b[1∼j]匹配； 插入：如果插入a[i]a[i]a[i]后匹配(a[i]=b[j])a[i]=b[j])a[i]=b[j])；a[1∼i]a[1 \\sim i]a[1∼i]和b[1∼j−1]b[1 \\sim j-1]b[1∼j−1]匹配； 替换：如果a[i]a[i]a[i]替换成b[j]b[j]b[j]后匹配(a[i]!=b[j])a[i]!=b[j])a[i]!=b[j])，a[1∼i−1]a[1 \\sim i-1]a[1∼i−1]和b[1∼j−1]b[1 \\sim j-1]b[1∼j−1]匹配； 相等：如果不做任何操作后匹配(a[i]=b[j]a[i]=b[j]a[i]=b[j])，则a[1∼i−1]a[1 \\sim i-1]a[1∼i−1]和b[1∼j−1]b[1 \\sim j-1]b[1∼j−1]匹配；","link":"/2023/09/12/%E7%BA%BF%E6%80%A7DP/"},{"title":"背包问题","text":"01背包；完全背包；多重背包；分组背包；混合背包 DP优化一般是对代码或者方程做一个等价变形 复杂度是状态数量×转移时间 背包问题中f(i,j)f(i,j)f(i,j)表示物品数量为iii，容量为jjj时候所有物品组合中，价值的最大值MAXMAXMAX 01背包 递推公式：dp[i][j]=max(dp[i−1][j],dp[i−1][j−w]+v);dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - w ]+ v);dp[i][j]=max(dp[i−1][j],dp[i−1][j−w]+v); 优化：二维变一维(滚动数组) 第iii层的数据可以直接用i−1i-1i−1层的数据 公式：dp[j]=max(dp[j],dp[j−w]+v);dp[j] = max(dp[j], dp[j - w] + v);dp[j]=max(dp[j],dp[j−w]+v); 如果jjj从小到大循环，则原来dp[j]dp[j]dp[j]中jjj小的值会被覆盖掉，则会导致物品iii在循环过程中被放置很多次 完全背包 递推公式：dp[i][j]=max(dp[i−1][j−w∗k]+v∗k)kdp[i][j]=max(dp[i-1][j-w*k]+v*k) \\quad kdp[i][j]=max(dp[i−1][j−w∗k]+v∗k)k动态变 和01背包问题区别就是，01背包f[i][j]f[i][j]f[i][j]是分为两个，完全背包f[i][j]f[i][j]f[i][j]分为kkk个 优化：通过表达式改进 dp[i][j]=max(dp[i−1,j],dp[i−1][j−w]+v,dp[i−1][j−2w]+2v,...)dp[i][j]=max(dp[i-1,j],dp[i-1][j-w]+v,dp[i-1][j-2w]+2v,...)dp[i][j]=max(dp[i−1,j],dp[i−1][j−w]+v,dp[i−1][j−2w]+2v,...) dp[i][j−w]=max(dp[i−1,j−w],dp[i−1][j−2w]+v,dp[i−1][j−3w]+2v,...)dp[i][j-w]=max(dp[i-1,j-w],dp[i-1][j-2w]+v,dp[i-1][j-3w]+2v,...)dp[i][j−w]=max(dp[i−1,j−w],dp[i−1][j−2w]+v,dp[i−1][j−3w]+2v,...) 可以发现dp[i,j−w]dp[i,j-w]dp[i,j−w]和上面的式子后半部分就少了vvv，表达式变为：dp[i,j]=max(dp[i−1,j],dp[i,j−w]+v)dp[i,j]=max(dp[i-1,j],dp[i,j-w]+v)dp[i,j]=max(dp[i−1,j],dp[i,j−w]+v) 然后可以改为一维：dp[i,j]=max(dp[j],dp[j−w]+v)dp[i,j]=max(dp[j],dp[j-w]+v)dp[i,j]=max(dp[j],dp[j−w]+v) 改为一维之后的方程是从小到大的，就是用的前面的结果，因为物品可以被添加多次-最终和01背包问题差的就是对于jjj循环的顺序了 多重背包 和完全背包很像：dp[i][j]=max(dp[i−1][j−w∗k]+v∗k)k=1,2,..,s[i]dp[i][j]=max(dp[i-1][j-w*k]+v*k) \\quad k=1,2,..,s[i]dp[i][j]=max(dp[i−1][j−w∗k]+v∗k)k=1,2,..,s[i] 转换为01背包问题：相当于第iii个物品可以最多拿s[i]s[i]s[i]个 用二进制表示法：将s[i]s[i]s[i]分解为1,2,4,8...2k,s[i]−1,2,4,8...2^k,s[i]-1,2,4,8...2k,s[i]−前面的，那么0−s[i]0-s[i]0−s[i]当中的任何一个数都可以用这些分解出来的数组合表示 如果用二进制表示：则从s[i]s[i]s[i]个变成了logs[i]logs[i]logs[i]个，然后就可以按照01背包问题的优化来解决了 分组背包 递推公式：dp[i][j]=max(dp[i][j],dp[i−1][j−w[i][k]]+v[i][k])dp[i][j]=max(dp[i][j],dp[i−1][j−w[i][k]]+v[i][k])dp[i][j]=max(dp[i][j],dp[i−1][j−w[i][k]]+v[i][k]) 和01背包问题区别就是w[i]w[i]w[i]也需要进行kkk次循环了 优化(滚动数组)：dp[j]=max(dp[j],dp[j−w[i][k]]+v[i][k]dp[j]=max(dp[j],dp[j−w[i][k]]+v[i][k]dp[j]=max(dp[j],dp[j−w[i][k]]+v[i][k] 总结一下 几种问题问法和递推公式 能否能装满背包：dp[j] = max(dp[j], dp[j - nums[i]] + nums[i]); 装满背包有几种方法：dp[j] += dp[j - nums[i]] 背包装满最大价值：dp[j] = max(dp[j], dp[j - weight[i]] + value[i]) 装满背包所有物品的最小个数：dp[j] = min(dp[j - coins[i]] + 1, dp[j]) 遍历顺序 完全背包问题 如果求组合数就是外层for循环遍历物品，内层for遍历背包 如果求排列数就是外层for遍历背包，内层for循环遍历物品","link":"/2023/09/12/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"},{"title":"贪心问题","text":"贪心算法一般分为如下四步： 将问题分解为若干个子问题 找出适合的贪心策略 求解每一个子问题的最优解 将局部最优解堆叠成全局最优解 但是一般找到局部最优解，推出全局最优解即可","link":"/2024/04/18/%E8%B4%AA%E5%BF%83%E9%97%AE%E9%A2%98/"},{"title":"递归问题","text":"递归 确定递归函数的参数和返回值 确定终止条件 确定单层递归的逻辑","link":"/2024/04/18/%E9%80%92%E5%BD%92%E9%97%AE%E9%A2%98/"}],"tags":[{"name":"哈希表","slug":"哈希表","link":"/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"},{"name":"DFS","slug":"DFS","link":"/tags/DFS/"},{"name":"AI","slug":"AI","link":"/tags/AI/"},{"name":"BFS","slug":"BFS","link":"/tags/BFS/"},{"name":"Flowable","slug":"Flowable","link":"/tags/Flowable/"},{"name":"Huggingface","slug":"Huggingface","link":"/tags/Huggingface/"},{"name":"Jetbrains","slug":"Jetbrains","link":"/tags/Jetbrains/"},{"name":"数组","slug":"数组","link":"/tags/%E6%95%B0%E7%BB%84/"},{"name":"二分查找","slug":"二分查找","link":"/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"},{"name":"滑动窗口","slug":"滑动窗口","link":"/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"},{"name":"Latex","slug":"Latex","link":"/tags/Latex/"},{"name":"二叉树","slug":"二叉树","link":"/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"name":"字符串","slug":"字符串","link":"/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"},{"name":"数字","slug":"数字","link":"/tags/%E6%95%B0%E5%AD%97/"},{"name":"广度优先搜索","slug":"广度优先搜索","link":"/tags/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"},{"name":"树","slug":"树","link":"/tags/%E6%A0%91/"},{"name":"动态规划","slug":"动态规划","link":"/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"},{"name":"单链表","slug":"单链表","link":"/tags/%E5%8D%95%E9%93%BE%E8%A1%A8/"},{"name":"图","slug":"图","link":"/tags/%E5%9B%BE/"},{"name":"链表","slug":"链表","link":"/tags/%E9%93%BE%E8%A1%A8/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"双指针","slug":"双指针","link":"/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"},{"name":"位运算","slug":"位运算","link":"/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"},{"name":"数学","slug":"数学","link":"/tags/%E6%95%B0%E5%AD%A6/"},{"name":"贪心","slug":"贪心","link":"/tags/%E8%B4%AA%E5%BF%83/"},{"name":"队列","slug":"队列","link":"/tags/%E9%98%9F%E5%88%97/"},{"name":"排序","slug":"排序","link":"/tags/%E6%8E%92%E5%BA%8F/"},{"name":"单调队列","slug":"单调队列","link":"/tags/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"},{"name":"深度优先搜索","slug":"深度优先搜索","link":"/tags/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"},{"name":"字典树","slug":"字典树","link":"/tags/%E5%AD%97%E5%85%B8%E6%A0%91/"},{"name":"回溯","slug":"回溯","link":"/tags/%E5%9B%9E%E6%BA%AF/"},{"name":"矩阵","slug":"矩阵","link":"/tags/%E7%9F%A9%E9%98%B5/"},{"name":"#数组","slug":"数组","link":"/tags/%E6%95%B0%E7%BB%84/"},{"name":"#双指针","slug":"双指针","link":"/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"},{"name":"堆（优先队列）","slug":"堆（优先队列）","link":"/tags/%E5%A0%86%EF%BC%88%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%EF%BC%89/"},{"name":"栈","slug":"栈","link":"/tags/%E6%A0%88/"},{"name":"单调栈","slug":"单调栈","link":"/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"},{"name":"#单调栈","slug":"单调栈","link":"/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"},{"name":"#设计","slug":"设计","link":"/tags/%E8%AE%BE%E8%AE%A1/"},{"name":"#栈","slug":"栈","link":"/tags/%E6%A0%88/"},{"name":"#哈希表","slug":"哈希表","link":"/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"},{"name":"#链表","slug":"链表","link":"/tags/%E9%93%BE%E8%A1%A8/"},{"name":"#树","slug":"树","link":"/tags/%E6%A0%91/"},{"name":"#二叉搜索树","slug":"二叉搜索树","link":"/tags/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"},{"name":"#回溯","slug":"回溯","link":"/tags/%E5%9B%9E%E6%BA%AF/"},{"name":"#二叉树","slug":"二叉树","link":"/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"name":"#位运算","slug":"位运算","link":"/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"},{"name":"#数学","slug":"数学","link":"/tags/%E6%95%B0%E5%AD%A6/"},{"name":"#二分查找","slug":"二分查找","link":"/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"},{"name":"#字符串","slug":"字符串","link":"/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"},{"name":"#动态规划","slug":"动态规划","link":"/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"},{"name":"#几何","slug":"几何","link":"/tags/%E5%87%A0%E4%BD%95/"},{"name":"Neo4j","slug":"Neo4j","link":"/tags/Neo4j/"},{"name":"Notion","slug":"Notion","link":"/tags/Notion/"},{"name":"mac","slug":"mac","link":"/tags/mac/"},{"name":"Obsidian","slug":"Obsidian","link":"/tags/Obsidian/"},{"name":"WPS","slug":"WPS","link":"/tags/WPS/"},{"name":"VSCode","slug":"VSCode","link":"/tags/VSCode/"},{"name":"STL","slug":"STL","link":"/tags/STL/"},{"name":"Git","slug":"Git","link":"/tags/Git/"},{"name":"其他","slug":"其他","link":"/tags/%E5%85%B6%E4%BB%96/"},{"name":"区间DP","slug":"区间DP","link":"/tags/%E5%8C%BA%E9%97%B4DP/"},{"name":"计数类DP","slug":"计数类DP","link":"/tags/%E8%AE%A1%E6%95%B0%E7%B1%BBDP/"},{"name":"数位统计DP","slug":"数位统计DP","link":"/tags/%E6%95%B0%E4%BD%8D%E7%BB%9F%E8%AE%A1DP/"},{"name":"状态压缩DP","slug":"状态压缩DP","link":"/tags/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9DP/"},{"name":"树形DP","slug":"树形DP","link":"/tags/%E6%A0%91%E5%BD%A2DP/"},{"name":"记忆化搜索","slug":"记忆化搜索","link":"/tags/%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2/"},{"name":"区间问题","slug":"区间问题","link":"/tags/%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/"},{"name":"二分","slug":"二分","link":"/tags/%E4%BA%8C%E5%88%86/"},{"name":"高精度","slug":"高精度","link":"/tags/%E9%AB%98%E7%B2%BE%E5%BA%A6/"},{"name":"前缀和与差分","slug":"前缀和与差分","link":"/tags/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/"},{"name":"双指针算法","slug":"双指针算法","link":"/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/"},{"name":"离散化","slug":"离散化","link":"/tags/%E7%A6%BB%E6%95%A3%E5%8C%96/"},{"name":"排序算法","slug":"排序算法","link":"/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"},{"name":"数据结构","slug":"数据结构","link":"/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"KMP字符串","slug":"KMP字符串","link":"/tags/KMP%E5%AD%97%E7%AC%A6%E4%B8%B2/"},{"name":"Trie树","slug":"Trie树","link":"/tags/Trie%E6%A0%91/"},{"name":"并查集","slug":"并查集","link":"/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"},{"name":"哈希","slug":"哈希","link":"/tags/%E5%93%88%E5%B8%8C/"},{"name":"拓扑排序","slug":"拓扑排序","link":"/tags/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"},{"name":"Dijkstra","slug":"Dijkstra","link":"/tags/Dijkstra/"},{"name":"Bellman-Ford","slug":"Bellman-Ford","link":"/tags/Bellman-Ford/"},{"name":"spfa","slug":"spfa","link":"/tags/spfa/"},{"name":"floyd","slug":"floyd","link":"/tags/floyd/"},{"name":"prim","slug":"prim","link":"/tags/prim/"},{"name":"Kruskal","slug":"Kruskal","link":"/tags/Kruskal/"},{"name":"染色法","slug":"染色法","link":"/tags/%E6%9F%93%E8%89%B2%E6%B3%95/"},{"name":"匈牙利","slug":"匈牙利","link":"/tags/%E5%8C%88%E7%89%99%E5%88%A9/"},{"name":"线性DP","slug":"线性DP","link":"/tags/%E7%BA%BF%E6%80%A7DP/"},{"name":"背包问题","slug":"背包问题","link":"/tags/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"},{"name":"递归","slug":"递归","link":"/tags/%E9%80%92%E5%BD%92/"}],"categories":[{"name":"题解","slug":"题解","link":"/categories/%E9%A2%98%E8%A7%A3/"},{"name":"其他","slug":"其他","link":"/categories/%E5%85%B6%E4%BB%96/"},{"name":"AcWing","slug":"题解/AcWing","link":"/categories/%E9%A2%98%E8%A7%A3/AcWing/"},{"name":"DeepML","slug":"题解/DeepML","link":"/categories/%E9%A2%98%E8%A7%A3/DeepML/"},{"name":"LeetCode","slug":"题解/LeetCode","link":"/categories/%E9%A2%98%E8%A7%A3/LeetCode/"},{"name":"算法","slug":"算法","link":"/categories/%E7%AE%97%E6%B3%95/"},{"name":"其他补充","slug":"算法/其他补充","link":"/categories/%E7%AE%97%E6%B3%95/%E5%85%B6%E4%BB%96%E8%A1%A5%E5%85%85/"},{"name":"基础算法","slug":"算法/基础算法","link":"/categories/%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"},{"name":"动态规划","slug":"算法/动态规划","link":"/categories/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"},{"name":"树图算法","slug":"算法/树图算法","link":"/categories/%E7%AE%97%E6%B3%95/%E6%A0%91%E5%9B%BE%E7%AE%97%E6%B3%95/"},{"name":"贪心算法","slug":"算法/贪心算法","link":"/categories/%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"},{"name":"搜索算法","slug":"算法/搜索算法","link":"/categories/%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/"},{"name":"数学问题","slug":"算法/数学问题","link":"/categories/%E7%AE%97%E6%B3%95/%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98/"},{"name":"贪心","slug":"算法/贪心","link":"/categories/%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83/"}],"pages":[{"title":"About Zzl3","text":"","link":"/about/index.html"},{"title":"","text":"==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠== Text Elements null ^YzEtXThz a-c ^jCnOVqnO b-c ^NJTDezN3 c ^qU9R6eYh %% Drawing{ &quot;type&quot;: &quot;excalidraw&quot;, &quot;version&quot;: 2, &quot;source&quot;: &quot;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.1.6&quot;, &quot;elements&quot;: [ { &quot;id&quot;: &quot;BafOZgH20M7cVdKmHIZko&quot;, &quot;type&quot;: &quot;ellipse&quot;, &quot;x&quot;: -252.1878662109375, &quot;y&quot;: -195.49757385253906, &quot;width&quot;: 53.816192626953125, &quot;height&quot;: 50.40650939941406, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#e03131&quot;, &quot;backgroundColor&quot;: &quot;#ffc9c9&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;seed&quot;: 1953899128, &quot;version&quot;: 42, &quot;versionNonce&quot;: 549881608, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1717305959495, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;ellipse&quot;, &quot;version&quot;: 64, &quot;versionNonce&quot;: 437210488, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;X_SRvU1aS61jWTf6Vcwl7&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -144.9170379638672, &quot;y&quot;: -160.46381378173828, &quot;strokeColor&quot;: &quot;#e03131&quot;, &quot;backgroundColor&quot;: &quot;#ffc9c9&quot;, &quot;width&quot;: 53.816192626953125, &quot;height&quot;: 50.40650939941406, &quot;seed&quot;: 440071688, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717305959495, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;ellipse&quot;, &quot;version&quot;: 112, &quot;versionNonce&quot;: 1265657352, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;kRSB-eiAVqymAPNPQ5sIZ&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -38.16133117675781, &quot;y&quot;: -113.0657730102539, &quot;strokeColor&quot;: &quot;#e03131&quot;, &quot;backgroundColor&quot;: &quot;#ffc9c9&quot;, &quot;width&quot;: 53.816192626953125, &quot;height&quot;: 50.40650939941406, &quot;seed&quot;: 1625216376, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717305959495, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;ellipse&quot;, &quot;version&quot;: 145, &quot;versionNonce&quot;: 783736440, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;OOvvWkqbJd29Edax-eLNT&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -37.02131652832031, &quot;y&quot;: 1.3886032104492188, &quot;strokeColor&quot;: &quot;#2f9e44&quot;, &quot;backgroundColor&quot;: &quot;#b2f2bb&quot;, &quot;width&quot;: 53.816192626953125, &quot;height&quot;: 50.40650939941406, &quot;seed&quot;: 1801717624, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717305959496, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;ellipse&quot;, &quot;version&quot;: 148, &quot;versionNonce&quot;: 1669752072, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;RGbEW_hsSVgyRSPS_3YYm&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 80.52360534667969, &quot;y&quot;: -56.390419006347656, &quot;strokeColor&quot;: &quot;#f08c00&quot;, &quot;backgroundColor&quot;: &quot;#ffec99&quot;, &quot;width&quot;: 53.816192626953125, &quot;height&quot;: 50.40650939941406, &quot;seed&quot;: 136104456, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717305959496, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;ellipse&quot;, &quot;version&quot;: 191, &quot;versionNonce&quot;: 1245990776, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;OzFeFd49CjsxdBANr3rJe&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 204.30650329589844, &quot;y&quot;: -58.585243225097656, &quot;strokeColor&quot;: &quot;#1971c2&quot;, &quot;backgroundColor&quot;: &quot;#a5d8ff&quot;, &quot;width&quot;: 53.816192626953125, &quot;height&quot;: 50.40650939941406, &quot;seed&quot;: 863462664, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717305959496, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;ellipse&quot;, &quot;version&quot;: 230, &quot;versionNonce&quot;: 646218760, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;uOqtVl8m32SOJHzq87Jkf&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 320.1527557373047, &quot;y&quot;: -55.95136260986328, &quot;strokeColor&quot;: &quot;#1971c2&quot;, &quot;backgroundColor&quot;: &quot;#a5d8ff&quot;, &quot;width&quot;: 53.816192626953125, &quot;height&quot;: 50.40650939941406, &quot;seed&quot;: 1602131976, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717305959496, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;id&quot;: &quot;qGhr6yFap_L6g8AyKtv87&quot;, &quot;type&quot;: &quot;line&quot;, &quot;x&quot;: -199.9217529296875, &quot;y&quot;: -161.6434326171875, &quot;width&quot;: 54.3092041015625, &quot;height&quot;: 17.2877197265625, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#e03131&quot;, &quot;backgroundColor&quot;: &quot;#a5d8ff&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;seed&quot;: 1930044280, &quot;version&quot;: 42, &quot;versionNonce&quot;: 1425776760, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1717305959496, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ 54.3092041015625, 17.2877197265625 ] ], &quot;lastCommittedPoint&quot;: null, &quot;startBinding&quot;: null, &quot;endBinding&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: null }, { &quot;id&quot;: &quot;qXQPMjTV9w1Z2M6Ughrki&quot;, &quot;type&quot;: &quot;line&quot;, &quot;x&quot;: -90.40338134765625, &quot;y&quot;: -124.60137939453125, &quot;width&quot;: 54.3505859375, &quot;height&quot;: 27.34381103515625, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#e03131&quot;, &quot;backgroundColor&quot;: &quot;#a5d8ff&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;seed&quot;: 263538696, &quot;version&quot;: 55, &quot;versionNonce&quot;: 1114030856, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1717305959496, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ 54.3505859375, 27.34381103515625 ] ], &quot;lastCommittedPoint&quot;: null, &quot;startBinding&quot;: null, &quot;endBinding&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: null }, { &quot;id&quot;: &quot;yLNqsRRPwJuubp9epqmPD&quot;, &quot;type&quot;: &quot;line&quot;, &quot;x&quot;: 16.53399658203125, &quot;y&quot;: -81.72274780273438, &quot;width&quot;: 64.940185546875, &quot;height&quot;: 39.501800537109375, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#e03131&quot;, &quot;backgroundColor&quot;: &quot;#a5d8ff&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;seed&quot;: 629571960, &quot;version&quot;: 77, &quot;versionNonce&quot;: 245420408, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1717305959496, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ 64.940185546875, 39.501800537109375 ] ], &quot;lastCommittedPoint&quot;: null, &quot;startBinding&quot;: null, &quot;endBinding&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: null }, { &quot;id&quot;: &quot;08WFb-jXWLaMVz9B2Ylr6&quot;, &quot;type&quot;: &quot;line&quot;, &quot;x&quot;: 10.8548583984375, &quot;y&quot;: 9.14080810546875, &quot;width&quot;: 70.01434326171875, &quot;height&quot;: 27.686248779296875, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#2f9e44&quot;, &quot;backgroundColor&quot;: &quot;#a5d8ff&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;seed&quot;: 511173240, &quot;version&quot;: 57, &quot;versionNonce&quot;: 1951754760, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1717305963056, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ 70.01434326171875, -27.686248779296875 ] ], &quot;lastCommittedPoint&quot;: null, &quot;startBinding&quot;: null, &quot;endBinding&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: null }, { &quot;id&quot;: &quot;Y9cfLrvfb63PoM8eCJLU7&quot;, &quot;type&quot;: &quot;line&quot;, &quot;x&quot;: 136.01702880859375, &quot;y&quot;: -32.57684326171875, &quot;width&quot;: 67.6927490234375, &quot;height&quot;: 0.858978271484375, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1971c2&quot;, &quot;backgroundColor&quot;: &quot;#a5d8ff&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;seed&quot;: 824895752, &quot;version&quot;: 32, &quot;versionNonce&quot;: 1892166008, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1717305971925, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ 67.6927490234375, -0.858978271484375 ] ], &quot;lastCommittedPoint&quot;: null, &quot;startBinding&quot;: null, &quot;endBinding&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: null }, { &quot;id&quot;: &quot;WAj85awT96KA_qFMafdub&quot;, &quot;type&quot;: &quot;line&quot;, &quot;x&quot;: 258.5777587890625, &quot;y&quot;: -34.2794189453125, &quot;width&quot;: 63.591552734375, &quot;height&quot;: 2.820465087890625, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1971c2&quot;, &quot;backgroundColor&quot;: &quot;#a5d8ff&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;seed&quot;: 1911831160, &quot;version&quot;: 24, &quot;versionNonce&quot;: 1293505288, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1717305975299, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ 63.591552734375, 2.820465087890625 ] ], &quot;lastCommittedPoint&quot;: null, &quot;startBinding&quot;: null, &quot;endBinding&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: null }, { &quot;id&quot;: &quot;hqw6KIY82vdl7nnkZAV2N&quot;, &quot;type&quot;: &quot;line&quot;, &quot;x&quot;: 370.333740234375, &quot;y&quot;: -31.037200927734375, &quot;width&quot;: 70.7666015625, &quot;height&quot;: 2.029541015625, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1971c2&quot;, &quot;backgroundColor&quot;: &quot;#a5d8ff&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;seed&quot;: 547902072, &quot;version&quot;: 22, &quot;versionNonce&quot;: 1729256712, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1717305986424, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ 70.7666015625, 2.029541015625 ] ], &quot;lastCommittedPoint&quot;: null, &quot;startBinding&quot;: null, &quot;endBinding&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: null }, { &quot;id&quot;: &quot;YzEtXThz&quot;, &quot;type&quot;: &quot;text&quot;, &quot;x&quot;: 453.503662109375, &quot;y&quot;: -43.75933837890625, &quot;width&quot;: 34.08203125, &quot;height&quot;: 24, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1971c2&quot;, &quot;backgroundColor&quot;: &quot;#a5d8ff&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;seed&quot;: 1171356680, &quot;version&quot;: 8, &quot;versionNonce&quot;: 2142590216, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1717306131541, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;text&quot;: &quot;null&quot;, &quot;rawText&quot;: &quot;null&quot;, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 4, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;null&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;type&quot;: &quot;line&quot;, &quot;version&quot;: 1815, &quot;versionNonce&quot;: 1469696008, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;Xb0J03n--w06I0BHj4K60&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 0, &quot;opacity&quot;: 100, &quot;angle&quot;: 1.9801388315860269, &quot;x&quot;: -65.22411539358974, &quot;y&quot;: -323.1283896901153, &quot;strokeColor&quot;: &quot;#e03131&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 17.20185466203916, &quot;height&quot;: 290.1181120499851, &quot;seed&quot;: 640184952, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717306154862, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: null, &quot;endBinding&quot;: null, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: null, &quot;points&quot;: [ [ 0, 0 ], [ -17.141603910112952, -0.0016807391741959611 ], [ -17.20185466203916, 290.11643131081087 ], [ -0.061236394838734665, 289.97764280711533 ] ] }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 262, &quot;versionNonce&quot;: 130840072, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;jCnOVqnO&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0.5012522748952026, &quot;x&quot;: -66.12254914892469, &quot;y&quot;: -217.2909475579889, &quot;strokeColor&quot;: &quot;#e03131&quot;, &quot;backgroundColor&quot;: &quot;#a5d8ff&quot;, &quot;width&quot;: 29.1015625, &quot;height&quot;: 24, &quot;seed&quot;: 1939452680, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717306190201, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 4, &quot;text&quot;: &quot;a-c&quot;, &quot;rawText&quot;: &quot;a-c&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;a-c&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;type&quot;: &quot;line&quot;, &quot;version&quot;: 2145, &quot;versionNonce&quot;: 1115464312, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;KH_EsTT08MR-Mz1k-V5ou&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 0, &quot;opacity&quot;: 100, &quot;angle&quot;: 4.198342334098346, &quot;x&quot;: 21.66624799832376, &quot;y&quot;: 30.461542758699043, &quot;strokeColor&quot;: &quot;#2f9e44&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 11.957509786385373, &quot;height&quot;: 81.06220102685049, &quot;seed&quot;: 1274170744, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717306184040, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: null, &quot;endBinding&quot;: null, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: null, &quot;points&quot;: [ [ 0, 0 ], [ -11.91562773529558, -0.000469617066820364 ], [ -11.957509786385373, 81.06173140978366 ], [ -0.042567200162609176, 81.02295237076646 ] ] }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 341, &quot;versionNonce&quot;: 1781506424, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;NJTDezN3&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 5.710261367408889, &quot;x&quot;: 9.95746446236484, &quot;y&quot;: 80.23309138488673, &quot;strokeColor&quot;: &quot;#2f9e44&quot;, &quot;backgroundColor&quot;: &quot;#a5d8ff&quot;, &quot;width&quot;: 29.0625, &quot;height&quot;: 24, &quot;seed&quot;: 1979202168, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717306188276, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 4, &quot;text&quot;: &quot;b-c&quot;, &quot;rawText&quot;: &quot;b-c&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;b-c&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;type&quot;: &quot;line&quot;, &quot;version&quot;: 1964, &quot;versionNonce&quot;: 1782200328, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;DB7qnJ1Xt5DL0O5_amQiJ&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 0, &quot;opacity&quot;: 100, &quot;angle&quot;: 4.723236861358897, &quot;x&quot;: 243.72859841861805, &quot;y&quot;: -132.97330057910438, &quot;strokeColor&quot;: &quot;#1971c2&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 17.20185466203916, &quot;height&quot;: 290.1181120499851, &quot;seed&quot;: 1434243848, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717306215801, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: null, &quot;endBinding&quot;: null, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: null, &quot;points&quot;: [ [ 0, 0 ], [ -17.141603910112952, -0.0016807391741959611 ], [ -17.20185466203916, 290.11643131081087 ], [ -0.061236394838734665, 289.97764280711533 ] ] }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 453, &quot;versionNonce&quot;: 1519047544, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;qU9R6eYh&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 6.2489688546378215, &quot;x&quot;: 225.16586597120656, &quot;y&quot;: 30.460953061979133, &quot;strokeColor&quot;: &quot;#1971c2&quot;, &quot;backgroundColor&quot;: &quot;#a5d8ff&quot;, &quot;width&quot;: 10.595703125, &quot;height&quot;: 24, &quot;seed&quot;: 914478600, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717306225761, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 4, &quot;text&quot;: &quot;c&quot;, &quot;rawText&quot;: &quot;c&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;c&quot;, &quot;lineHeight&quot;: 1.2 } ], &quot;appState&quot;: { &quot;theme&quot;: &quot;dark&quot;, &quot;viewBackgroundColor&quot;: &quot;#ffffff&quot;, &quot;currentItemStrokeColor&quot;: &quot;#1971c2&quot;, &quot;currentItemBackgroundColor&quot;: &quot;#a5d8ff&quot;, &quot;currentItemFillStyle&quot;: &quot;solid&quot;, &quot;currentItemStrokeWidth&quot;: 2, &quot;currentItemStrokeStyle&quot;: &quot;solid&quot;, &quot;currentItemRoughness&quot;: 1, &quot;currentItemOpacity&quot;: 100, &quot;currentItemFontFamily&quot;: 4, &quot;currentItemFontSize&quot;: 20, &quot;currentItemTextAlign&quot;: &quot;left&quot;, &quot;currentItemStartArrowhead&quot;: null, &quot;currentItemEndArrowhead&quot;: &quot;arrow&quot;, &quot;scrollX&quot;: 617, &quot;scrollY&quot;: 445.1875, &quot;zoom&quot;: { &quot;value&quot;: 1 }, &quot;currentItemRoundness&quot;: &quot;round&quot;, &quot;gridSize&quot;: null, &quot;gridColor&quot;: { &quot;Bold&quot;: &quot;#C9C9C9FF&quot;, &quot;Regular&quot;: &quot;#EDEDEDFF&quot; }, &quot;currentStrokeOptions&quot;: null, &quot;previousGridSize&quot;: null, &quot;frameRendering&quot;: { &quot;enabled&quot;: true, &quot;clip&quot;: true, &quot;name&quot;: true, &quot;outline&quot;: true }, &quot;objectsSnapModeEnabled&quot;: false }, &quot;files&quot;: {}} %%","link":"/Assets/LeetCode%E9%9D%A2%E8%AF%95%E9%A2%9802.07-%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A4%202024-06-02%2013.24.47.excalidraw.html"},{"title":"","text":"==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠== Text Elements Input: [1,2,3,4,5,2,6,4] k = 4 result: [1,2,2,4] ^APPAFm5f 1 ^O4MWrXwg 1 ^TCjTrPMZ 2 ^obtjefMU 1 ^63iXQyBC 2 ^Bc9iT8ES 3 ^PXUsMaoI 1 ^HLEZCNEB 2 ^9CinjJQT 3 ^y1RW8LlQ 4 ^qH7qYefZ 1 ^5r22jH7z 2 ^0NALQzrZ 3 ^bynvQnOz 4 ^G2ZVbi46 5 ^YX1DYcJ6 1 ^ZJj8i8eL 2 ^SnhNTzDZ 3 ^wzyjoWWA 4 ^X4MwXQSc 5 ^DyRDcFrR rk=3 ^mrFseJ8W 2 ^JwdDg7qY 1 ^NCqZXQRR 2 ^0X2GacC2 3 ^RV99C6Fn 4 ^e6f86dPk 5 ^CGkUAoV0 rk=3 ^fYe2hoC5 2 ^zBYQIC5V 6 ^hZJRY0s5 4 ^GdmLpSwo 1 ^VLccp4UQ 2 ^WDTYRJxI 3 ^TRQZbPFI 4 ^eFwdBJtP 5 ^U7aiHI1h rk=4 ^0YKhEvdR 2 ^XR03as8k 6 ^ihk7h9vO %% Drawing{ &quot;type&quot;: &quot;excalidraw&quot;, &quot;version&quot;: 2, &quot;source&quot;: &quot;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.1.6&quot;, &quot;elements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 146, &quot;versionNonce&quot;: 1969757327, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;APPAFm5f&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -109.58222437941754, &quot;y&quot;: -194.36560283823536, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 221.6798553466797, &quot;height&quot;: 75, &quot;seed&quot;: 456572431, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737554875, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;Input: [1,2,3,4,5,2,6,4]\\nk = 4\\nresult: [1,2,2,4]&quot;, &quot;rawText&quot;: &quot;Input: [1,2,3,4,5,2,6,4]\\nk = 4\\nresult: [1,2,2,4]&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;Input: [1,2,3,4,5,2,6,4]\\nk = 4\\nresult: [1,2,2,4]&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 114, &quot;versionNonce&quot;: 1066975343, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;Imvk4BMBc7LfbGvNoI6zF&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -197.54150390625, &quot;y&quot;: -61.422882080078125, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 54.37310791015625, &quot;height&quot;: 204.90505981445312, &quot;seed&quot;: 1594446671, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 3 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737348317, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 2, &quot;versionNonce&quot;: 2103863521, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;O4MWrXwg&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -174, &quot;y&quot;: 113.1875, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 5.4199981689453125, &quot;height&quot;: 25, &quot;seed&quot;: 579740015, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737352003, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;1&quot;, &quot;rawText&quot;: &quot;1&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;1&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 144, &quot;versionNonce&quot;: 1349514735, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;BsRQAfKFaOhBNc9ZQTsDQ&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -99.46249389648438, &quot;y&quot;: -61.38526916503906, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 54.37310791015625, &quot;height&quot;: 204.90505981445312, &quot;seed&quot;: 836101199, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 3 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737358266, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 2, &quot;versionNonce&quot;: 1470967713, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;TCjTrPMZ&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -72, &quot;y&quot;: 117.1875, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 5.4199981689453125, &quot;height&quot;: 25, &quot;seed&quot;: 758150831, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737366483, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;1&quot;, &quot;rawText&quot;: &quot;1&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;1&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 18, &quot;versionNonce&quot;: 659934159, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;obtjefMU&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -77.968505859375, &quot;y&quot;: 87.93975830078125, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 14.239990234375, &quot;height&quot;: 25, &quot;seed&quot;: 227813167, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737372295, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;2&quot;, &quot;rawText&quot;: &quot;2&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;2&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 199, &quot;versionNonce&quot;: 1783493039, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;bPMbFI9gHK8z0N2k0nf_D&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 0.037017822265625, &quot;y&quot;: -59.47608947753906, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 54.37310791015625, &quot;height&quot;: 204.90505981445312, &quot;seed&quot;: 1920938273, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 3 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737388921, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 53, &quot;versionNonce&quot;: 1317403151, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;63iXQyBC&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 27.49951171875, &quot;y&quot;: 119.0966796875, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 5.4199981689453125, &quot;height&quot;: 25, &quot;seed&quot;: 77489409, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737383235, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;1&quot;, &quot;rawText&quot;: &quot;1&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;1&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 69, &quot;versionNonce&quot;: 1660543023, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;Bc9iT8ES&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 21.531005859375, &quot;y&quot;: 89.84893798828125, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 14.239990234375, &quot;height&quot;: 25, &quot;seed&quot;: 409738465, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737383236, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;2&quot;, &quot;rawText&quot;: &quot;2&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;2&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 25, &quot;versionNonce&quot;: 1940420015, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;PXUsMaoI&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 23.33636474609375, &quot;y&quot;: 63.6474609375, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 13.6199951171875, &quot;height&quot;: 25, &quot;seed&quot;: 844209217, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737392899, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;3&quot;, &quot;rawText&quot;: &quot;3&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;3&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 275, &quot;versionNonce&quot;: 1941496065, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;Ry1j4p0z0hnNR_8v_beKa&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 103.31393432617188, &quot;y&quot;: -58.13398742675781, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 54.37310791015625, &quot;height&quot;: 204.90505981445312, &quot;seed&quot;: 1152046369, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 3 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737403699, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 129, &quot;versionNonce&quot;: 920066273, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;HLEZCNEB&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 130.77642822265625, &quot;y&quot;: 120.43878173828125, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 5.4199981689453125, &quot;height&quot;: 25, &quot;seed&quot;: 1505069313, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737403699, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;1&quot;, &quot;rawText&quot;: &quot;1&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;1&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 145, &quot;versionNonce&quot;: 220419265, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;9CinjJQT&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 124.80792236328125, &quot;y&quot;: 91.1910400390625, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 14.239990234375, &quot;height&quot;: 25, &quot;seed&quot;: 117358817, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737403699, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;2&quot;, &quot;rawText&quot;: &quot;2&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;2&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 102, &quot;versionNonce&quot;: 59141185, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;y1RW8LlQ&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 126.61328125, &quot;y&quot;: 64.9532470703125, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 13.6199951171875, &quot;height&quot;: 25, &quot;seed&quot;: 1242954945, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737404799, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;3&quot;, &quot;rawText&quot;: &quot;3&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;3&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 153, &quot;versionNonce&quot;: 2128868673, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;qH7qYefZ&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 123.97991943359375, &quot;y&quot;: 37.40191650390625, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 12.79998779296875, &quot;height&quot;: 25, &quot;seed&quot;: 1157042177, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737408273, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;4&quot;, &quot;rawText&quot;: &quot;4&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;4&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 336, &quot;versionNonce&quot;: 1802494255, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;T6zA3sSttltaj0S0wzaR0&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 195.34921264648438, &quot;y&quot;: -55.90876770019531, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 54.37310791015625, &quot;height&quot;: 204.90505981445312, &quot;seed&quot;: 1205614177, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 3 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737413850, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 190, &quot;versionNonce&quot;: 341435215, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;5r22jH7z&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 222.81170654296875, &quot;y&quot;: 122.66400146484375, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 5.4199981689453125, &quot;height&quot;: 25, &quot;seed&quot;: 1252573761, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737413850, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;1&quot;, &quot;rawText&quot;: &quot;1&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;1&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 206, &quot;versionNonce&quot;: 821993839, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;0NALQzrZ&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 216.84320068359375, &quot;y&quot;: 93.416259765625, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 14.239990234375, &quot;height&quot;: 25, &quot;seed&quot;: 2142818849, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737413850, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;2&quot;, &quot;rawText&quot;: &quot;2&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;2&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 163, &quot;versionNonce&quot;: 1923521423, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;bynvQnOz&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 218.6485595703125, &quot;y&quot;: 67.178466796875, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 13.6199951171875, &quot;height&quot;: 25, &quot;seed&quot;: 1543235073, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737413850, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;3&quot;, &quot;rawText&quot;: &quot;3&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;3&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 215, &quot;versionNonce&quot;: 1977670671, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;G2ZVbi46&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 216.01519775390625, &quot;y&quot;: 39.665985107421875, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 12.79998779296875, &quot;height&quot;: 25, &quot;seed&quot;: 175209953, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737414712, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;4&quot;, &quot;rawText&quot;: &quot;4&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;4&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 267, &quot;versionNonce&quot;: 1444976993, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;YX1DYcJ6&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 216.57742309570312, &quot;y&quot;: 10.868408203125, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 12.3599853515625, &quot;height&quot;: 25, &quot;seed&quot;: 2077647951, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737418479, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;5&quot;, &quot;rawText&quot;: &quot;5&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;5&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 406, &quot;versionNonce&quot;: 804044367, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;lXEs8Jr1gs2KB6KTBmpsF&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 296.9039611816406, &quot;y&quot;: -54.05378723144531, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 54.37310791015625, &quot;height&quot;: 204.90505981445312, &quot;seed&quot;: 1033018607, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 3 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737497663, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 258, &quot;versionNonce&quot;: 826386657, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;ZJj8i8eL&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 324.366455078125, &quot;y&quot;: 124.51898193359375, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 5.4199981689453125, &quot;height&quot;: 25, &quot;seed&quot;: 1378821903, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737436519, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;1&quot;, &quot;rawText&quot;: &quot;1&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;1&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 274, &quot;versionNonce&quot;: 2075911361, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;SnhNTzDZ&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 318.39794921875, &quot;y&quot;: 95.271240234375, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 14.239990234375, &quot;height&quot;: 25, &quot;seed&quot;: 1391815983, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737436519, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;2&quot;, &quot;rawText&quot;: &quot;2&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;2&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 276, &quot;versionNonce&quot;: 383941217, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;wzyjoWWA&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 316.68820778886095, &quot;y&quot;: -123.01923290605629, &quot;strokeColor&quot;: &quot;#e03131&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 13.6199951171875, &quot;height&quot;: 25, &quot;seed&quot;: 189656911, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737471665, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;3&quot;, &quot;rawText&quot;: &quot;3&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;3&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 326, &quot;versionNonce&quot;: 1749452353, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;X4MwXQSc&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 313.9749525093358, &quot;y&quot;: -150.4633674803357, &quot;strokeColor&quot;: &quot;#e03131&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 12.79998779296875, &quot;height&quot;: 25, &quot;seed&quot;: 1167142255, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737471665, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;4&quot;, &quot;rawText&quot;: &quot;4&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;4&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 377, &quot;versionNonce&quot;: 754849313, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;DyRDcFrR&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 314.5369629230976, &quot;y&quot;: -179.2951179422194, &quot;strokeColor&quot;: &quot;#e03131&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 12.3599853515625, &quot;height&quot;: 25, &quot;seed&quot;: 1829218191, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737471665, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;5&quot;, &quot;rawText&quot;: &quot;5&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;5&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;id&quot;: &quot;mrFseJ8W&quot;, &quot;type&quot;: &quot;text&quot;, &quot;x&quot;: 302.60164689562305, &quot;y&quot;: -89.3358188264285, &quot;width&quot;: 44.29997253417969, &quot;height&quot;: 25, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#2f9e44&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;seed&quot;: 1945651695, &quot;version&quot;: 10, &quot;versionNonce&quot;: 2041491169, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1722737493895, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;text&quot;: &quot;rk=3&quot;, &quot;rawText&quot;: &quot;rk=3&quot;, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;rk=3&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;id&quot;: &quot;JwdDg7qY&quot;, &quot;type&quot;: &quot;text&quot;, &quot;x&quot;: 317.3148679330101, &quot;y&quot;: 65.84606438144033, &quot;width&quot;: 14.239990234375, &quot;height&quot;: 25, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;seed&quot;: 614927535, &quot;version&quot;: 33, &quot;versionNonce&quot;: 1950597473, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1722737502834, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;text&quot;: &quot;2&quot;, &quot;rawText&quot;: &quot;2&quot;, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;2&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 512, &quot;versionNonce&quot;: 866142625, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;ko87woOQ5PGAlLDGf-BCN&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 406.2242712938487, &quot;y&quot;: -54.645269331991045, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 54.37310791015625, &quot;height&quot;: 204.90505981445312, &quot;seed&quot;: 641972801, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 3 }, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;hZJRY0s5&quot; } ], &quot;updated&quot;: 1722737517264, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;id&quot;: &quot;hZJRY0s5&quot;, &quot;type&quot;: &quot;text&quot;, &quot;x&quot;: 427.01083135244244, &quot;y&quot;: 35.30726057523552, &quot;width&quot;: 12.79998779296875, &quot;height&quot;: 25, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;seed&quot;: 398986959, &quot;version&quot;: 2, &quot;versionNonce&quot;: 1568740705, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1722737518956, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;text&quot;: &quot;6&quot;, &quot;rawText&quot;: &quot;6&quot;, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;ko87woOQ5PGAlLDGf-BCN&quot;, &quot;originalText&quot;: &quot;6&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 363, &quot;versionNonce&quot;: 1307007919, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;NCqZXQRR&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 433.68676519033306, &quot;y&quot;: 123.92749983304805, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 5.4199981689453125, &quot;height&quot;: 25, &quot;seed&quot;: 489998881, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737513368, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;1&quot;, &quot;rawText&quot;: &quot;1&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;1&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 379, &quot;versionNonce&quot;: 1593707983, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;0X2GacC2&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 427.71825933095806, &quot;y&quot;: 94.6797581338293, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 14.239990234375, &quot;height&quot;: 25, &quot;seed&quot;: 1463344641, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737513368, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;2&quot;, &quot;rawText&quot;: &quot;2&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;2&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 381, &quot;versionNonce&quot;: 448363503, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;RV99C6Fn&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 426.008517901069, &quot;y&quot;: -123.61071500660196, &quot;strokeColor&quot;: &quot;#e03131&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 13.6199951171875, &quot;height&quot;: 25, &quot;seed&quot;: 55539169, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737513368, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;3&quot;, &quot;rawText&quot;: &quot;3&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;3&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 431, &quot;versionNonce&quot;: 1159865871, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;e6f86dPk&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 423.2952626215439, &quot;y&quot;: -151.05484958088144, &quot;strokeColor&quot;: &quot;#e03131&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 12.79998779296875, &quot;height&quot;: 25, &quot;seed&quot;: 1149768129, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737513368, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;4&quot;, &quot;rawText&quot;: &quot;4&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;4&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 482, &quot;versionNonce&quot;: 221285423, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;CGkUAoV0&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 423.85727303530564, &quot;y&quot;: -179.88660004276508, &quot;strokeColor&quot;: &quot;#e03131&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 12.3599853515625, &quot;height&quot;: 25, &quot;seed&quot;: 805450145, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737513368, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;5&quot;, &quot;rawText&quot;: &quot;5&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;5&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 115, &quot;versionNonce&quot;: 785198671, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;fYe2hoC5&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 411.9219570078311, &quot;y&quot;: -89.9273009269742, &quot;strokeColor&quot;: &quot;#2f9e44&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 44.29997253417969, &quot;height&quot;: 25, &quot;seed&quot;: 183326081, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737513368, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;rk=3&quot;, &quot;rawText&quot;: &quot;rk=3&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;rk=3&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 138, &quot;versionNonce&quot;: 1422953583, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;zBYQIC5V&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 426.63517804521814, &quot;y&quot;: 65.25458228089462, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 14.239990234375, &quot;height&quot;: 25, &quot;seed&quot;: 1216937313, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737513368, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;2&quot;, &quot;rawText&quot;: &quot;2&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;2&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 586, &quot;versionNonce&quot;: 606633487, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;uLem8Z-SPHE2rvL2B84cA&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 507.0230481009096, &quot;y&quot;: -59.593329123923354, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 54.37310791015625, &quot;height&quot;: 204.90505981445312, &quot;seed&quot;: 524707809, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 3 }, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;GdmLpSwo&quot; } ], &quot;updated&quot;: 1722737532541, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 77, &quot;versionNonce&quot;: 1424442735, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;GdmLpSwo&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 527.8096081595033, &quot;y&quot;: 30.35920078330321, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 12.79998779296875, &quot;height&quot;: 25, &quot;seed&quot;: 1758512065, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737533591, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;4&quot;, &quot;rawText&quot;: &quot;4&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;uLem8Z-SPHE2rvL2B84cA&quot;, &quot;originalText&quot;: &quot;4&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 437, &quot;versionNonce&quot;: 303924815, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;VLccp4UQ&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 534.485541997394, &quot;y&quot;: 118.97944004111577, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 5.4199981689453125, &quot;height&quot;: 25, &quot;seed&quot;: 1818534817, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737532541, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;1&quot;, &quot;rawText&quot;: &quot;1&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;1&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 453, &quot;versionNonce&quot;: 475391087, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;WDTYRJxI&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 528.517036138019, &quot;y&quot;: 89.73169834189702, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 14.239990234375, &quot;height&quot;: 25, &quot;seed&quot;: 909215617, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737532541, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;2&quot;, &quot;rawText&quot;: &quot;2&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;2&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 494, &quot;versionNonce&quot;: 1876678447, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;TRQZbPFI&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 527.7944591735162, &quot;y&quot;: -157.01976013947092, &quot;strokeColor&quot;: &quot;#e03131&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 13.6199951171875, &quot;height&quot;: 25, &quot;seed&quot;: 544665441, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737543894, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;3&quot;, &quot;rawText&quot;: &quot;3&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;3&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 544, &quot;versionNonce&quot;: 1406605647, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;eFwdBJtP&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 525.0812038939911, &quot;y&quot;: -184.4638947137504, &quot;strokeColor&quot;: &quot;#e03131&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 12.79998779296875, &quot;height&quot;: 25, &quot;seed&quot;: 293886785, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737543894, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;4&quot;, &quot;rawText&quot;: &quot;4&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;4&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 595, &quot;versionNonce&quot;: 929372015, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;U7aiHI1h&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 525.6432143077528, &quot;y&quot;: -213.29564517563404, &quot;strokeColor&quot;: &quot;#e03131&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 12.3599853515625, &quot;height&quot;: 25, &quot;seed&quot;: 2042186529, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737543894, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;5&quot;, &quot;rawText&quot;: &quot;5&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;5&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 191, &quot;versionNonce&quot;: 1608712207, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;0YKhEvdR&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 512.720733814892, &quot;y&quot;: -94.87536071890648, &quot;strokeColor&quot;: &quot;#2f9e44&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 43.47996520996094, &quot;height&quot;: 25, &quot;seed&quot;: 293945089, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737539183, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;rk=4&quot;, &quot;rawText&quot;: &quot;rk=4&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;rk=4&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 212, &quot;versionNonce&quot;: 1934507791, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;XR03as8k&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 527.433954852279, &quot;y&quot;: 60.306522488962344, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 14.239990234375, &quot;height&quot;: 25, &quot;seed&quot;: 1466414817, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1722737532541, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;2&quot;, &quot;rawText&quot;: &quot;2&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;2&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;id&quot;: &quot;ihk7h9vO&quot;, &quot;type&quot;: &quot;text&quot;, &quot;x&quot;: 527.083985443058, &quot;y&quot;: -129.10231434164348, &quot;width&quot;: 12.79998779296875, &quot;height&quot;: 25, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#e03131&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;seed&quot;: 162631361, &quot;version&quot;: 31, &quot;versionNonce&quot;: 861836815, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1722737549932, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;text&quot;: &quot;6&quot;, &quot;rawText&quot;: &quot;6&quot;, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;6&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;id&quot;: &quot;7wmC70do&quot;, &quot;type&quot;: &quot;text&quot;, &quot;x&quot;: 319.09051513671875, &quot;y&quot;: 35.89874267578125, &quot;width&quot;: 10, &quot;height&quot;: 25, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#2f9e44&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;seed&quot;: 1317744257, &quot;version&quot;: 2, &quot;versionNonce&quot;: 729685103, &quot;isDeleted&quot;: true, &quot;boundElements&quot;: null, &quot;updated&quot;: 1722737497664, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;text&quot;: &quot;&quot;, &quot;rawText&quot;: &quot;&quot;, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;lXEs8Jr1gs2KB6KTBmpsF&quot;, &quot;originalText&quot;: &quot;&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;id&quot;: &quot;9fFXCuPm&quot;, &quot;type&quot;: &quot;text&quot;, &quot;x&quot;: 299.1144395255179, &quot;y&quot;: -75.1839092188074, &quot;width&quot;: 10, &quot;height&quot;: 25, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#e03131&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;seed&quot;: 2026167745, &quot;version&quot;: 2, &quot;versionNonce&quot;: 1016293615, &quot;isDeleted&quot;: true, &quot;boundElements&quot;: null, &quot;updated&quot;: 1722737475872, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;text&quot;: &quot;&quot;, &quot;rawText&quot;: &quot;&quot;, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;id&quot;: &quot;jFRVgOrV&quot;, &quot;type&quot;: &quot;text&quot;, &quot;x&quot;: 307.03754661282505, &quot;y&quot;: -77.8249449145764, &quot;width&quot;: 10, &quot;height&quot;: 25, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#e03131&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;seed&quot;: 26965313, &quot;version&quot;: 2, &quot;versionNonce&quot;: 1204549999, &quot;isDeleted&quot;: true, &quot;boundElements&quot;: null, &quot;updated&quot;: 1722737476936, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;text&quot;: &quot;&quot;, &quot;rawText&quot;: &quot;&quot;, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;&quot;, &quot;lineHeight&quot;: 1.25 } ], &quot;appState&quot;: { &quot;theme&quot;: &quot;dark&quot;, &quot;viewBackgroundColor&quot;: &quot;#ffffff&quot;, &quot;currentItemStrokeColor&quot;: &quot;#e03131&quot;, &quot;currentItemBackgroundColor&quot;: &quot;transparent&quot;, &quot;currentItemFillStyle&quot;: &quot;solid&quot;, &quot;currentItemStrokeWidth&quot;: 2, &quot;currentItemStrokeStyle&quot;: &quot;solid&quot;, &quot;currentItemRoughness&quot;: 1, &quot;currentItemOpacity&quot;: 100, &quot;currentItemFontFamily&quot;: 1, &quot;currentItemFontSize&quot;: 20, &quot;currentItemTextAlign&quot;: &quot;left&quot;, &quot;currentItemStartArrowhead&quot;: null, &quot;currentItemEndArrowhead&quot;: &quot;arrow&quot;, &quot;scrollX&quot;: 1281.827737714174, &quot;scrollY&quot;: 583.4846171002539, &quot;zoom&quot;: { &quot;value&quot;: 0.6139416384069629 }, &quot;currentItemRoundness&quot;: &quot;round&quot;, &quot;gridSize&quot;: null, &quot;gridColor&quot;: { &quot;Bold&quot;: &quot;#C9C9C9FF&quot;, &quot;Regular&quot;: &quot;#EDEDEDFF&quot; }, &quot;currentStrokeOptions&quot;: null, &quot;previousGridSize&quot;: null, &quot;frameRendering&quot;: { &quot;enabled&quot;: true, &quot;clip&quot;: true, &quot;name&quot;: true, &quot;outline&quot;: true }, &quot;objectsSnapModeEnabled&quot;: false }, &quot;files&quot;: {}} %%","link":"/Assets/LeetCode402_%E7%A7%BB%E6%8E%89K%E4%BD%8D%E6%95%B0%E5%AD%97%202024-08-04%2010.07.49.excalidraw.html"},{"title":"","text":"==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠== Text Elements 升序栈 ^R8maeKi0 降序栈 ^cKAR1azv 3 7 8 ^Vd2wjlUH 2 ^Am34P7EJ 5 ^14TjSp8X 升序栈 ^O4sk5c1x 降序栈 ^QFO9BmYX 7 8 ^vcU3gS0q 3 2 ^TVSi0P56 5 ^DgfIlGok 升序栈 ^Nw0ABuh5 降序栈 ^1ZbgFApn 5 7 8 ^1NELYW0M 3 2 ^oiY4XNmf %% Drawing{ &quot;type&quot;: &quot;excalidraw&quot;, &quot;version&quot;: 2, &quot;source&quot;: &quot;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.1.6&quot;, &quot;elements&quot;: [ { &quot;id&quot;: &quot;f42HgXLQdwC1ZkplHMEd3&quot;, &quot;type&quot;: &quot;rectangle&quot;, &quot;x&quot;: -251.54122924804688, &quot;y&quot;: -208.50370788574224, &quot;width&quot;: 361.902587890625, &quot;height&quot;: 399.96997070312506, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#e03131&quot;, &quot;backgroundColor&quot;: &quot;#ffec99&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [ &quot;qtOcdxIUsdIjauAM2RXUj&quot; ], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 3 }, &quot;seed&quot;: 331145736, &quot;version&quot;: 823, &quot;versionNonce&quot;: 1143138936, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1717308813305, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;id&quot;: &quot;oo3OgHxpDAVnl1FhFd6U6&quot;, &quot;type&quot;: &quot;rectangle&quot;, &quot;x&quot;: -206.71975708007812, &quot;y&quot;: -118.12149047851562, &quot;width&quot;: 75.24160766601562, &quot;height&quot;: 246.73880004882812, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [ &quot;qtOcdxIUsdIjauAM2RXUj&quot; ], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 3 }, &quot;seed&quot;: 1781094264, &quot;version&quot;: 70, &quot;versionNonce&quot;: 867244296, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1717308813305, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 142, &quot;versionNonce&quot;: 1850661752, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;utovZTu1WVKCoQvLtvGIa&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -17.226516723632812, &quot;y&quot;: -117.57963562011719, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 75.24160766601562, &quot;height&quot;: 246.73880004882812, &quot;seed&quot;: 908739592, &quot;groupIds&quot;: [ &quot;qtOcdxIUsdIjauAM2RXUj&quot; ], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 3 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717308813305, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;id&quot;: &quot;R8maeKi0&quot;, &quot;type&quot;: &quot;text&quot;, &quot;x&quot;: -199.93655395507812, &quot;y&quot;: 148.70770263671875, &quot;width&quot;: 60, &quot;height&quot;: 24, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [ &quot;qtOcdxIUsdIjauAM2RXUj&quot; ], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;seed&quot;: 2054265096, &quot;version&quot;: 47, &quot;versionNonce&quot;: 121157640, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1717308813305, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;text&quot;: &quot;升序栈&quot;, &quot;rawText&quot;: &quot;升序栈&quot;, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 4, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;升序栈&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 99, &quot;versionNonce&quot;: 802466936, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;cKAR1azv&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -12.002685546875, &quot;y&quot;: 148.659912109375, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 60, &quot;height&quot;: 24, &quot;seed&quot;: 258921480, &quot;groupIds&quot;: [ &quot;qtOcdxIUsdIjauAM2RXUj&quot; ], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717308813305, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 4, &quot;text&quot;: &quot;降序栈&quot;, &quot;rawText&quot;: &quot;降序栈&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;降序栈&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 164, &quot;versionNonce&quot;: 1718908680, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;Vd2wjlUH&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -178.25274658203125, &quot;y&quot;: 40.17401123046875, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 12.001953125, &quot;height&quot;: 72, &quot;seed&quot;: 15489800, &quot;groupIds&quot;: [ &quot;qtOcdxIUsdIjauAM2RXUj&quot; ], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717308813305, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 4, &quot;text&quot;: &quot;3\\n7\\n8&quot;, &quot;rawText&quot;: &quot;3\\n7\\n8&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;3\\n7\\n8&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 252, &quot;versionNonce&quot;: 1115184504, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;Am34P7EJ&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 17.418701171875, &quot;y&quot;: 85.4388427734375, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 12.001953125, &quot;height&quot;: 24, &quot;seed&quot;: 395565832, &quot;groupIds&quot;: [ &quot;qtOcdxIUsdIjauAM2RXUj&quot; ], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717308813305, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 4, &quot;text&quot;: &quot;2&quot;, &quot;rawText&quot;: &quot;2&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;2&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 357, &quot;versionNonce&quot;: 98588168, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;14TjSp8X&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -76.5355224609375, &quot;y&quot;: -189.76370239257812, &quot;strokeColor&quot;: &quot;#e03131&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 12.001953125, &quot;height&quot;: 24, &quot;seed&quot;: 1071475832, &quot;groupIds&quot;: [ &quot;qtOcdxIUsdIjauAM2RXUj&quot; ], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717308813305, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 4, &quot;text&quot;: &quot;5&quot;, &quot;rawText&quot;: &quot;5&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;5&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 907, &quot;versionNonce&quot;: 125693560, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;skAvEtxW1Z7q746ZU1Wic&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 207.544189453125, &quot;y&quot;: -207.6585083007813, &quot;strokeColor&quot;: &quot;#e03131&quot;, &quot;backgroundColor&quot;: &quot;#ffec99&quot;, &quot;width&quot;: 361.902587890625, &quot;height&quot;: 399.96997070312506, &quot;seed&quot;: 207213576, &quot;groupIds&quot;: [ &quot;XfzmpXbLxK0CTRuGJyMzY&quot; ], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 3 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717308813305, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 150, &quot;versionNonce&quot;: 712529160, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;o2JLbHaOadlg4U0NHEUQz&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 252.36566162109375, &quot;y&quot;: -117.27629089355466, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 75.24160766601562, &quot;height&quot;: 246.73880004882812, &quot;seed&quot;: 1628574472, &quot;groupIds&quot;: [ &quot;XfzmpXbLxK0CTRuGJyMzY&quot; ], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 3 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717308813305, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 222, &quot;versionNonce&quot;: 396975992, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;KXnBaaoQbns0muSdGlt0u&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 441.85890197753906, &quot;y&quot;: -116.73443603515622, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 75.24160766601562, &quot;height&quot;: 246.73880004882812, &quot;seed&quot;: 308965896, &quot;groupIds&quot;: [ &quot;XfzmpXbLxK0CTRuGJyMzY&quot; ], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 3 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717308813305, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 127, &quot;versionNonce&quot;: 431518728, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;O4sk5c1x&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 259.14886474609375, &quot;y&quot;: 149.5529022216797, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 60, &quot;height&quot;: 24, &quot;seed&quot;: 1465839880, &quot;groupIds&quot;: [ &quot;XfzmpXbLxK0CTRuGJyMzY&quot; ], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717308813305, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 4, &quot;text&quot;: &quot;升序栈&quot;, &quot;rawText&quot;: &quot;升序栈&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;升序栈&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 179, &quot;versionNonce&quot;: 1396617336, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;QFO9BmYX&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 447.0827331542969, &quot;y&quot;: 149.50511169433594, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 60, &quot;height&quot;: 24, &quot;seed&quot;: 661360648, &quot;groupIds&quot;: [ &quot;XfzmpXbLxK0CTRuGJyMzY&quot; ], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717308813305, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 4, &quot;text&quot;: &quot;降序栈&quot;, &quot;rawText&quot;: &quot;降序栈&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;降序栈&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 248, &quot;versionNonce&quot;: 161264392, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;vcU3gS0q&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 280.8326721191406, &quot;y&quot;: 41.019210815429716, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 12.001953125, &quot;height&quot;: 72, &quot;seed&quot;: 713838344, &quot;groupIds&quot;: [ &quot;XfzmpXbLxK0CTRuGJyMzY&quot; ], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717308813305, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 4, &quot;text&quot;: &quot;\\n7\\n8&quot;, &quot;rawText&quot;: &quot;\\n7\\n8&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;\\n7\\n8&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 413, &quot;versionNonce&quot;: 514418040, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;TVSi0P56&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 476.3960876464844, &quot;y&quot;: 61.916549682617216, &quot;strokeColor&quot;: &quot;#2f9e44&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 12.001953125, &quot;height&quot;: 48, &quot;seed&quot;: 691875336, &quot;groupIds&quot;: [ &quot;XfzmpXbLxK0CTRuGJyMzY&quot; ], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717308816118, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 4, &quot;text&quot;: &quot;3\\n2&quot;, &quot;rawText&quot;: &quot;3\\n2&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;3\\n2&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 436, &quot;versionNonce&quot;: 278991368, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;DgfIlGok&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 382.5498962402344, &quot;y&quot;: -188.91850280761713, &quot;strokeColor&quot;: &quot;#e03131&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 12.001953125, &quot;height&quot;: 24, &quot;seed&quot;: 2088381704, &quot;groupIds&quot;: [ &quot;XfzmpXbLxK0CTRuGJyMzY&quot; ], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717308813306, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 4, &quot;text&quot;: &quot;5&quot;, &quot;rawText&quot;: &quot;5&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;5&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 951, &quot;versionNonce&quot;: 2063691016, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;9K3CnWfeXNatOoMJIjk9b&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 645.2273877210544, &quot;y&quot;: -212.05997052636744, &quot;strokeColor&quot;: &quot;#e03131&quot;, &quot;backgroundColor&quot;: &quot;#ffec99&quot;, &quot;width&quot;: 361.902587890625, &quot;height&quot;: 399.96997070312506, &quot;seed&quot;: 1991294072, &quot;groupIds&quot;: [ &quot;uzlnJFaKRf17FoFOg00XU&quot; ], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 3 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717308831901, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 194, &quot;versionNonce&quot;: 694062088, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;FolEd5BaRYEhvPqchCOhd&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 690.0488598890231, &quot;y&quot;: -121.67775311914082, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 75.24160766601562, &quot;height&quot;: 246.73880004882812, &quot;seed&quot;: 1934781816, &quot;groupIds&quot;: [ &quot;uzlnJFaKRf17FoFOg00XU&quot; ], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 3 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717308831901, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 266, &quot;versionNonce&quot;: 1824508680, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;t_Gz73pA0g0Re8ExNR_sh&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 879.5421002454684, &quot;y&quot;: -121.13589826074238, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 75.24160766601562, &quot;height&quot;: 246.73880004882812, &quot;seed&quot;: 848690808, &quot;groupIds&quot;: [ &quot;uzlnJFaKRf17FoFOg00XU&quot; ], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 3 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717308831901, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 171, &quot;versionNonce&quot;: 1335962120, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;Nw0ABuh5&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 696.8320630140231, &quot;y&quot;: 145.15143999609353, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 60, &quot;height&quot;: 24, &quot;seed&quot;: 1161785208, &quot;groupIds&quot;: [ &quot;uzlnJFaKRf17FoFOg00XU&quot; ], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717308831901, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 4, &quot;text&quot;: &quot;升序栈&quot;, &quot;rawText&quot;: &quot;升序栈&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;升序栈&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 223, &quot;versionNonce&quot;: 754886920, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;1ZbgFApn&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 884.7659314222262, &quot;y&quot;: 145.10364946874978, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 60, &quot;height&quot;: 24, &quot;seed&quot;: 59949176, &quot;groupIds&quot;: [ &quot;uzlnJFaKRf17FoFOg00XU&quot; ], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717308831901, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 4, &quot;text&quot;: &quot;降序栈&quot;, &quot;rawText&quot;: &quot;降序栈&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;降序栈&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 295, &quot;versionNonce&quot;: 1097295480, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;1NELYW0M&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 718.51587038707, &quot;y&quot;: 36.58046207629914, &quot;strokeColor&quot;: &quot;#2f9e44&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 12.001953125, &quot;height&quot;: 72, &quot;seed&quot;: 492040568, &quot;groupIds&quot;: [ &quot;uzlnJFaKRf17FoFOg00XU&quot; ], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717308839146, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 4, &quot;text&quot;: &quot;5\\n7\\n8&quot;, &quot;rawText&quot;: &quot;5\\n7\\n8&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;5\\n7\\n8&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 458, &quot;versionNonce&quot;: 1973290760, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;oiY4XNmf&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 914.0792859144137, &quot;y&quot;: 57.51508745703106, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 12.001953125, &quot;height&quot;: 48, &quot;seed&quot;: 700908152, &quot;groupIds&quot;: [ &quot;uzlnJFaKRf17FoFOg00XU&quot; ], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717308831901, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 4, &quot;text&quot;: &quot;3\\n2&quot;, &quot;rawText&quot;: &quot;3\\n2&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;3\\n2&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 481, &quot;versionNonce&quot;: 70259832, &quot;isDeleted&quot;: true, &quot;id&quot;: &quot;WZasI0iN&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 820.2330945081637, &quot;y&quot;: -193.28578572912087, &quot;strokeColor&quot;: &quot;#e03131&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 7.001953125, &quot;height&quot;: 24, &quot;seed&quot;: 934278008, &quot;groupIds&quot;: [ &quot;uzlnJFaKRf17FoFOg00XU&quot; ], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717308830793, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 4, &quot;text&quot;: &quot;&quot;, &quot;rawText&quot;: &quot;&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;id&quot;: &quot;A0D70tRi&quot;, &quot;type&quot;: &quot;text&quot;, &quot;x&quot;: 385.56231689453125, &quot;y&quot;: -19.64996337890628, &quot;width&quot;: 7.001953125, &quot;height&quot;: 24, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#e03131&quot;, &quot;backgroundColor&quot;: &quot;#ffec99&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [ &quot;XfzmpXbLxK0CTRuGJyMzY&quot; ], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;seed&quot;: 593768968, &quot;version&quot;: 10, &quot;versionNonce&quot;: 322368120, &quot;isDeleted&quot;: true, &quot;boundElements&quot;: null, &quot;updated&quot;: 1717308813306, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;text&quot;: &quot;&quot;, &quot;rawText&quot;: &quot;&quot;, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 4, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;skAvEtxW1Z7q746ZU1Wic&quot;, &quot;originalText&quot;: &quot;&quot;, &quot;lineHeight&quot;: 1.2 } ], &quot;appState&quot;: { &quot;theme&quot;: &quot;dark&quot;, &quot;viewBackgroundColor&quot;: &quot;#ffffff&quot;, &quot;currentItemStrokeColor&quot;: &quot;#2f9e44&quot;, &quot;currentItemBackgroundColor&quot;: &quot;#ffec99&quot;, &quot;currentItemFillStyle&quot;: &quot;hachure&quot;, &quot;currentItemStrokeWidth&quot;: 2, &quot;currentItemStrokeStyle&quot;: &quot;solid&quot;, &quot;currentItemRoughness&quot;: 1, &quot;currentItemOpacity&quot;: 100, &quot;currentItemFontFamily&quot;: 4, &quot;currentItemFontSize&quot;: 20, &quot;currentItemTextAlign&quot;: &quot;left&quot;, &quot;currentItemStartArrowhead&quot;: null, &quot;currentItemEndArrowhead&quot;: &quot;arrow&quot;, &quot;scrollX&quot;: 487.1554011842362, &quot;scrollY&quot;: 585.1575407785842, &quot;zoom&quot;: { &quot;value&quot;: 0.7230614104793613 }, &quot;currentItemRoundness&quot;: &quot;round&quot;, &quot;gridSize&quot;: null, &quot;gridColor&quot;: { &quot;Bold&quot;: &quot;#C9C9C9FF&quot;, &quot;Regular&quot;: &quot;#EDEDEDFF&quot; }, &quot;currentStrokeOptions&quot;: null, &quot;previousGridSize&quot;: null, &quot;frameRendering&quot;: { &quot;enabled&quot;: true, &quot;clip&quot;: true, &quot;name&quot;: true, &quot;outline&quot;: true }, &quot;objectsSnapModeEnabled&quot;: false }, &quot;files&quot;: {}} %%","link":"/Assets/LeetCode%E9%9D%A2%E8%AF%95%E9%A2%9803.05-%E6%A0%88%E6%8E%92%E5%BA%8F%202024-06-02%2014.08.24.excalidraw.html"},{"title":"","text":"==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠== Text Elements 豆腐干反对23213 ^GUGSmass 我惹我是德国 ^ybDj228t %% Drawing 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185{ &quot;type&quot;: &quot;excalidraw&quot;, &quot;version&quot;: 2, &quot;source&quot;: &quot;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.25&quot;, &quot;elements&quot;: [ { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 36, &quot;versionNonce&quot;: 1486148009, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;aw3SeJw2momZcaJFC1mO3&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -187.66665649414062, &quot;y&quot;: -169.70834350585938, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 218.66668701171875, &quot;height&quot;: 159.33334350585938, &quot;seed&quot;: 1231393033, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 3 }, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;GUGSmass&quot; } ], &quot;updated&quot;: 1713434837368, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 63, &quot;versionNonce&quot;: 425230953, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;GUGSmass&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -158.33819580078125, &quot;y&quot;: -102.04167175292969, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 160.009765625, &quot;height&quot;: 24, &quot;seed&quot;: 1786808297, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1713434847053, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 4, &quot;text&quot;: &quot;豆腐干反对23213&quot;, &quot;rawText&quot;: &quot;豆腐干反对23213&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;aw3SeJw2momZcaJFC1mO3&quot;, &quot;originalText&quot;: &quot;豆腐干反对23213&quot;, &quot;lineHeight&quot;: 1.2, &quot;baseline&quot;: 19 }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 38, &quot;versionNonce&quot;: 675725831, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;Uuq4SOUM4dDC50MnlIEXz&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 66.66665649414062, &quot;y&quot;: -85.37503051757812, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 218.66668701171875, &quot;height&quot;: 159.33334350585938, &quot;seed&quot;: 1492143881, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 3 }, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;ybDj228t&quot; } ], &quot;updated&quot;: 1713434848976, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 74, &quot;versionNonce&quot;: 440679207, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;ybDj228t&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 116, &quot;y&quot;: -17.708358764648438, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 120, &quot;height&quot;: 24, &quot;seed&quot;: 1979942377, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1713434851832, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 4, &quot;text&quot;: &quot;我惹我是德国&quot;, &quot;rawText&quot;: &quot;我惹我是德国&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;Uuq4SOUM4dDC50MnlIEXz&quot;, &quot;originalText&quot;: &quot;我惹我是德国&quot;, &quot;lineHeight&quot;: 1.2, &quot;baseline&quot;: 19 } ], &quot;appState&quot;: { &quot;theme&quot;: &quot;light&quot;, &quot;viewBackgroundColor&quot;: &quot;#ffffff&quot;, &quot;currentItemStrokeColor&quot;: &quot;#1e1e1e&quot;, &quot;currentItemBackgroundColor&quot;: &quot;transparent&quot;, &quot;currentItemFillStyle&quot;: &quot;solid&quot;, &quot;currentItemStrokeWidth&quot;: 2, &quot;currentItemStrokeStyle&quot;: &quot;solid&quot;, &quot;currentItemRoughness&quot;: 1, &quot;currentItemOpacity&quot;: 100, &quot;currentItemFontFamily&quot;: 4, &quot;currentItemFontSize&quot;: 20, &quot;currentItemTextAlign&quot;: &quot;left&quot;, &quot;currentItemStartArrowhead&quot;: null, &quot;currentItemEndArrowhead&quot;: &quot;arrow&quot;, &quot;scrollX&quot;: 617, &quot;scrollY&quot;: 304.29168701171875, &quot;zoom&quot;: { &quot;value&quot;: 1 }, &quot;currentItemRoundness&quot;: &quot;round&quot;, &quot;gridSize&quot;: null, &quot;gridColor&quot;: { &quot;Bold&quot;: &quot;#C9C9C9FF&quot;, &quot;Regular&quot;: &quot;#EDEDEDFF&quot; }, &quot;currentStrokeOptions&quot;: null, &quot;previousGridSize&quot;: null, &quot;frameRendering&quot;: { &quot;enabled&quot;: true, &quot;clip&quot;: true, &quot;name&quot;: true, &quot;outline&quot;: true } }, &quot;files&quot;: {}} %%","link":"/Assets/Obsidian%E5%AD%A6%E4%B9%A0%202024-04-18%2018.06.48.excalidraw.html"},{"title":"","text":"==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠== Text Elements 3 ^5z0dksqu 0 ^KSElNHYs 4 ^NJf6VTuC 1 ^uI3pTVxh 2 ^xT83G86f 3 que=[0,4] ^UeVne30j 3,0 que=[4,1] ^xcSFsprN 3,4 que=[0] ^ZXDfKCy7 3,0,4 que=[1] ^ZeWuj9fQ 3,0,1 que=[4,2] ^MpgqIxt7 3,4,0 que=[1] ^FiOLXDBq 3,4,0,1 que=[2] ^VbRCDBnl 3,4,0,1,2 ^F4RpDlsN 3,0,4,1 que=[2] ^Xo0Plmks 3,0,4,1,2 ^IyB4FPcy 3,0,1,4 que=[2] ^9jvNTDk5 3,0,1,2 que=[4] ^J1yAm4De 3,0,1,4,2 ^qpVgs68G 3,0,1,2,4 ^XpSxQpKb %% Drawing{ &quot;type&quot;: &quot;excalidraw&quot;, &quot;version&quot;: 2, &quot;source&quot;: &quot;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.1.6&quot;, &quot;elements&quot;: [ { &quot;id&quot;: &quot;59H72uqK58DuRUbpXcBEJ&quot;, &quot;type&quot;: &quot;ellipse&quot;, &quot;x&quot;: 1.28729248046875, &quot;y&quot;: 137.97103881835938, &quot;width&quot;: 52.20867919921875, &quot;height&quot;: 50.552642822265625, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;seed&quot;: 163021176, &quot;version&quot;: 48, &quot;versionNonce&quot;: 1502738296, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;5z0dksqu&quot; }, { &quot;id&quot;: &quot;tkJMpcjltC9ViIBUF6Azg&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;p-qn73BLL8J4Zivr9oq6y&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1717312434201, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;id&quot;: &quot;5z0dksqu&quot;, &quot;type&quot;: &quot;text&quot;, &quot;x&quot;: 21.43209996829781, &quot;y&quot;: 151.37430195622946, &quot;width&quot;: 12.001953125, &quot;height&quot;: 24, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;seed&quot;: 980926072, &quot;version&quot;: 5, &quot;versionNonce&quot;: 2043535368, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1717312425993, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;text&quot;: &quot;3&quot;, &quot;rawText&quot;: &quot;3&quot;, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 4, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;59H72uqK58DuRUbpXcBEJ&quot;, &quot;originalText&quot;: &quot;3&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;type&quot;: &quot;ellipse&quot;, &quot;version&quot;: 98, &quot;versionNonce&quot;: 823099400, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;alev12Q6yghqAPA_geXOs&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -49.142791748046875, &quot;y&quot;: 207.28236389160156, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 52.20867919921875, &quot;height&quot;: 50.552642822265625, &quot;seed&quot;: 195573624, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;KSElNHYs&quot; }, { &quot;id&quot;: &quot;tkJMpcjltC9ViIBUF6Azg&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;ahacCDRMj6Y3rcMyE8pYn&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1717312437049, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 57, &quot;versionNonce&quot;: 432960264, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;KSElNHYs&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -28.99798426021782, &quot;y&quot;: 220.68562702947165, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 12.001953125, &quot;height&quot;: 24, &quot;seed&quot;: 295864440, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717312412310, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 4, &quot;text&quot;: &quot;0&quot;, &quot;rawText&quot;: &quot;0&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;alev12Q6yghqAPA_geXOs&quot;, &quot;originalText&quot;: &quot;0&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;type&quot;: &quot;ellipse&quot;, &quot;version&quot;: 115, &quot;versionNonce&quot;: 1963993608, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;BEodODlr6bIxNOUMlhiFG&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 42.567596435546875, &quot;y&quot;: 206.22166442871094, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 52.20867919921875, &quot;height&quot;: 50.552642822265625, &quot;seed&quot;: 1548985720, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;NJf6VTuC&quot; } ], &quot;updated&quot;: 1717312414978, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 78, &quot;versionNonce&quot;: 428367480, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;NJf6VTuC&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 62.71240392337593, &quot;y&quot;: 219.62492756658102, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 12.001953125, &quot;height&quot;: 24, &quot;seed&quot;: 1454388856, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717312416106, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 4, &quot;text&quot;: &quot;4&quot;, &quot;rawText&quot;: &quot;4&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;BEodODlr6bIxNOUMlhiFG&quot;, &quot;originalText&quot;: &quot;4&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;type&quot;: &quot;ellipse&quot;, &quot;version&quot;: 153, &quot;versionNonce&quot;: 782573064, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;SwOZgiydgR13THUBL7bRS&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -3.683013916015625, &quot;y&quot;: 284.0092010498047, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 52.20867919921875, &quot;height&quot;: 50.552642822265625, &quot;seed&quot;: 149049720, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;uI3pTVxh&quot; }, { &quot;id&quot;: &quot;ahacCDRMj6Y3rcMyE8pYn&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1717312437049, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 116, &quot;versionNonce&quot;: 1662184968, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;uI3pTVxh&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 16.461793571813434, &quot;y&quot;: 297.41246418767474, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 12.001953125, &quot;height&quot;: 24, &quot;seed&quot;: 1418289784, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717312420223, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 4, &quot;text&quot;: &quot;1&quot;, &quot;rawText&quot;: &quot;1&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;SwOZgiydgR13THUBL7bRS&quot;, &quot;originalText&quot;: &quot;1&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;type&quot;: &quot;ellipse&quot;, &quot;version&quot;: 145, &quot;versionNonce&quot;: 796569464, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;5T5pWqiCwoqXuSiP5CDFc&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 33.019805908203125, &quot;y&quot;: 354.4148406982422, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 52.20867919921875, &quot;height&quot;: 50.552642822265625, &quot;seed&quot;: 330713864, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;xT83G86f&quot; } ], &quot;updated&quot;: 1717312424860, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 109, &quot;versionNonce&quot;: 73793656, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;xT83G86f&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 53.16461339603218, &quot;y&quot;: 367.81810383611224, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 12.001953125, &quot;height&quot;: 24, &quot;seed&quot;: 1405594120, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717312424860, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 4, &quot;text&quot;: &quot;2&quot;, &quot;rawText&quot;: &quot;2&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;5T5pWqiCwoqXuSiP5CDFc&quot;, &quot;originalText&quot;: &quot;2&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;id&quot;: &quot;tkJMpcjltC9ViIBUF6Azg&quot;, &quot;type&quot;: &quot;arrow&quot;, &quot;x&quot;: 11.32333065469107, &quot;y&quot;: 184.40838233308685, &quot;width&quot;: 20.966965386013328, &quot;height&quot;: 24.869331016671964, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;seed&quot;: 490648952, &quot;version&quot;: 96, &quot;versionNonce&quot;: 1383939080, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1717312706280, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ -20.966965386013328, 24.869331016671964 ] ], &quot;lastCommittedPoint&quot;: null, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;59H72uqK58DuRUbpXcBEJ&quot;, &quot;gap&quot;: 1, &quot;focus&quot;: -0.05259191740448432 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;alev12Q6yghqAPA_geXOs&quot;, &quot;gap&quot;: 1.384106095618609, &quot;focus&quot;: -0.18496712165456725 }, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;p-qn73BLL8J4Zivr9oq6y&quot;, &quot;type&quot;: &quot;arrow&quot;, &quot;x&quot;: 44.10577292372709, &quot;y&quot;: 183.93287435463577, &quot;width&quot;: 16.545044947366662, &quot;height&quot;: 26.55522378989548, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;seed&quot;: 496836872, &quot;version&quot;: 54, &quot;versionNonce&quot;: 1068965384, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1717312706280, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ 16.545044947366662, 26.55522378989548 ] ], &quot;lastCommittedPoint&quot;: null, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;59H72uqK58DuRUbpXcBEJ&quot;, &quot;gap&quot;: 1, &quot;focus&quot;: -0.12550285128135746 }, &quot;endBinding&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;ahacCDRMj6Y3rcMyE8pYn&quot;, &quot;type&quot;: &quot;arrow&quot;, &quot;x&quot;: -8.382382313180244, &quot;y&quot;: 254.6622645529252, &quot;width&quot;: 16.43355929702702, &quot;height&quot;: 31.03230342500848, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;seed&quot;: 2085898360, &quot;version&quot;: 97, &quot;versionNonce&quot;: 748353544, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1717312706280, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ 16.43355929702702, 31.03230342500848 ] ], &quot;lastCommittedPoint&quot;: null, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;alev12Q6yghqAPA_geXOs&quot;, &quot;gap&quot;: 1, &quot;focus&quot;: -0.10058713968272233 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;SwOZgiydgR13THUBL7bRS&quot;, &quot;gap&quot;: 2.1298802506755266, &quot;focus&quot;: -0.06399124805595356 }, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;n3uET-HJc2_--Y5V-UqyB&quot;, &quot;type&quot;: &quot;arrow&quot;, &quot;x&quot;: 34.19293212890625, &quot;y&quot;: 330.42608642578125, &quot;width&quot;: 13.36553955078125, &quot;height&quot;: 27.050048828125, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;seed&quot;: 1868832008, &quot;version&quot;: 35, &quot;versionNonce&quot;: 673482872, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1717312440126, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ 13.36553955078125, 27.050048828125 ] ], &quot;lastCommittedPoint&quot;: null, &quot;startBinding&quot;: null, &quot;endBinding&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;OkzIs_F6zF27q_286bin9&quot;, &quot;type&quot;: &quot;rectangle&quot;, &quot;x&quot;: 207.6651611328125, &quot;y&quot;: 216.1187744140625, &quot;width&quot;: 110.68597412109375, &quot;height&quot;: 68.6011962890625, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 3 }, &quot;seed&quot;: 718621816, &quot;version&quot;: 103, &quot;versionNonce&quot;: 978680440, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;UeVne30j&quot; }, { &quot;id&quot;: &quot;LTJz3O4Va2L8vJtL1KSAV&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;79XBwOwBHuQmbsdNSHBSZ&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1717312721443, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;id&quot;: &quot;UeVne30j&quot;, &quot;type&quot;: &quot;text&quot;, &quot;x&quot;: 226.53158569335938, &quot;y&quot;: 231.21937255859376, &quot;width&quot;: 72.953125, &quot;height&quot;: 38.4, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;seed&quot;: 485978232, &quot;version&quot;: 78, &quot;versionNonce&quot;: 533871112, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1717312536930, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;text&quot;: &quot;3\\nque=[0,4]&quot;, &quot;rawText&quot;: &quot;3\\nque=[0,4]&quot;, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 4, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;OkzIs_F6zF27q_286bin9&quot;, &quot;originalText&quot;: &quot;3\\nque=[0,4]&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 188, &quot;versionNonce&quot;: 587387256, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;jqVq76OozKtZtbouu55VT&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 364.6408996582031, &quot;y&quot;: 104.28964233398438, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 110.68597412109375, &quot;height&quot;: 68.6011962890625, &quot;seed&quot;: 995999096, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 3 }, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;xcSFsprN&quot; }, { &quot;id&quot;: &quot;LTJz3O4Va2L8vJtL1KSAV&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;ScFmtRG3hFaRmK6qlSRma&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;m3b-7YT2em67C6hb9kcep&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1717312727526, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 169, &quot;versionNonce&quot;: 61391112, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;xcSFsprN&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 383.50732421875, &quot;y&quot;: 119.39024047851562, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 72.953125, &quot;height&quot;: 38.4, &quot;seed&quot;: 2092387960, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717312618967, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 4, &quot;text&quot;: &quot;3,0\\nque=[4,1]&quot;, &quot;rawText&quot;: &quot;3,0\\nque=[4,1]&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;jqVq76OozKtZtbouu55VT&quot;, &quot;originalText&quot;: &quot;3,0\\nque=[4,1]&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 331, &quot;versionNonce&quot;: 1345078792, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;3OjfgQ_rlF_MmrAzif15P&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 371.5760192871094, &quot;y&quot;: 325.5050048828125, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 110.68597412109375, &quot;height&quot;: 68.6011962890625, &quot;seed&quot;: 153714696, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 3 }, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;ZXDfKCy7&quot; }, { &quot;id&quot;: &quot;79XBwOwBHuQmbsdNSHBSZ&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;3u3AuDbFIOgWe-17HMLkM&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1717312731093, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 318, &quot;versionNonce&quot;: 1875161720, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;ZXDfKCy7&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 398.04400634765625, &quot;y&quot;: 340.60560302734376, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 57.75, &quot;height&quot;: 38.4, &quot;seed&quot;: 2131509000, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717312613101, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 4, &quot;text&quot;: &quot;3,4\\nque=[0]&quot;, &quot;rawText&quot;: &quot;3,4\\nque=[0]&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;3OjfgQ_rlF_MmrAzif15P&quot;, &quot;originalText&quot;: &quot;3,4\\nque=[0]&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 234, &quot;versionNonce&quot;: 1260327800, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;HgFvjW40UcuZ35uPCr0ds&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 533.2886047363281, &quot;y&quot;: 33.251708984375, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 110.68597412109375, &quot;height&quot;: 68.6011962890625, &quot;seed&quot;: 861128968, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 3 }, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;ZeWuj9fQ&quot; }, { &quot;id&quot;: &quot;ScFmtRG3hFaRmK6qlSRma&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;awa7lW6tr3p8Nh5SQdlWN&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1717312734624, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 222, &quot;versionNonce&quot;: 1655636088, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;ZeWuj9fQ&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 559.756591796875, &quot;y&quot;: 48.35230712890625, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 57.75, &quot;height&quot;: 38.4, &quot;seed&quot;: 1594189832, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717312603633, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 4, &quot;text&quot;: &quot;3,0,4\\nque=[1]&quot;, &quot;rawText&quot;: &quot;3,0,4\\nque=[1]&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;HgFvjW40UcuZ35uPCr0ds&quot;, &quot;originalText&quot;: &quot;3,0,4\\nque=[1]&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 292, &quot;versionNonce&quot;: 278553208, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;6UJrI9OT5eV1BQlbQEKrL&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 538.6902160644531, &quot;y&quot;: 158.73526000976562, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 110.68597412109375, &quot;height&quot;: 68.6011962890625, &quot;seed&quot;: 936764536, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 3 }, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;MpgqIxt7&quot; }, { &quot;id&quot;: &quot;m3b-7YT2em67C6hb9kcep&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;7w7x4p-WM95IoNL88VhPr&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1717312739975, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 286, &quot;versionNonce&quot;: 1119927416, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;MpgqIxt7&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 557.556640625, &quot;y&quot;: 173.8358581542969, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 72.953125, &quot;height&quot;: 38.4, &quot;seed&quot;: 630363512, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717312678572, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 4, &quot;text&quot;: &quot;3,0,1\\nque=[4,2]&quot;, &quot;rawText&quot;: &quot;3,0,1\\nque=[4,2]&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;6UJrI9OT5eV1BQlbQEKrL&quot;, &quot;originalText&quot;: &quot;3,0,1\\nque=[4,2]&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 359, &quot;versionNonce&quot;: 491950856, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;vYz0btp1wRRDs9Pww1t9w&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 540.2265930175781, &quot;y&quot;: 322.2783203125, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 110.68597412109375, &quot;height&quot;: 68.6011962890625, &quot;seed&quot;: 2130316808, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 3 }, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;FiOLXDBq&quot; }, { &quot;id&quot;: &quot;81yWYKbezG9qYFg68TEiV&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1717312757354, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 351, &quot;versionNonce&quot;: 561726728, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;FiOLXDBq&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 566.694580078125, &quot;y&quot;: 337.37891845703126, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 57.75, &quot;height&quot;: 38.4, &quot;seed&quot;: 1201343752, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717312624575, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 4, &quot;text&quot;: &quot;3,4,0\\nque=[1]&quot;, &quot;rawText&quot;: &quot;3,4,0\\nque=[1]&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;vYz0btp1wRRDs9Pww1t9w&quot;, &quot;originalText&quot;: &quot;3,4,0\\nque=[1]&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 405, &quot;versionNonce&quot;: 1288464248, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;gUecHMB9ern2dLwdISRYe&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 704.5399475097656, &quot;y&quot;: 319.19366455078125, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 110.68597412109375, &quot;height&quot;: 68.6011962890625, &quot;seed&quot;: 970261112, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 3 }, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;VbRCDBnl&quot; }, { &quot;id&quot;: &quot;2h11PXGpCyDPVzYdOhPkk&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1717312754559, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 402, &quot;versionNonce&quot;: 1961481736, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;VbRCDBnl&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 731.0079345703125, &quot;y&quot;: 334.2942626953125, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 57.75, &quot;height&quot;: 38.4, &quot;seed&quot;: 368964472, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717312633140, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 4, &quot;text&quot;: &quot;3,4,0,1\\nque=[2]&quot;, &quot;rawText&quot;: &quot;3,4,0,1\\nque=[2]&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;gUecHMB9ern2dLwdISRYe&quot;, &quot;originalText&quot;: &quot;3,4,0,1\\nque=[2]&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 437, &quot;versionNonce&quot;: 1454252920, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;_oMyZt8B5gxrWNfPrONZc&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 860.7219543457031, &quot;y&quot;: 313.16680908203125, &quot;strokeColor&quot;: &quot;#1971c2&quot;, &quot;backgroundColor&quot;: &quot;#a5d8ff&quot;, &quot;width&quot;: 110.68597412109375, &quot;height&quot;: 68.6011962890625, &quot;seed&quot;: 1393963784, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 3 }, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;F4RpDlsN&quot; }, { &quot;id&quot;: &quot;2h11PXGpCyDPVzYdOhPkk&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1717312783248, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 439, &quot;versionNonce&quot;: 1489711736, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;F4RpDlsN&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 880.85791015625, &quot;y&quot;: 337.8674072265625, &quot;strokeColor&quot;: &quot;#1971c2&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 70.4140625, &quot;height&quot;: 19.2, &quot;seed&quot;: 1860866568, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717312782426, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 4, &quot;text&quot;: &quot;3,4,0,1,2&quot;, &quot;rawText&quot;: &quot;3,4,0,1,2&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;_oMyZt8B5gxrWNfPrONZc&quot;, &quot;originalText&quot;: &quot;3,4,0,1,2&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 278, &quot;versionNonce&quot;: 421442824, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;Gj0FkbB7zRYlhLsJRTrqJ&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 701.2501525878906, &quot;y&quot;: 31.74884033203125, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 110.68597412109375, &quot;height&quot;: 68.6011962890625, &quot;seed&quot;: 889949304, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 3 }, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;Xo0Plmks&quot; }, { &quot;id&quot;: &quot;awa7lW6tr3p8Nh5SQdlWN&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;nAFOzDfP0CSdx1PWcE8Ll&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1717312743594, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 271, &quot;versionNonce&quot;: 1430856568, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;Xo0Plmks&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 727.7181396484375, &quot;y&quot;: 46.8494384765625, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 57.75, &quot;height&quot;: 38.4, &quot;seed&quot;: 1037254008, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717312657718, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 4, &quot;text&quot;: &quot;3,0,4,1\\nque=[2]&quot;, &quot;rawText&quot;: &quot;3,0,4,1\\nque=[2]&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;Gj0FkbB7zRYlhLsJRTrqJ&quot;, &quot;originalText&quot;: &quot;3,0,4,1\\nque=[2]&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 363, &quot;versionNonce&quot;: 1420920184, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;2qCIqxIOpZ8XXVtJPibAV&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 863.9944152832031, &quot;y&quot;: 30.603973388671875, &quot;strokeColor&quot;: &quot;#1971c2&quot;, &quot;backgroundColor&quot;: &quot;#a5d8ff&quot;, &quot;width&quot;: 110.68597412109375, &quot;height&quot;: 68.6011962890625, &quot;seed&quot;: 338791688, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 3 }, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;IyB4FPcy&quot; } ], &quot;updated&quot;: 1717312760616, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 362, &quot;versionNonce&quot;: 470996088, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;IyB4FPcy&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 884.13037109375, &quot;y&quot;: 55.304571533203124, &quot;strokeColor&quot;: &quot;#1971c2&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 70.4140625, &quot;height&quot;: 19.2, &quot;seed&quot;: 1737141256, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717312759498, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 4, &quot;text&quot;: &quot;3,0,4,1,2&quot;, &quot;rawText&quot;: &quot;3,0,4,1,2&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;2qCIqxIOpZ8XXVtJPibAV&quot;, &quot;originalText&quot;: &quot;3,0,4,1,2&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 346, &quot;versionNonce&quot;: 1651185016, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;OlKijOTLevEaF0hwmHTpy&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 701.8344421386719, &quot;y&quot;: 125.74996948242188, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 110.68597412109375, &quot;height&quot;: 68.6011962890625, &quot;seed&quot;: 1731945480, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 3 }, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;9jvNTDk5&quot; }, { &quot;id&quot;: &quot;K3mK7F1YlEtw6I31qIw-J&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1717312747828, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 345, &quot;versionNonce&quot;: 104897032, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;9jvNTDk5&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 728.3024291992188, &quot;y&quot;: 140.85056762695314, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 57.75, &quot;height&quot;: 38.4, &quot;seed&quot;: 155296520, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717312688722, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 4, &quot;text&quot;: &quot;3,0,1,4\\nque=[2]&quot;, &quot;rawText&quot;: &quot;3,0,1,4\\nque=[2]&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;OlKijOTLevEaF0hwmHTpy&quot;, &quot;originalText&quot;: &quot;3,0,1,4\\nque=[2]&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 396, &quot;versionNonce&quot;: 652949768, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;8GL586eOFEfNSapc-dbfT&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 700.2396545410156, &quot;y&quot;: 217.37496948242188, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 110.68597412109375, &quot;height&quot;: 68.6011962890625, &quot;seed&quot;: 1980066824, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 3 }, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;J1yAm4De&quot; }, { &quot;id&quot;: &quot;3AwDOsrUqFhNYGkvgXmo5&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1717312751545, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 395, &quot;versionNonce&quot;: 1032827000, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;J1yAm4De&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 726.7076416015625, &quot;y&quot;: 232.47556762695314, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 57.75, &quot;height&quot;: 38.4, &quot;seed&quot;: 1099606792, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717312692865, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 4, &quot;text&quot;: &quot;3,0,1,2\\nque=[4]&quot;, &quot;rawText&quot;: &quot;3,0,1,2\\nque=[4]&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;8GL586eOFEfNSapc-dbfT&quot;, &quot;originalText&quot;: &quot;3,0,1,2\\nque=[4]&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 422, &quot;versionNonce&quot;: 1078428424, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;QlDTfFuVpH9dHtqO29CXb&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 861.4315490722656, &quot;y&quot;: 123.59234619140625, &quot;strokeColor&quot;: &quot;#1971c2&quot;, &quot;backgroundColor&quot;: &quot;#a5d8ff&quot;, &quot;width&quot;: 110.68597412109375, &quot;height&quot;: 68.6011962890625, &quot;seed&quot;: 1410936840, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 3 }, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;qpVgs68G&quot; }, { &quot;id&quot;: &quot;K3mK7F1YlEtw6I31qIw-J&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1717312763683, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 426, &quot;versionNonce&quot;: 24986632, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;qpVgs68G&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 881.5675048828125, &quot;y&quot;: 148.2929443359375, &quot;strokeColor&quot;: &quot;#1971c2&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 70.4140625, &quot;height&quot;: 19.2, &quot;seed&quot;: 814083848, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717312763129, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 4, &quot;text&quot;: &quot;3,0,1,4,2&quot;, &quot;rawText&quot;: &quot;3,0,1,4,2&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;QlDTfFuVpH9dHtqO29CXb&quot;, &quot;originalText&quot;: &quot;3,0,1,4,2&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 467, &quot;versionNonce&quot;: 2002190344, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;2g6Cz6pkm9Kaqap7DYnLq&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 860.8235168457031, &quot;y&quot;: 217.52493286132812, &quot;strokeColor&quot;: &quot;#1971c2&quot;, &quot;backgroundColor&quot;: &quot;#a5d8ff&quot;, &quot;width&quot;: 110.68597412109375, &quot;height&quot;: 68.6011962890625, &quot;seed&quot;: 1890225016, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 3 }, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;XpSxQpKb&quot; }, { &quot;id&quot;: &quot;3AwDOsrUqFhNYGkvgXmo5&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1717312780562, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 476, &quot;versionNonce&quot;: 469262600, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;XpSxQpKb&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 880.95947265625, &quot;y&quot;: 242.22553100585938, &quot;strokeColor&quot;: &quot;#1971c2&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 70.4140625, &quot;height&quot;: 19.2, &quot;seed&quot;: 1262115960, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717312779993, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 4, &quot;text&quot;: &quot;3,0,1,2,4&quot;, &quot;rawText&quot;: &quot;3,0,1,2,4&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;2g6Cz6pkm9Kaqap7DYnLq&quot;, &quot;originalText&quot;: &quot;3,0,1,2,4&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;id&quot;: &quot;LTJz3O4Va2L8vJtL1KSAV&quot;, &quot;type&quot;: &quot;arrow&quot;, &quot;x&quot;: 320.184326171875, &quot;y&quot;: 236.177978515625, &quot;width&quot;: 40.89874267578125, &quot;height&quot;: 92.96728515625, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;seed&quot;: 1560202360, &quot;version&quot;: 49, &quot;versionNonce&quot;: 530786056, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1717312718415, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ 40.89874267578125, -92.96728515625 ] ], &quot;lastCommittedPoint&quot;: null, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;OkzIs_F6zF27q_286bin9&quot;, &quot;focus&quot;: 0.722831905361264, &quot;gap&quot;: 1.83319091796875 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;jqVq76OozKtZtbouu55VT&quot;, &quot;focus&quot;: 0.8074111171854377, &quot;gap&quot;: 3.557830810546875 }, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;79XBwOwBHuQmbsdNSHBSZ&quot;, &quot;type&quot;: &quot;arrow&quot;, &quot;x&quot;: 323.16546630859375, &quot;y&quot;: 244.87713623046875, &quot;width&quot;: 45.8359375, &quot;height&quot;: 107.7120361328125, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;seed&quot;: 196805896, &quot;version&quot;: 61, &quot;versionNonce&quot;: 531590008, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1717312721443, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ 45.8359375, 107.7120361328125 ] ], &quot;lastCommittedPoint&quot;: null, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;OkzIs_F6zF27q_286bin9&quot;, &quot;focus&quot;: -0.8938573468972144, &quot;gap&quot;: 4.8143310546875 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;3OjfgQ_rlF_MmrAzif15P&quot;, &quot;focus&quot;: -0.7842043207957422, &quot;gap&quot;: 2.574615478515625 }, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;ScFmtRG3hFaRmK6qlSRma&quot;, &quot;type&quot;: &quot;arrow&quot;, &quot;x&quot;: 476.49627685546875, &quot;y&quot;: 125.0556640625, &quot;width&quot;: 53.17572021484375, &quot;height&quot;: 57.035858154296875, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;seed&quot;: 1626664312, &quot;version&quot;: 37, &quot;versionNonce&quot;: 2009817608, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1717312723889, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ 53.17572021484375, -57.035858154296875 ] ], &quot;lastCommittedPoint&quot;: null, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;jqVq76OozKtZtbouu55VT&quot;, &quot;focus&quot;: 0.5026653851423077, &quot;gap&quot;: 1.169403076171875 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;HgFvjW40UcuZ35uPCr0ds&quot;, &quot;focus&quot;: 0.6702049337971536, &quot;gap&quot;: 3.616607666015625 }, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;m3b-7YT2em67C6hb9kcep&quot;, &quot;type&quot;: &quot;arrow&quot;, &quot;x&quot;: 480.2254638671875, &quot;y&quot;: 130.13311767578125, &quot;width&quot;: 53.10125732421875, &quot;height&quot;: 62.437896728515625, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;seed&quot;: 2102427656, &quot;version&quot;: 63, &quot;versionNonce&quot;: 1452925560, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1717312727527, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ 53.10125732421875, 62.437896728515625 ] ], &quot;lastCommittedPoint&quot;: null, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;jqVq76OozKtZtbouu55VT&quot;, &quot;focus&quot;: -0.797899819447322, &quot;gap&quot;: 4.898590087890625 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;6UJrI9OT5eV1BQlbQEKrL&quot;, &quot;focus&quot;: -0.7136193560749813, &quot;gap&quot;: 5.363494873046875 }, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;3u3AuDbFIOgWe-17HMLkM&quot;, &quot;type&quot;: &quot;arrow&quot;, &quot;x&quot;: 484.130615234375, &quot;y&quot;: 357.1920166015625, &quot;width&quot;: 57.83343505859375, &quot;height&quot;: 1.12890625, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;seed&quot;: 1525523576, &quot;version&quot;: 26, &quot;versionNonce&quot;: 125724424, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1717312731093, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ 57.83343505859375, -1.12890625 ] ], &quot;lastCommittedPoint&quot;: null, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;3OjfgQ_rlF_MmrAzif15P&quot;, &quot;focus&quot;: -0.04230583675272723, &quot;gap&quot;: 1.868621826171875 }, &quot;endBinding&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;awa7lW6tr3p8Nh5SQdlWN&quot;, &quot;type&quot;: &quot;arrow&quot;, &quot;x&quot;: 644.6367797851562, &quot;y&quot;: 68.44932556152344, &quot;width&quot;: 52.73895263671875, &quot;height&quot;: 1.0617828369140625, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;seed&quot;: 633750792, &quot;version&quot;: 38, &quot;versionNonce&quot;: 1977476216, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1717312734624, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ 52.73895263671875, -1.0617828369140625 ] ], &quot;lastCommittedPoint&quot;: null, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;HgFvjW40UcuZ35uPCr0ds&quot;, &quot;focus&quot;: 0.0571670405512036, &quot;gap&quot;: 1 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;Gj0FkbB7zRYlhLsJRTrqJ&quot;, &quot;focus&quot;: -0.004119519054761584, &quot;gap&quot;: 3.874420166015625 }, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;da9STI22B7h14Sw-xz_sC&quot;, &quot;type&quot;: &quot;arrow&quot;, &quot;x&quot;: 648.0075073242188, &quot;y&quot;: 195.36517333984375, &quot;width&quot;: 58.79876708984375, &quot;height&quot;: 30.68597412109375, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;seed&quot;: 1452877432, &quot;version&quot;: 27, &quot;versionNonce&quot;: 1096033288, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1717312736943, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ 58.79876708984375, -30.68597412109375 ] ], &quot;lastCommittedPoint&quot;: null, &quot;startBinding&quot;: null, &quot;endBinding&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;7w7x4p-WM95IoNL88VhPr&quot;, &quot;type&quot;: &quot;arrow&quot;, &quot;x&quot;: 652.1942749023438, &quot;y&quot;: 195.82684326171875, &quot;width&quot;: 48.23443603515625, &quot;height&quot;: 53.036865234375, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;seed&quot;: 574776072, &quot;version&quot;: 34, &quot;versionNonce&quot;: 856904056, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1717312739975, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ 48.23443603515625, 53.036865234375 ] ], &quot;lastCommittedPoint&quot;: null, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;6UJrI9OT5eV1BQlbQEKrL&quot;, &quot;focus&quot;: -0.6427580648820783, &quot;gap&quot;: 2.818084716796875 }, &quot;endBinding&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;nAFOzDfP0CSdx1PWcE8Ll&quot;, &quot;type&quot;: &quot;arrow&quot;, &quot;x&quot;: 812.0494384765625, &quot;y&quot;: 66.75923156738281, &quot;width&quot;: 52.1077880859375, &quot;height&quot;: 0.0084075927734375, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;seed&quot;: 756503416, &quot;version&quot;: 44, &quot;versionNonce&quot;: 1641199112, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1717312743594, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ 52.1077880859375, -0.0084075927734375 ] ], &quot;lastCommittedPoint&quot;: null, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;Gj0FkbB7zRYlhLsJRTrqJ&quot;, &quot;focus&quot;: 0.02094872804405976, &quot;gap&quot;: 1 }, &quot;endBinding&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;K3mK7F1YlEtw6I31qIw-J&quot;, &quot;type&quot;: &quot;arrow&quot;, &quot;x&quot;: 814.5899658203126, &quot;y&quot;: 160.42487902934354, &quot;width&quot;: 45.841583251953125, &quot;height&quot;: 0.2769070137600238, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;seed&quot;: 613602312, &quot;version&quot;: 27, &quot;versionNonce&quot;: 161031688, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1717312761279, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ 45.841583251953125, -0.2769070137600238 ] ], &quot;lastCommittedPoint&quot;: null, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;OlKijOTLevEaF0hwmHTpy&quot;, &quot;focus&quot;: 0.020279270512620882, &quot;gap&quot;: 2.069549560546875 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;QlDTfFuVpH9dHtqO29CXb&quot;, &quot;focus&quot;: -0.05528200750005979, &quot;gap&quot;: 1 }, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;3AwDOsrUqFhNYGkvgXmo5&quot;, &quot;type&quot;: &quot;arrow&quot;, &quot;x&quot;: 811.7132568359375, &quot;y&quot;: 255.53396606445312, &quot;width&quot;: 46.4630126953125, &quot;height&quot;: 2.446258544921875, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;seed&quot;: 713844856, &quot;version&quot;: 36, &quot;versionNonce&quot;: 1311692808, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1717312751545, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ 46.4630126953125, -2.446258544921875 ] ], &quot;lastCommittedPoint&quot;: null, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;8GL586eOFEfNSapc-dbfT&quot;, &quot;focus&quot;: 0.18309190186796792, &quot;gap&quot;: 1 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;2g6Cz6pkm9Kaqap7DYnLq&quot;, &quot;focus&quot;: 0.04812616367264828, &quot;gap&quot;: 2.647247314453125 }, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;2h11PXGpCyDPVzYdOhPkk&quot;, &quot;type&quot;: &quot;arrow&quot;, &quot;x&quot;: 816.2259216308594, &quot;y&quot;: 351.35679633011375, &quot;width&quot;: 43.49603271484375, &quot;height&quot;: 0.9161401783712222, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;seed&quot;: 1573811720, &quot;version&quot;: 49, &quot;versionNonce&quot;: 81981560, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1717312781423, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ 43.49603271484375, -0.9161401783712222 ] ], &quot;lastCommittedPoint&quot;: null, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;gUecHMB9ern2dLwdISRYe&quot;, &quot;focus&quot;: -0.03861741207965246, &quot;gap&quot;: 1 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;_oMyZt8B5gxrWNfPrONZc&quot;, &quot;focus&quot;: -0.050372325333499855, &quot;gap&quot;: 1 }, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;81yWYKbezG9qYFg68TEiV&quot;, &quot;type&quot;: &quot;arrow&quot;, &quot;x&quot;: 651.2407836914062, &quot;y&quot;: 355.11627197265625, &quot;width&quot;: 55.17803955078125, &quot;height&quot;: 0.79132080078125, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;seed&quot;: 1003944568, &quot;version&quot;: 23, &quot;versionNonce&quot;: 1722438664, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1717312757354, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ 55.17803955078125, 0.79132080078125 ] ], &quot;lastCommittedPoint&quot;: null, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;vYz0btp1wRRDs9Pww1t9w&quot;, &quot;focus&quot;: -0.06442758117311978, &quot;gap&quot;: 1 }, &quot;endBinding&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot; }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 434, &quot;versionNonce&quot;: 1778697848, &quot;isDeleted&quot;: true, &quot;id&quot;: &quot;EDhMJn65Dvqqmr2aB8K5l&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 914.6570129394531, &quot;y&quot;: 369.88690185546875, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 110.68597412109375, &quot;height&quot;: 68.6011962890625, &quot;seed&quot;: 1267841656, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 3 }, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;YGB93Ooo&quot; } ], &quot;updated&quot;: 1717312645861, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 438, &quot;versionNonce&quot;: 980090120, &quot;isDeleted&quot;: true, &quot;id&quot;: &quot;YGB93Ooo&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 934.79296875, &quot;y&quot;: 394.5875, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 70.4140625, &quot;height&quot;: 19.2, &quot;seed&quot;: 1063496568, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717312645861, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 4, &quot;text&quot;: &quot;3,4,0,1,2&quot;, &quot;rawText&quot;: &quot;3,4,0,1,2&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;EDhMJn65Dvqqmr2aB8K5l&quot;, &quot;originalText&quot;: &quot;3,4,0,1,2&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 230, &quot;versionNonce&quot;: 1526927736, &quot;isDeleted&quot;: true, &quot;id&quot;: &quot;utMh3InSw4QQEQVzzlpDR&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 541.1865539550781, &quot;y&quot;: 196.423583984375, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 110.68597412109375, &quot;height&quot;: 68.6011962890625, &quot;seed&quot;: 1516729864, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 3 }, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;6PVGhsN3&quot; } ], &quot;updated&quot;: 1717312591009, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 218, &quot;versionNonce&quot;: 394977800, &quot;isDeleted&quot;: true, &quot;id&quot;: &quot;6PVGhsN3&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 567.654541015625, &quot;y&quot;: 211.52418212890626, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 57.75, &quot;height&quot;: 38.4, &quot;seed&quot;: 555447560, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717312591009, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 4, &quot;text&quot;: &quot;3,4\\nque=[1]&quot;, &quot;rawText&quot;: &quot;3,4\\nque=[1]&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;utMh3InSw4QQEQVzzlpDR&quot;, &quot;originalText&quot;: &quot;3,4\\nque=[1]&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;id&quot;: &quot;G3Ab4BcA&quot;, &quot;type&quot;: &quot;text&quot;, &quot;x&quot;: -119.36297607421875, &quot;y&quot;: -128.53738403320312, &quot;width&quot;: 672.67578125, &quot;height&quot;: 264, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;seed&quot;: 923277832, &quot;version&quot;: 35, &quot;versionNonce&quot;: 1792241672, &quot;isDeleted&quot;: true, &quot;boundElements&quot;: null, &quot;updated&quot;: 1717312573043, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;text&quot;: &quot; \\n 3 4 que=[0] -0 que=[1] -1 que=[2] -2 [3,4,0,1,2] \\n / \\\\ /\\n 0 4 que=[] 3 que=[0,4] 3 4-1-2 [3,0,4,1,2]\\n \\\\ \\\\ /\\n 1 0 que=[4,1] 4-2 [3,0,1,4,2]\\n \\\\ \\\\ /\\n 2 1 que=[4,2]\\n \\\\\\n 2-4 [3,0,1,2,4]\\n&quot;, &quot;rawText&quot;: &quot; \\n 3 4 que=[0] -0 que=[1] -1 que=[2] -2 [3,4,0,1,2] \\n / \\\\ /\\n 0 4 que=[] 3 que=[0,4] 3 4-1-2 [3,0,4,1,2]\\n \\\\ \\\\ /\\n 1 0 que=[4,1] 4-2 [3,0,1,4,2]\\n \\\\ \\\\ /\\n 2 1 que=[4,2]\\n \\\\\\n 2-4 [3,0,1,2,4]\\n&quot;, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 4, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot; \\n 3 4 que=[0] -0 que=[1] -1 que=[2] -2 [3,4,0,1,2] \\n / \\\\ /\\n 0 4 que=[] 3 que=[0,4] 3 4-1-2 [3,0,4,1,2]\\n \\\\ \\\\ /\\n 1 0 que=[4,1] 4-2 [3,0,1,4,2]\\n \\\\ \\\\ /\\n 2 1 que=[4,2]\\n \\\\\\n 2-4 [3,0,1,2,4]\\n&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;id&quot;: &quot;8tzpxuAq&quot;, &quot;type&quot;: &quot;text&quot;, &quot;x&quot;: 197.59002685546875, &quot;y&quot;: 243.115234375, &quot;width&quot;: 60.185546875, &quot;height&quot;: 24, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;seed&quot;: 2028976648, &quot;version&quot;: 31, &quot;versionNonce&quot;: 119686920, &quot;isDeleted&quot;: true, &quot;boundElements&quot;: null, &quot;updated&quot;: 1717312532041, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;text&quot;: &quot;que=[]&quot;, &quot;rawText&quot;: &quot;que=[]&quot;, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 4, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;que=[]&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;id&quot;: &quot;rveq3TeKdzFyIxB7kJiEo&quot;, &quot;type&quot;: &quot;ellipse&quot;, &quot;x&quot;: 277.659912109375, &quot;y&quot;: 235.86126708984375, &quot;width&quot;: 94.09106445312501, &quot;height&quot;: 97.58795166015625, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;seed&quot;: 718843000, &quot;version&quot;: 559, &quot;versionNonce&quot;: 2060950280, &quot;isDeleted&quot;: true, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;Bx7FUcPj&quot; } ], &quot;updated&quot;: 1717312520295, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;id&quot;: &quot;Bx7FUcPj&quot;, &quot;type&quot;: &quot;text&quot;, &quot;x&quot;: 300.8650107240049, &quot;y&quot;: 265.45269172942113, &quot;width&quot;: 48.1484375, &quot;height&quot;: 38.4, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;seed&quot;: 1773287032, &quot;version&quot;: 472, &quot;versionNonce&quot;: 1950972280, &quot;isDeleted&quot;: true, &quot;boundElements&quot;: null, &quot;updated&quot;: 1717312520295, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;text&quot;: &quot;3\\nque=[]&quot;, &quot;rawText&quot;: &quot;3\\nque=[]&quot;, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 4, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;rveq3TeKdzFyIxB7kJiEo&quot;, &quot;originalText&quot;: &quot;3\\nque=[]&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;type&quot;: &quot;ellipse&quot;, &quot;version&quot;: 183, &quot;versionNonce&quot;: 1398962440, &quot;isDeleted&quot;: true, &quot;id&quot;: &quot;JS_VBL9ZgrI-0wpwMc3kh&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 430.438720703125, &quot;y&quot;: 163.22412109375, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 42.50122070312499, &quot;height&quot;: 48, &quot;seed&quot;: 2120197240, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;ZGcKfBQo&quot; } ], &quot;updated&quot;: 1717312520705, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 113, &quot;versionNonce&quot;: 1692629880, &quot;isDeleted&quot;: true, &quot;id&quot;: &quot;ZGcKfBQo&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 445.66190380824463, &quot;y&quot;: 175.25355834527286, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 12.001953125, &quot;height&quot;: 24, &quot;seed&quot;: 1961121144, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717312520705, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 4, &quot;text&quot;: &quot;3&quot;, &quot;rawText&quot;: &quot;3&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;JS_VBL9ZgrI-0wpwMc3kh&quot;, &quot;originalText&quot;: &quot;3&quot;, &quot;lineHeight&quot;: 1.2 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 86, &quot;versionNonce&quot;: 414504312, &quot;isDeleted&quot;: true, &quot;id&quot;: &quot;ndMkLqT9&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 379.4754638671875, &quot;y&quot;: 253.11773681640625, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 60.185546875, &quot;height&quot;: 24, &quot;seed&quot;: 156230776, &quot;groupIds&quot;: [], &quot;frameId&quot;: null, &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1717312484901, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 4, &quot;text&quot;: &quot;que=[]&quot;, &quot;rawText&quot;: &quot;que=[]&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;que=[]&quot;, &quot;lineHeight&quot;: 1.2 } ], &quot;appState&quot;: { &quot;theme&quot;: &quot;dark&quot;, &quot;viewBackgroundColor&quot;: &quot;#ffffff&quot;, &quot;currentItemStrokeColor&quot;: &quot;#1971c2&quot;, &quot;currentItemBackgroundColor&quot;: &quot;#a5d8ff&quot;, &quot;currentItemFillStyle&quot;: &quot;solid&quot;, &quot;currentItemStrokeWidth&quot;: 2, &quot;currentItemStrokeStyle&quot;: &quot;solid&quot;, &quot;currentItemRoughness&quot;: 1, &quot;currentItemOpacity&quot;: 100, &quot;currentItemFontFamily&quot;: 4, &quot;currentItemFontSize&quot;: 16, &quot;currentItemTextAlign&quot;: &quot;left&quot;, &quot;currentItemStartArrowhead&quot;: null, &quot;currentItemEndArrowhead&quot;: &quot;arrow&quot;, &quot;scrollX&quot;: 185, &quot;scrollY&quot;: 126.1875, &quot;zoom&quot;: { &quot;value&quot;: 1 }, &quot;currentItemRoundness&quot;: &quot;round&quot;, &quot;gridSize&quot;: null, &quot;gridColor&quot;: { &quot;Bold&quot;: &quot;#C9C9C9FF&quot;, &quot;Regular&quot;: &quot;#EDEDEDFF&quot; }, &quot;currentStrokeOptions&quot;: null, &quot;previousGridSize&quot;: null, &quot;frameRendering&quot;: { &quot;enabled&quot;: true, &quot;clip&quot;: true, &quot;name&quot;: true, &quot;outline&quot;: true }, &quot;objectsSnapModeEnabled&quot;: false }, &quot;files&quot;: {}} %%","link":"/Assets/LeetCode%E9%9D%A2%E8%AF%95%E9%A2%9804.09-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E5%BA%8F%E5%88%97%202024-06-02%2015.12.46.excalidraw.html"}]}